language: cs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>(array);\n        if (result.Count
    > 0) {\n            if ((result[0] + result[result.Count - 1]) % 2 == 0) {\n                result.Sort((a,
    b) => (int)(b - a));\n            } else {\n                result.Sort((a, b)
    => (int)(a - b));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0a3fd1f436343aab77224ad2f4688e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0a3fd1f436343aab77224ad2f4688e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>(array);\n        if (result.Count
    == 0) {\n            return result;\n        }\n        if (result.Count == 1)
    {\n            return result;\n        }\n        if (result[0] + result[result.Count
    - 1] % 2 == 0) {\n            result.Sort((x, y) => y.CompareTo(x));\n        }
    else {\n            result.Sort((x, y) => x.CompareTo(y));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad2863c0749e47ef92cf41644571f206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad2863c0749e47ef92cf41644571f206>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            result
    = array.OrderByDescending(x => x).ToList();\n        } else {\n            result
    = array.OrderBy(x => x).ToList();\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dcd51b8de6b498c8e8cb5feeafaed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dcd51b8de6b498c8e8cb5feeafaed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    tmp = array[0];\n                array[0] = array[1];\n                array[1]
    = tmp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6711da8ce9814601879516740074312f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6711da8ce9814601879516740074312f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        long sum = array[0] + array[array.Count - 1];\n        if (sum
    % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n
    \           array.Sort((a, b) => (int)(a - b));\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((x, y) => y.CompareTo(x));\n
    \       } else {\n            array.Sort((x, y) => x.CompareTo(y));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e47fde5d2bd40ccb991a1e983e3a2f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e47fde5d2bd40ccb991a1e983e3a2f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => {\n                if
    (a > b) {\n                    return -1;\n                }\n                if
    (a < b) {\n                    return 1;\n                }\n                return
    0;\n            });\n        } else {\n            array.Sort((a, b) => {\n                if
    (a > b) {\n                    return 1;\n                }\n                if
    (a < b) {\n                    return -1;\n                }\n                return
    0;\n            });\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daafa9dd3c164abd9608599ead7a57d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <daafa9dd3c164abd9608599ead7a57d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <50aa151cb1c54762a46ef8fc49b4dfd2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <50aa151cb1c54762a46ef8fc49b4dfd2>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count <= 1) {\n            return array;\n        }\n
    \       var sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0)
    {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else {\n            array.Sort((a,
    b) => a.CompareTo(b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <206b8a82c2a646c0af99ef41c3e99d37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <206b8a82c2a646c0af99ef41c3e99d37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    tmp = array[0];\n                array[0] = array[1];\n                array[1]
    = tmp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2876ffea1df84817aea36b6b4688eb3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2876ffea1df84817aea36b6b4688eb3d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a,
    b) => b.CompareTo(a));\n        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            return
    array;\n        }\n        var first = array[0];\n        var last = array[array.Count
    - 1];\n        var sum = first + last;\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1e6207c3e414e3a86bff489e6620779>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1e6207c3e414e3a86bff489e6620779>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var sum = array[0] + array[array.Count
    - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var sum = array[0] + array[array.Count
    - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        var sum = array[0] +
    array[array.Count - 1];\n        var isOdd = sum % 2 == 1;\n        var sorted
    = array.OrderBy(x => x).ToList();\n        if (isOdd) {\n            result =
    sorted;\n        } else {\n            result = sorted.OrderByDescending(x =>
    x).ToList();\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <9c55db565c514af0a54dfd142aa75623>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9c55db565c514af0a54dfd142aa75623>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <9c55db565c514af0a54dfd142aa75623>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9c55db565c514af0a54dfd142aa75623>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        var
    sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be0d357c0184effbbb3da0b1a2fff4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be0d357c0184effbbb3da0b1a2fff4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) return array;\n        if (array.Count
    == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]
    > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        long sum = array[0] + array[array.Count - 1];\n        if
    (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        }
    else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n        return
    array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ecb8a67d98a4c79be03ad65d921554b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ecb8a67d98a4c79be03ad65d921554b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                var
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8151a434c59477db54feb64ca76181d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8151a434c59477db54feb64ca76181d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a,
    b) => b.CompareTo(a));\n        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <df5cf58fabc743a5a45768fa1cd6dd4f>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if ((array[0] + array[1]) % 2 == 0) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => (int)(b
    - a));\n        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <508e3c7beaad4973aedbe7bac4e3cc73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <508e3c7beaad4973aedbe7bac4e3cc73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        long first = array[0];\n        long last = array[array.Count
    - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <67135a0bcb0d4eb7ab52eea269c587ea>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <67135a0bcb0d4eb7ab52eea269c587ea>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <67135a0bcb0d4eb7ab52eea269c587ea>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <67135a0bcb0d4eb7ab52eea269c587ea>:0
    \n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long first
    = array[0];\n        long last = array[array.Count - 1];\n        if ((first +
    last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c380674f95564127896bc09012686c42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c380674f95564127896bc09012686c42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var sum = array[0] + array[array.Count
    - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) return array;\n        if (array.Count
    == 1) return array;\n        if (array.Count == 2) {\n            if (array[0]
    > array[1]) {\n                var temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        var sum = array[0] + array[array.Count - 1];\n        if
    (sum % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        }
    else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n        return
    array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e11151cdce23432dbb1df9ee0bdb9b9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e11151cdce23432dbb1df9ee0bdb9b9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((x, y) => y.CompareTo(x));\n
    \       } else {\n            array.Sort((x, y) => x.CompareTo(y));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e47fde5d2bd40ccb991a1e983e3a2f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e47fde5d2bd40ccb991a1e983e3a2f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        int sum
    = (int)(array[0] + array[array.Count - 1]);\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c61a1734758341c1a197e3be7e802224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c61a1734758341c1a197e3be7e802224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        long sum = array[0] + array[array.Count - 1];\n        if (sum
    % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n
    \           array.Sort((a, b) => (int)(a - b));\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <66d345615d7d47fc8fc4772334e859a6>:0
    \n"
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>(array);\n        if (result.Count
    > 1) {\n            if ((result[0] + result[result.Count - 1]) % 2 == 0) {\n                result.Sort((a,
    b) => (int)(b - a));\n            } else {\n                result.Sort((a, b)
    => (int)(a - b));\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f39f586d6ea41ba8351986f3ac63524>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f39f586d6ea41ba8351986f3ac63524>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    tmp = array[0];\n                array[0] = array[1];\n                array[1]
    = tmp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a,
    b) => b.CompareTo(a));\n        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f2d7daa8f804f758598ed90e7c712a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f2d7daa8f804f758598ed90e7c712a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        long first =
    array[0];\n        long last = array[array.Count - 1];\n        if ((first + last)
    % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <95be6fcb72404a45a71cf9b4b6346d63>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <95be6fcb72404a45a71cf9b4b6346d63>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <95be6fcb72404a45a71cf9b4b6346d63>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <95be6fcb72404a45a71cf9b4b6346d63>:0
    \n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if(array.Count == 0) {\n            return array;\n        }\n
    \       if(array.Count == 1) {\n            return array;\n        }\n        if(array.Count
    == 2) {\n            if(array[0] > array[1]) {\n                long temp = array[0];\n
    \               array[0] = array[1];\n                array[1] = temp;\n            }\n
    \           return array;\n        }\n        if((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <208c8d1873e24f65bfb662fa7039a0ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <208c8d1873e24f65bfb662fa7039a0ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>(array);\n        if (result.Count
    == 0) {\n            return result;\n        }\n        if (result.Count == 1)
    {\n            return result;\n        }\n        if (result[0] + result[result.Count
    - 1] % 2 == 0) {\n            result.Sort();\n        } else {\n            result.Sort();\n
    \           result.Reverse();\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a94341dd2ee246a1b0c69e9730611e16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a94341dd2ee246a1b0c69e9730611e16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a,
    b) => b.CompareTo(a));\n        } else {\n            array.Sort((a, b) => a.CompareTo(b));\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <db6fef0c4e2c4e11a7cfe10d9a2441ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <542fa21779a5420f8fc6260e09cc1452>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <77facd1977bb4cc99e93e8772afc928e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var first = array[0];\n        var
    last = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69edbe25bfba45129c842c6c21af5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69edbe25bfba45129c842c6c21af5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var first = array[0];\n        var
    last = array[array.Count - 1];\n        var sum = first + last;\n        if (sum
    % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04790bf90ffa4f3ca497c7c1e575cebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04790bf90ffa4f3ca497c7c1e575cebe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            result
    = array.OrderByDescending(x => x).ToList();\n        } else {\n            result
    = array.OrderBy(x => x).ToList();\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dcd51b8de6b498c8e8cb5feeafaed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8dcd51b8de6b498c8e8cb5feeafaed24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        long sum
    = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ddbdf9a1ea94835a63e99025f3ec1c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        var first = array[0];\n
    \       var last = array[array.Count - 1];\n        if ((first + last) % 2 ==
    0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <0287a7f8b01e4726b5f68d020b5d8b13>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0287a7f8b01e4726b5f68d020b5d8b13>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <0287a7f8b01e4726b5f68d020b5d8b13>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0287a7f8b01e4726b5f68d020b5d8b13>:0
    \n"
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        var result = new List<long>();\n        if (array.Count == 0)
    {\n            return result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        var sum = array[0] + array[array.Count
    - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0aaa2a9c380149069f89f47e0ea0e8a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        var
    sum = array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be0d357c0184effbbb3da0b1a2fff4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be0d357c0184effbbb3da0b1a2fff4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5892123f462c4384aeaac18487c94b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Your code goes here.\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cad84369d18447f3b3b5d7971052b485>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n
    \       } else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a99f37960c5408a9ab4782d034b97fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a69bd63e79a458990dbdcab912ecba1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        // Write your code here\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a55e647d7404f9c8d56e33c12e2b00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        List<long> result = new List<long>();\n        if (array.Count
    == 0) {\n            return result;\n        }\n        if (array.Count == 1)
    {\n            result.Add(array[0]);\n            return result;\n        }\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b5e0e2590bf4161919061809353800e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    //
    >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new
    List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L,
    (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L,
    (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long>
    array) {\n        if (array.Count == 0) {\n            return array;\n        }\n
    \       if (array.Count == 1) {\n            return array;\n        }\n        if
    (array.Count == 2) {\n            if (array[0] > array[1]) {\n                long
    temp = array[0];\n                array[0] = array[1];\n                array[1]
    = temp;\n            }\n            return array;\n        }\n        if ((array[0]
    + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => (int)(b
    - a));\n        } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e31bb65a2c9484ab31b8970b87cc61c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e31bb65a2c9484ab31b8970b87cc61c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800571
