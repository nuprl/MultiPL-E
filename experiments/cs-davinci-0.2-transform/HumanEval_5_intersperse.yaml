name: HumanEval_5_intersperse
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    // >>> Intersperse((new List<long>()), (4L))\n  \
  \  // (new List<long>())\n    // >>> Intersperse((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})), (4L))\n    // (new List<long>(new long[]{(long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)3L}))\n    public static List<long> Intersperse(List<long>\
  \ numbers, long delimeter) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new\
  \ List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L,\
  \ (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
  \ (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        for (int i =\
    \ 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n        \
    \    if (i < numbers.Count - 1) {\n                result.Add(delimeter);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (numbers.Count == 0) {\n            return result;\n\
    \        }\n        result.Add(numbers[0]);\n        for (int i = 1; i < numbers.Count;\
    \ i++) {\n            result.Add(delimeter);\n            result.Add(numbers[i]);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n\
    \            if (i != numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i != numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \      if (i < numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \      if (i < numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \      if (i < numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \      if (i != numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if ((numbers.Count == 0)) {\n            return\
    \ result;\n        }\n        result.Add(numbers[0]);\n        for (long i = 1;\
    \ (i < numbers.Count); i++) {\n            result.Add(delimeter);\n          \
    \  result.Add(numbers[i]);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            result.Add(numbers[i]);\n            if (i != numbers.Count -\
    \ 1) {\n                result.Add(delimeter);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (numbers.Count == 0) {\n            return result;\n        }\n        result.Add(numbers[0]);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            result.Add(delimeter);\n\
    \            result.Add(numbers[i]);\n        }\n        return result;", "  \
    \      if (numbers.Count == 0) {\n            return numbers;\n        }\n   \
    \     List<long> result = new List<long>();\n        result.Add(numbers[0]);\n\
    \        for (int i = 1; i < numbers.Count; i++) {\n            result.Add(delimeter);\n\
    \            result.Add(numbers[i]);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            result.Add(numbers[i]);\n            if (i < numbers.Count\
    \ - 1) {\n                result.Add(delimeter);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    for (int i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n\
    \            if (i < numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i != numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        for (int i\
    \ = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n      \
    \      if (i != numbers.Count - 1) {\n                result.Add(delimeter);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n   \
    \         result.Add(numbers[i]);\n            if (i < numbers.Count - 1) {\n\
    \                result.Add(delimeter);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
