name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ['        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)).ToArray());', "        string result = \"\";\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (char.IsLower(str[i])) {\n   \
    \             result += char.ToUpper(str[i]);\n            } else {\n        \
    \        result += char.ToLower(str[i]);\n            }\n        }\n        return\
    \ result;", "        char[] chars = str.ToCharArray();\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            if (Char.IsLower(chars[i])) {\n      \
    \          chars[i] = Char.ToUpper(chars[i]);\n            } else if (Char.IsUpper(chars[i]))\
    \ {\n                chars[i] = Char.ToLower(chars[i]);\n            }\n     \
    \   }\n        return new string(chars);", "        string result = \"\";\n  \
    \      foreach (char c in str) {\n            if (char.IsLower(c)) {\n       \
    \         result += char.ToUpper(c);\n            } else {\n                result\
    \ += char.ToLower(c);\n            }\n        }\n        return result;", '        return
    new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToString();',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  "        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (Char.IsLower(chars[i])) {\n                chars[i]\
    \ = Char.ToUpper(chars[i]);\n            } else if (Char.IsUpper(chars[i])) {\n\
    \                chars[i] = Char.ToLower(chars[i]);\n            }\n        }\n\
    \        return new string(chars);", '        return new string(str.Select(c =>
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "        string\
    \ result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n           \
    \ if (char.IsLower(str[i])) {\n                result += char.ToUpper(str[i]);\n\
    \            } else {\n                result += char.ToLower(str[i]);\n     \
    \       }\n        }\n        return result;", '        return new string(str.Select(c
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "      \
    \  char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (Char.IsUpper(chars[i])) {\n                chars[i]\
    \ = Char.ToLower(chars[i]);\n            } else if (Char.IsLower(chars[i])) {\n\
    \                chars[i] = Char.ToUpper(chars[i]);\n            }\n        }\n\
    \        return new string(chars);", '        return new string(str.Select(c =>
    char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', "        string\
    \ result = \"\";\n        foreach (char c in str) {\n            if (char.IsLower(c))\
    \ {\n                result += char.ToUpper(c);\n            } else {\n      \
    \          result += char.ToLower(c);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
