language: cs
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ ^ b[i]).ToString());\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i])\n                sb.Append(\"\
    0\");\n            else\n                sb.Append(\"1\");\n        }\n      \
    \  return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <97aacd3a5547479a9ef880e7516659e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <97aacd3a5547479a9ef880e7516659e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new Exception(\"Strings must be of equal length\");\n     \
    \   }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length.\"\
    );\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"a and b must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert strings to byte arrays\n\
    \        byte[] aBytes = System.Text.Encoding.UTF8.GetBytes(a);\n        byte[]\
    \ bBytes = System.Text.Encoding.UTF8.GetBytes(b);\n        // Compute XOR\n  \
    \      byte[] xorBytes = aBytes.Zip(bBytes, (x, y) => (byte)(x ^ y)).ToArray();\n\
    \        // Convert result back to string\n        return System.Text.Encoding.UTF8.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6abbb0a61d44713aa8137272c1a6631>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6abbb0a61d44713aa8137272c1a6631>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this method\n\
    \        //throw new NotImplementedException();\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < a.Length; i++)\n        {\n  \
    \          if (a[i] == b[i])\n            {\n                sb.Append(\"0\");\n\
    \            }\n            else\n            {\n                sb.Append(\"\
    1\");\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                sb.Append(\"0\");\n            } else {\n                sb.Append(\"\
    1\");\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to bytes\n\
    \        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes =\
    \ Encoding.ASCII.GetBytes(b);\n        // XOR the bytes\n        byte[] xorBytes\
    \ = aBytes.Zip(bBytes, (x, y) => (byte)(x ^ y)).ToArray();\n        // Convert\
    \ the bytes back to a string\n        return Encoding.ASCII.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28b71d21f5c649579329c2fdf2fbeb53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28b71d21f5c649579329c2fdf2fbeb53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                result.Append(\"0\");\n            } else {\n               \
    \ result.Append(\"1\");\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        int n = a.Length;\n        if\
    \ (n != b.Length) {\n            throw new ArgumentException(\"Strings must be\
    \ of equal length.\");\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < n; i++) {\n            sb.Append(a[i] == b[i] ? '0'\
    \ : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                sb.Append(\"0\");\n            } else {\n                sb.Append(\"\
    1\");\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n\
    \            throw new ArgumentException(\"Inputs must be of equal length\");\n\
    \        var result = new StringBuilder();\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            if (a[i] == b[i])\n                result.Append(\"0\");\n\
    \            else\n                result.Append(\"1\");\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n\
    \        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes =\
    \ Encoding.ASCII.GetBytes(b);\n        // Perform XOR on the bytes.\n        byte[]\
    \ result = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length;\
    \ i++) {\n            result[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n\
    \        // Convert the bytes back to a string and return.\n        return Encoding.ASCII.GetString(result);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a0ce3a792d44a4b062db8c7b5df627>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a0ce3a792d44a4b062db8c7b5df627>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"a and b must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        var result = new StringBuilder();\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n\
    \        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes =\
    \ Encoding.ASCII.GetBytes(b);\n        // XOR the bytes.\n        byte[] xorBytes\
    \ = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length; i++)\
    \ {\n            xorBytes[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n   \
    \     // Convert the bytes back to a string and return it.\n        return Encoding.ASCII.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f831130bea94cf0b98f364a5f3451c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f831130bea94cf0b98f364a5f3451c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new Exception(\"Strings must be of equal length\");\n     \
    \   }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n     \
    \   return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        string result = \"\";\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            if (a[i] == b[i]) {\n                result += \"0\";\n\
    \            } else {\n                result += \"1\";\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"\
    0\");\n            } else {\n                sb.Append(\"1\");\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        int n = a.Length;\n        Debug.Assert(n\
    \ == b.Length);\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < n; i++) {\n            if (a[i] == b[i]) {\n               \
    \ sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        var sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n   \
    \             result += \"0\";\n            else\n                result += \"\
    1\";\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n   \
    \             result += \"0\";\n            else\n                result += \"\
    1\";\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i])\n   \
    \             result += \"0\";\n            else\n                result += \"\
    1\";\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                result.Append(\"0\");\n            } else {\n               \
    \ result.Append(\"1\");\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i])\
    \ ? \"0\" : \"1\";\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length.\"\
    );\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to byte\
    \ arrays.\n        byte[] aBytes = System.Text.Encoding.ASCII.GetBytes(a);\n \
    \       byte[] bBytes = System.Text.Encoding.ASCII.GetBytes(b);\n        // XOR\
    \ the byte arrays.\n        byte[] result = new byte[aBytes.Length];\n       \
    \ for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]\
    \ ^ bBytes[i]);\n        }\n        // Convert the result to a string and return.\n\
    \        return System.Text.Encoding.ASCII.GetString(result);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16192513719e4430a0d5c9150dfddb57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16192513719e4430a0d5c9150dfddb57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n\
    \            throw new ArgumentException(\"Input strings must be of same length.\"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
    \ < a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Input strings must have the same length.\"\
    );\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"\
    0\");\n            } else {\n                sb.Append(\"1\");\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n\
    \        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes =\
    \ Encoding.ASCII.GetBytes(b);\n        // XOR the bytes.\n        byte[] xorBytes\
    \ = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length; i++)\
    \ {\n            xorBytes[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n   \
    \     // Convert the bytes back to a string and return it.\n        return Encoding.ASCII.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f831130bea94cf0b98f364a5f3451c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f831130bea94cf0b98f364a5f3451c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n             \
    \   sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        //throw new NotImplementedException();\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < a.Length; i++)\n        {\n  \
    \          if (a[i] == b[i])\n            {\n                sb.Append(\"0\");\n\
    \            }\n            else\n            {\n                sb.Append(\"\
    1\");\n            }\n        }\n        return sb.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Input strings must have the same length.\"\
    );\n        }\n        var result = new StringBuilder();\n        for (int i =\
    \ 0; i < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n             \
    \   sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert to byte arrays\n\
    \        byte[] aBytes = a.Select(x => (byte)(x - '0')).ToArray();\n        byte[]\
    \ bBytes = b.Select(x => (byte)(x - '0')).ToArray();\n        // XOR\n       \
    \ byte[] result = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length;\
    \ i++) {\n            result[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n\
    \        // Convert back to string\n        return new string(result.Select(x\
    \ => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Your code here.\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3509ae1f44ae414391a986bd62307a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3509ae1f44ae414391a986bd62307a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                result.Append(\"0\");\n            } else {\n               \
    \ result.Append(\"1\");\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i])\n                sb.Append(\"\
    0\");\n            else\n                sb.Append(\"1\");\n        }\n      \
    \  return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n\
    \                result.Append(\"0\");\n            } else {\n               \
    \ result.Append(\"1\");\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Input strings must have the same length.\"\
    );\n        }\n        var result = new StringBuilder();\n        for (int i =\
    \ 0; i < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n\
    \        }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert the strings to byte\
    \ arrays.\n        byte[] aBytes = Encoding.UTF8.GetBytes(a);\n        byte[]\
    \ bBytes = Encoding.UTF8.GetBytes(b);\n        // Compute the XOR of the byte\
    \ arrays.\n        byte[] xorBytes = aBytes.Zip(bBytes, (x, y) => (byte)(x ^ y)).ToArray();\n\
    \        // Convert the result to a string and return it.\n        return Encoding.UTF8.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12ce54d350734ddda3c131b329109d72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12ce54d350734ddda3c131b329109d72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i])\
    \ ? '0' : '1';\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new Exception(\"Strings must be of equal length\");\n     \
    \   }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n     \
    \   return sb.ToString();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"\
    0\");\n            } else {\n                sb.Append(\"1\");\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"\
    0\");\n            } else {\n                sb.Append(\"1\");\n            }\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00010] in <884b05fee2d9409eb566f54016cdc5a3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00010] in <884b05fee2d9409eb566f54016cdc5a3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        // Hint: You can use Convert.ToInt32(a, 2) to convert a string a to an\
    \ integer.\n        //       You can use Convert.ToString(n, 2) to convert an\
    \ integer n to a string.\n        //       You can use Convert.ToString(n, 2).PadLeft(32,\
    \ '0') to convert an integer n to a 32-bit string.\n        //       You can use\
    \ Convert.ToString(n, 2).PadLeft(64, '0') to convert an integer n to a 64-bit\
    \ string.\n        //       You can use Convert.ToString(n, 2).PadLeft(128, '0')\
    \ to convert an integer n to a 128-bit string.\n        //       You can use Convert.ToString(n,\
    \ 2).PadLeft(256, '0') to convert an integer n to a 256-bit string.\n        //\
    \       You can use Convert.ToString(n, 2).PadLeft(512, '0') to convert an integer\
    \ n to a 512-bit string.\n        //       You can use Convert.ToString(n, 2).PadLeft(1024,\
    \ '0') to convert an integer n to a 1024-bit string.\n        //       You can\
    \ use Convert.ToString(n, 2).PadLeft(2048, '0') to convert an integer n to a 2048-bit\
    \ string.\n        //       You can use Convert.ToString(n, 2).PadLeft(4096, '0')\
    \ to convert an integer n to a 4096-bit string.\n        //       You can use\
    \ Convert.ToString(n, 2).PadLeft(8192, '0') to convert an integer n to a 8192-bit\
    \ string.\n        //       You can use Convert.ToString(n, 2).PadLeft(16384,\
    \ '0') to convert an integer n to a 16384-bit string.\n        //       You can\
    \ use Convert.ToString(n, 2).PadLeft(32768, '0') to convert an integer n to a\
    \ 32768-bit string.\n        //       You can use Convert.ToString(n, 2).PadLeft(65536,\
    \ '0') to convert an integer n to a 65536-bit string.\n        //       You can\
    \ use\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmsehxif0.cs(13,26): error CS0161: ''Problem.StringXor(string, string)'':
    not all code paths return a value

    '
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n     \
    \   }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        int n = a.Length;\n        Debug.Assert(b.Length\
    \ == n);\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < n; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        var result = new StringBuilder();\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n        }\n\
    \        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length.\"\
    );\n        }\n        var sb = new StringBuilder();\n        for (int i = 0;\
    \ i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        var result = new StringBuilder();\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n        }\n\
    \        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert strings to byte arrays.\n\
    \        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes =\
    \ Encoding.ASCII.GetBytes(b);\n        // Compute XOR of each byte.\n        byte[]\
    \ cBytes = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length;\
    \ i++) {\n            cBytes[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n\
    \        // Convert result to string.\n        return Encoding.ASCII.GetString(cBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03952119d2fc4d2e92b43c023a278390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03952119d2fc4d2e92b43c023a278390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        var sb = new StringBuilder();\n        for (int i = 0; i < a.Length;\
    \ i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n    \
    \    return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n\
    \        string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n\
    \            result += (a[i] == b[i]) ? \"0\" : \"1\";\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert to byte arrays\n\
    \        byte[] aBytes = a.Select(c => (byte)(c - '0')).ToArray();\n        byte[]\
    \ bBytes = b.Select(c => (byte)(c - '0')).ToArray();\n        // XOR\n       \
    \ byte[] xorBytes = aBytes.Zip(bBytes, (x, y) => (byte)(x ^ y)).ToArray();\n \
    \       // Convert back to string\n        return new string(xorBytes.Select(x\
    \ => (char)(x + '0')).ToArray());\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new Exception(\"Strings must be of equal length.\");\n    \
    \    }\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n  \
    \      return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n\
    \        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        string result = \"\";\n    \
    \    for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n \
    \               result += \"0\";\n            } else {\n                result\
    \ += \"1\";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),\
    \ (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n\
    \    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786be1c4243e46338970b60952555168>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var result = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]\
    \ == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n\
    \        for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]\
    \ ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\"\
    )).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"\
    0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // TODO: Implement this function.\n\
    \        // Hint: You can use Convert.ToInt32(string, 2) to convert a binary string\
    \ to an integer.\n        // Hint: You can use Convert.ToString(int, 2) to convert\
    \ an integer to a binary string.\n        int a_int = Convert.ToInt32(a, 2);\n\
    \        int b_int = Convert.ToInt32(b, 2);\n        int c_int = a_int ^ b_int;\n\
    \        string c = Convert.ToString(c_int, 2);\n        return c;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"\
    ), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"\
    1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"\
    0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11a10f2c67e440ff9067c5e31eb3997e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <11a10f2c67e440ff9067c5e31eb3997e>:0 \n"
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n\
    \            throw new ArgumentException(\"Strings must be of equal length\");\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\"\
    )));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"\
    0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Input are two strings a and b consisting only of 1s and\
    \ 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n\
    \    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static\
    \ string StringXor(string a, string b) {\n        // Convert strings to bytes\n\
    \        var aBytes = a.Select(c => (byte)c).ToArray();\n        var bBytes =\
    \ b.Select(c => (byte)c).ToArray();\n        // XOR the bytes\n        var xorBytes\
    \ = aBytes.Zip(bBytes, (x, y) => (byte)(x ^ y)).ToArray();\n        // Convert\
    \ the bytes back to a string\n        return Encoding.ASCII.GetString(xorBytes);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"\
    111000\"), (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"\
    1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"), (\"0000\"\
    )).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45a234b5ed7b431288336dec732a8b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45a234b5ed7b431288336dec732a8b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792997
