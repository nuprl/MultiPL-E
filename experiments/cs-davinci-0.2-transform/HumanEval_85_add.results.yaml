language: cs
name: HumanEval_85_add
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n  \
    \              result += lst[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i += 2) {\n            sum += lst[i];\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <feeb616014414ad9852b5af9e4df3e9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <feeb616014414ad9852b5af9e4df3e9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800084
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n  \
    \              result += lst[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (long i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[(int)i] % 2 == 0) {\n\
    \                sum += lst[(int)i];\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800084
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1 &&\
    \ x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => i % 2 == 1).Where(x\
    \ => x % 2 == 0).Sum();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        return lst.Where((x, i) => x % 2 == 0 &&\
    \ i % 2 == 1).Sum();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n\
    \    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)5L, (long)6L,\
    \ (long)7L, (long)2L, (long)122L}))) == (122L));\n    Debug.Assert(Add((new List<long>(new\
    \ long[]{(long)4L, (long)0L, (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)6L, (long)8L}))) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800084
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long sum = 0;\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n    \
    \            sum += lst[i];\n            }\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a non-empty list of integers lst. add the even elements\
    \ that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static\
    \ long Add(List<long> lst) {\n        long result = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (i % 2 == 1 && lst[i] % 2 == 0) {\n  \
    \              result += lst[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)88L}))) == (88L));\n    Debug.Assert(Add((new\
    \ List<long>(new long[]{(long)4L, (long)5L, (long)6L, (long)7L, (long)2L, (long)122L})))\
    \ == (122L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L, (long)0L,\
    \ (long)6L, (long)7L}))) == (0L));\n    Debug.Assert(Add((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)6L, (long)8L}))) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800030
