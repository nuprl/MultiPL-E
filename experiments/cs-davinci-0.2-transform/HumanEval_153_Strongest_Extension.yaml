name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
  \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
  )\n    public static string StrongestExtension(string class_name, List<string> extensions)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        // Your code goes here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        int max_strength\
    \ = 0;\n        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int strength = 0;\n            foreach (char c\
    \ in extension) {\n                if (Char.IsUpper(c)) {\n                  \
    \  strength++;\n                } else {\n                    strength--;\n  \
    \              }\n            }\n            if (strength > max_strength) {\n\
    \                max_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        return \"\";", " \
    \       // Your code goes here.\n        return \"\";", "        string strongest\
    \ = \"\";\n        double strength = -1;\n        foreach (string ext in extensions)\
    \ {\n            double s = 0;\n            foreach (char c in ext) {\n      \
    \          if (Char.IsUpper(c)) {\n                    s++;\n                }\
    \ else {\n                    s--;\n                }\n            }\n       \
    \     if (s > strength) {\n                strength = s;\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;",
  "        string strongest_extension = \"\";\n        double strongest_strength =\
    \ 0;\n        foreach (string extension in extensions) {\n            double strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    strength += 1;\n                } else if (char.IsLower(c))\
    \ {\n                    strength -= 1;\n                }\n            }\n  \
    \          if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        string strongest_extension = \"\";\n\
    \        double strongest_strength = 0;\n        foreach (string extension in\
    \ extensions) {\n            double strength = 0;\n            foreach (char c\
    \ in extension) {\n                if (char.IsUpper(c)) {\n                  \
    \  strength += 1;\n                } else {\n                    strength -= 1;\n\
    \                }\n            }\n            if (strength > strongest_strength)\
    \ {\n                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code goes here\n        return \"\";",
  "        // Your code goes here.\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        string strongest = \"\";\n        double strength = 0;\n  \
    \      foreach (string extension in extensions) {\n            double current_strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    current_strength += 1;\n                } else {\n  \
    \                  current_strength -= 1;\n                }\n            }\n\
    \            if (current_strength > strength) {\n                strength = current_strength;\n\
    \                strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        int max = 0;\n        string max_ext\
    \ = \"\";\n        foreach (string ext in extensions) {\n            int cap =\
    \ 0;\n            int sm = 0;\n            foreach (char c in ext) {\n       \
    \         if (c >= 'A' && c <= 'Z') {\n                    cap++;\n          \
    \      } else if (c >= 'a' && c <= 'z') {\n                    sm++;\n       \
    \         }\n            }\n            if (cap - sm > max) {\n              \
    \  max = cap - sm;\n                max_ext = ext;\n            }\n        }\n\
    \        return class_name + \".\" + max_ext;", '        return "";']
stop_tokens:
- "\n    }\n"
