name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  })))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  })))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return \"\";", "        int\
    \ max = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        string max = words[0];\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here.\n        return \"\";", "        string\
    \ max = \"\";\n        int maxUnique = 0;\n        foreach (string word in words)\
    \ {\n            int unique = 0;\n            foreach (char c in word) {\n   \
    \             if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                \
    \    unique++;\n                }\n            }\n            if (unique > maxUnique)\
    \ {\n                maxUnique = unique;\n                max = word;\n      \
    \      }\n        }\n        return max;", "        string max = \"\";\n     \
    \   int max_unique = 0;\n        foreach (string word in words) {\n          \
    \  int unique = 0;\n            foreach (char c in word) {\n                if\
    \ (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    unique++;\n\
    \                }\n            }\n            if (unique > max_unique) {\n  \
    \              max = word;\n                max_unique = unique;\n           \
    \ }\n        }\n        return max;", "        string max = \"\";\n        int\
    \ max_count = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        string max = words[0];\n        foreach (string word in words)\
    \ {\n            if (word.Length > max.Length) {\n                max = word;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function\n        return \"\";", "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function\n        return \"\";", " \
    \       // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        string max = \"\";\n        int max_count = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        // Write\
    \ your code here\n        return null;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       string max = words[0];\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max_count) {\n                max = word;\n                max_count = count;\n\
    \            }\n        }\n        return max;", "        string max = words[0];\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                max = word;\n            }\n  \
    \      }\n        return max;", "        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max) {\n                max = count;\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // TODO: implement this function\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        // TODO: Implement\n        return\
    \ \"\";", "        var max = words.First();\n        foreach (var word in words)\
    \ {\n            if (word.Distinct().Count() > max.Distinct().Count()) {\n   \
    \             max = word;\n            }\n        }\n        return max;", " \
    \       string max = \"\";\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max_count) {\n                max = word;\n                max_count = count;\n\
    \            }\n        }\n        return max;", "        // TODO: implement this\
    \ function\n        return \"\";", "        // Your code goes here.\n        return\
    \ \"\";", "        // Your code here\n        return null;", "        int max\
    \ = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        string max = \"\";\n        int\
    \ max_count = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        // Your\
    \ code goes here\n        return \"\";", "        string max = \"\";\n       \
    \ int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        //\
    \ your code here\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: implement\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        string max = \"\";\n        int max_count = 0;\n   \
    \     foreach (string word in words) {\n            int count = 0;\n         \
    \   foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        // Your code\
    \ goes here.\n        return \"\";", "        // Your code goes here\n       \
    \ return \"\";", "        string max = \"\";\n        int max_count = 0;\n   \
    \     foreach (string word in words) {\n            int count = 0;\n         \
    \   foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        int max =\
    \ 0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n\
    \            if (word.Distinct().Count() > max) {\n                max = word.Distinct().Count();\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        // TODO: Implement this function.\n \
    \       return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        string max = \"\";\n        int max_unique = 0;\n        foreach\
    \ (string word in words) {\n            int unique = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    unique++;\n                }\n            }\n           \
    \ if (unique > max_unique) {\n                max = word;\n                max_unique\
    \ = unique;\n            }\n        }\n        return max;", "        string max\
    \ = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        int\
    \ max = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", '        return words.OrderBy(x => x.Distinct().Count()).ThenBy(x
    => x).Last();', "        // Your code goes here.\n        return \"\";", "   \
    \     // Your code here\n        return \"\";", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // TODO: implement this function\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        string max = words[0];\n        int max_count = 0;\n      \
    \  foreach (string word in words) {\n            int count = 0;\n            foreach\
    \ (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        string max\
    \ = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        // TODO: implement this function\n\
    \        return \"\";", "        // TODO: write your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return null;", "        // Your code here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  '        return "";', "        string max = \"\";\n        int max_count = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \       if (count > max_count) {\n                max = word;\n              \
    \  max_count = count;\n            }\n        }\n        return max;", "     \
    \   // TODO: Implement this function.\n        return \"\";", "        // Your\
    \ code goes here.\n        return \"\";", '        return words.OrderBy(x => x.Distinct().Count()).ThenBy(x
    => x).Last();', "        // TODO: Implement this function\n        return \"\"\
    ;", "        // TODO: Implement this function\n        return null;", "      \
    \  // TODO: Implement this function\n        return \"\";", '        return words.OrderBy(x
    => x.Distinct().Count()).Last();', "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code here\n        return \"\";", "        // Your code\
    \ here\n        return \"\";", "        string result = \"\";\n        int max\
    \ = 0;\n        foreach (string word in words) {\n            if (word.Length\
    \ > max) {\n                max = word.Length;\n                result = word;\n\
    \            }\n        }\n        return result;", "        string max = \"\"\
    ;\n        int max_count = 0;\n        foreach (string word in words) {\n    \
    \        int count = 0;\n            foreach (char c in word) {\n            \
    \    if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count\
    \ += 1;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement\n        return \"\";", " \
    \       string max = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                max = word;\n\
    \            }\n        }\n        return max;", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max) {\n                max = count;\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string max = \"\";\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max_count) {\n                max = word;\n                max_count = count;\n\
    \            }\n        }\n        return max;", "        // your code here\n\
    \        int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (!word.Contains(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        string max = \"\";\n        int max_count = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        int max =\
    \ 0;\n        string maxWord = \"\";\n        foreach (string word in words) {\n\
    \            int count = 0;\n            foreach (char c in word) {\n        \
    \        if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        string\
    \ max = words[0];\n        for (int i = 1; i < words.Count; i++) {\n         \
    \   if (words[i].Length > max.Length) {\n                max = words[i];\n   \
    \         } else if (words[i].Length == max.Length) {\n                if (words[i].CompareTo(max)\
    \ < 0) {\n                    max = words[i];\n                }\n           \
    \ }\n        }\n        return max;", "        // Your code goes here\n      \
    \  return \"\";", "        // Your code here\n        return \"\";", "       \
    \ string max = words[0];\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > max_count) {\n                max = word;\n                max_count = count;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", '        return words.OrderBy(x => x.Distinct().Count()).ThenBy(x
    => x).Last();', "        // Your code goes here\n        return \"\";", "    \
    \    // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here.\n        return \"\";", "        string max_word = \"\";\n        int\
    \ max_unique = 0;\n        foreach (string word in words) {\n            HashSet<char>\
    \ unique = new HashSet<char>();\n            foreach (char c in word) {\n    \
    \            unique.Add(c);\n            }\n            if (unique.Count > max_unique)\
    \ {\n                max_unique = unique.Count;\n                max_word = word;\n\
    \            }\n        }\n        return max_word;", "        string max = \"\
    \";\n        int max_count = 0;\n        foreach (string word in words) {\n  \
    \          int count = 0;\n            foreach (char c in word) {\n          \
    \      if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max) {\n                max = count;\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // TODO: Implement this function\n        return \"\";", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        string max = \"\";\n        int max_count = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        // TODO:\
    \ Implement this function.\n        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return null;", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        string max = \"\";\n      \
    \  foreach (string word in words) {\n            if (word.Length > max.Length)\
    \ {\n                max = word;\n            }\n        }\n        return max;",
  "        // your code here\n        return \"\";", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // TODO: Implement this function.\n\
    \        return \"\";", "        int max = 0;\n        string maxWord = \"\";\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        string\
    \ result = \"\";\n        int max = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                result = word;\n            }\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ \"\";", '        return words.OrderBy(x => x.Distinct().Count()).ThenBy(x =>
    x).Last();', "        string max = \"\";\n        foreach (string word in words)\
    \ {\n            if (word.Length > max.Length) {\n                max = word;\n\
    \            }\n        }\n        return max;", "        // Write your code here\n\
    \        return \"\";", "        string max = words[0];\n        int max_unique\
    \ = 0;\n        foreach (string word in words) {\n            int unique = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    unique++;\n                }\n \
    \           }\n            if (unique > max_unique) {\n                max = word;\n\
    \                max_unique = unique;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here.\n        return \"\";", "        int\
    \ max = 0;\n        string max_word = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                max_word = word;\n            }\n\
    \        }\n        return max_word;", "        // TODO: Implement this function\n\
    \        return \"\";", "        string max = \"\";\n        int max_count = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        // Your code\
    \ goes here\n        return \"\";", "        string max = words[0];\n        int\
    \ max_count = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // your code goes here\n        return \"\";", "        // Your\
    \ code goes here.\n        return \"\";", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        string max = \"\";\n        int max_count = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        // Your code\
    \ goes here.\n        return \"\";", "        // Your code goes here\n       \
    \ return \"\";", "        // your code here\n        return \"\";", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        var max = words.Max(x => x.Distinct().Count());\n        return\
    \ words.First(x => x.Distinct().Count() == max);", "        string max = \"\"\
    ;\n        int max_count = 0;\n        foreach (string word in words) {\n    \
    \        int count = 0;\n            foreach (char c in word) {\n            \
    \    if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int unique =\
    \ 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    unique++;\n                }\n\
    \            }\n            if (unique > max) {\n                max = unique;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // Your code here\n        return \"\";", "        // TODO: Implement this\
    \ function.\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", '        return
    words.OrderBy(x => x.Distinct().Count()).Last();', "        // Your code goes\
    \ here\n        return \"\";", "        // TODO: Implement this function\n   \
    \     return \"\";", "        string max = \"\";\n        int max_count = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count += 1;\n                }\n            }\n     \
    \       if (count > max_count) {\n                max = word;\n              \
    \  max_count = count;\n            }\n        }\n        return max;", "     \
    \   // Your code goes here\n        return \"\";", '        return words.OrderBy(x
    => x.Distinct().Count()).ThenBy(x => x).Last();', "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // TODO: Implement this function\n\
    \        return \"\";", "        string max = \"\";\n        int max_count = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max_count) {\n                max = word;\n                max_count\
    \ = count;\n            }\n        }\n        return max;", "        string max\
    \ = \"\";\n        int maxUnique = 0;\n        foreach (string word in words)\
    \ {\n            int unique = 0;\n            foreach (char c in word) {\n   \
    \             if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                \
    \    unique++;\n                }\n            }\n            if (unique > maxUnique)\
    \ {\n                maxUnique = unique;\n                max = word;\n      \
    \      }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return \"\";", "        string result = \"\";\n        int max = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        // Your\
    \ code goes here\n        return \"\";", "        string max = \"\";\n       \
    \ int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", '        return words.OrderBy(x => x.Length).ThenBy(x
    => x).Last();', "        // TODO: Implement this function\n        return \"\"\
    ;", "        // Your code goes here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code here\n        return \"\";", "        // Your code\
    \ here\n        return \"\";", "        // TODO: implement this function\n   \
    \     return \"\";", "        int max = 0;\n        string maxWord = \"\";\n \
    \       foreach (string word in words) {\n            int count = 0;\n       \
    \     foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            if (word.Length > max_count) {\n                max = word;\n\
    \                max_count = word.Length;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // Your code goes here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // Your\
    \ code goes here.\n        return \"\";", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        string max = \"\";\n\
    \        int max_count = 0;\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        // Your code here\n        return \"\
    \";", "        // Your code goes here\n        return \"\";", "        // TODO:\
    \ Implement\n        return \"\";", "        var max = words.Max(x => x.Distinct().Count());\n\
    \        return words.First(x => x.Distinct().Count() == max);", "        // Write\
    \ your code here.\n        return \"\";", "        string max = \"\";\n      \
    \  int max_unique = 0;\n        foreach (string word in words) {\n           \
    \ int unique = 0;\n            foreach (char c in word) {\n                if\
    \ (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    unique++;\n\
    \                }\n            }\n            if (unique > max_unique) {\n  \
    \              max = word;\n                max_unique = unique;\n           \
    \ }\n        }\n        return max;", "        string max = \"\";\n        int\
    \ max_len = 0;\n        foreach (string word in words) {\n            int len\
    \ = word.Distinct().Count();\n            if (len > max_len) {\n             \
    \   max = word;\n                max_len = len;\n            }\n        }\n  \
    \      return max;", "        var max = words.Max(w => w.Distinct().Count());\n\
    \        return words.First(w => w.Distinct().Count() == max);", "        string\
    \ max = \"\";\n        int max_count = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max_count)\
    \ {\n                max = word;\n                max_count = count;\n       \
    \     }\n        }\n        return max;", "        string max = \"\";\n      \
    \  int max_count = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function\n        return \"\";"]
stop_tokens:
- "\n    }\n"
