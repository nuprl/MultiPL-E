language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(num),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float item in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(item),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800076
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0L;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56c23efedc0746f4abf574f8c8acd864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56c23efedc0746f4abf574f8c8acd864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800076
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float x in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(x),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here.\n        return 0L;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1cb7c9c065b46c1ae022b0955f5087d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1cb7c9c065b46c1ae022b0955f5087d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here.\n        return 0L;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1cb7c9c065b46c1ae022b0955f5087d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1cb7c9c065b46c1ae022b0955f5087d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Pow(Math.Ceiling(lst[i]), 2);\n        }\n        return sum;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float x in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(x),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n\
    \    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n\
    \    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>>\
    \ Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n\
    \    // (6L)\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Pow(Math.Ceiling(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799970
