name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> Encode((\"test\"))\n    // (\"TGST\")\n    // >>> Encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string\
  \ message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ["        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (c >= 'a' && c <= 'z') {\n                result += (char)(c\
    \ - 32);\n            } else if (c >= 'A' && c <= 'Z') {\n                result\
    \ += (char)(c + 32);\n            } else {\n                result += c;\n   \
    \         }\n        }\n        return result;", "        string encoded = \"\"\
    ;\n        foreach (char c in message) {\n            if (c == ' ') {\n      \
    \          encoded += ' ';\n            } else if (c == 'z') {\n             \
    \   encoded += 'B';\n            } else if (c == 'Z') {\n                encoded\
    \ += 'b';\n            } else if (c == 'y') {\n                encoded += 'A';\n\
    \            } else if (c == 'Y') {\n                encoded += 'a';\n       \
    \     } else if (c == 'x') {\n                encoded += '@';\n            } else\
    \ if (c == 'X') {\n                encoded += '@';\n            } else if (c ==\
    \ 'w') {\n                encoded += '?';\n            } else if (c == 'W') {\n\
    \                encoded += '?';\n            } else if (c == 'v') {\n       \
    \         encoded += '>';\n            } else if (c == 'V') {\n              \
    \  encoded += '>';\n            } else if (c == 'u') {\n                encoded\
    \ += '&';\n            } else if (c == 'U') {\n                encoded += '&';\n\
    \            } else if (c == 't') {\n                encoded += 'G';\n       \
    \     } else if (c == 'T') {\n                encoded += 'g';\n            } else\
    \ if (c == 's') {\n                encoded += 'F';\n            } else if (c ==\
    \ 'S') {\n                encoded += 'f';\n            } else if (c == 'r') {\n\
    \                encoded += 'E';\n            } else if (c == 'R') {\n       \
    \         encoded += 'e';\n            } else if (c == 'q') {\n              \
    \  encoded += 'D';\n            } else if (c == 'Q') {\n                encoded\
    \ += 'd';\n            } else if (c == 'p') {\n                encoded += 'C';\n\
    \            } else if (c == 'P') {\n                encoded += 'c';\n       \
    \     } else if (c == 'o') {\n                encoded += 'B';\n            } else\
    \ if (c == 'O') {\n                encoded += 'b';\n            } else if (c ==\
    \ 'n') {\n                encoded += 'A';\n           ", '        return "";',
  '        return "";', "        string encoded = \"\";\n        foreach (char c in\
    \ message) {\n            if (c >= 'a' && c <= 'z') {\n                encoded\
    \ += (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n\
    \                encoded += (char)(c - 'A' + 'a');\n            } else {\n   \
    \             encoded += c;\n            }\n        }\n        return encoded;",
  "        // TODO: Implement me!\n        return \"\";", "        string encoded\
    \ = \"\";\n        foreach (char c in message) {\n            if (c >= 'a' &&\
    \ c <= 'z') {\n                encoded += (char)(c - 'a' + 'A');\n           \
    \ } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char)(c - 'A'\
    \ + 'a');\n            } else {\n                encoded += c;\n            }\n\
    \        }\n        return encoded;", "        string encoded = \"\";\n      \
    \  foreach (char c in message) {\n            if (c >= 'a' && c <= 'z') {\n  \
    \              encoded += (char)(c - 'a' + 'A');\n            } else if (c >=\
    \ 'A' && c <= 'Z') {\n                encoded += (char)(c - 'A' + 'a');\n    \
    \        } else {\n                encoded += c;\n            }\n        }\n \
    \       return encoded;", "        string result = \"\";\n        foreach (char\
    \ c in message) {\n            if (c >= 'a' && c <= 'z') {\n                result\
    \ += (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n\
    \                result += (char)(c - 'A' + 'a');\n            } else {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  "        // Your code here\n        return \"\";", "        string result = \"\"\
    ;\n        foreach (char c in message) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += (char)(c - 'a' + 'A');\n            } else if (c\
    \ >= 'A' && c <= 'Z') {\n                result += (char)(c - 'A' + 'a');\n  \
    \          } else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        foreach (char\
    \ c in message) {\n            if (c >= 'a' && c <= 'z') {\n                result\
    \ += (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n\
    \                result += (char)(c - 'A' + 'a');\n            } else {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  "        string encoded = \"\";\n        foreach (char c in message) {\n       \
    \     if (c >= 'a' && c <= 'z') {\n                encoded += (char)(c - 32);\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char)(c\
    \ + 32);\n            } else {\n                encoded += c;\n            }\n\
    \        }\n        string vowels = \"aeiou\";\n        string encodedVowels =\
    \ \"cgjkm\";\n        for (int i = 0; i < encoded.Length; i++) {\n           \
    \ if (vowels.Contains(encoded[i])) {\n                encoded = encoded.Remove(i,\
    \ 1);\n                encoded = encoded.Insert(i, encodedVowels[vowels.IndexOf(encoded[i])].ToString());\n\
    \            }\n        }\n        return encoded;", "        // TODO: Implement\n\
    \        return \"\";", "        string encoded = \"\";\n        foreach (char\
    \ c in message) {\n            if (c >= 'a' && c <= 'z') {\n                encoded\
    \ += (char)(c - 32);\n            } else if (c >= 'A' && c <= 'Z') {\n       \
    \         encoded += (char)(c + 32);\n            } else {\n                encoded\
    \ += c;\n            }\n        }\n        string vowels = \"aeiou\";\n      \
    \  string encodedVowels = \"cgjkq\";\n        for (int i = 0; i < encoded.Length;\
    \ i++) {\n            if (vowels.Contains(encoded[i])) {\n                encoded\
    \ = encoded.Remove(i, 1);\n                encoded = encoded.Insert(i, encodedVowels[vowels.IndexOf(encoded[i])].ToString());\n\
    \            }\n        }\n        return encoded;", "        string result =\
    \ \"\";\n        foreach (char c in message) {\n            if (c >= 'a' && c\
    \ <= 'z') {\n                result += (char)(c - 'a' + 'A');\n            } else\
    \ if (c >= 'A' && c <= 'Z') {\n                result += (char)(c - 'A' + 'a');\n\
    \            } else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        string result = \"\";\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        foreach (char c in message) {\n    \
    \        if (Char.IsLetter(c)) {\n                if (Char.IsUpper(c)) {\n   \
    \                 result += Char.ToLower(c);\n                } else {\n     \
    \               result += Char.ToUpper(c);\n                }\n            } else\
    \ {\n                result += c;\n            }\n        }\n        foreach (char\
    \ v in vowels) {\n            result = result.Replace(v, (char)(v + 2));\n   \
    \         result = result.Replace(Char.ToUpper(v), (char)(Char.ToUpper(v) + 2));\n\
    \        }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in message) {\n            if (c == ' ') {\n                result +=\
    \ ' ';\n            } else if (c == 'z') {\n                result += 'b';\n \
    \           } else if (c == 'Z') {\n                result += 'B';\n         \
    \   } else if (c == 'y') {\n                result += 'a';\n            } else\
    \ if (c == 'Y') {\n                result += 'A';\n            } else if (c ==\
    \ 'x') {\n                result += 'z';\n            } else if (c == 'X') {\n\
    \                result += 'Z';\n            } else if (c == 'w') {\n        \
    \        result += 'y';\n            } else if (c == 'W') {\n                result\
    \ += 'Y';\n            } else if (c == 'v') {\n                result += 'x';\n\
    \            } else if (c == 'V') {\n                result += 'X';\n        \
    \    } else if (c == 'u') {\n                result += 'w';\n            } else\
    \ if (c == 'U') {\n                result += 'W';\n            } else if (c ==\
    \ 't') {\n                result += 'v';\n            } else if (c == 'T') {\n\
    \                result += 'V';\n            } else if (c == 's') {\n        \
    \        result += 'u';\n            } else if (c == 'S') {\n                result\
    \ += 'U';\n            } else if (c == 'r') {\n                result += 't';\n\
    \            } else if (c == 'R') {\n                result += 'T';\n        \
    \    } else if (c == 'q') {\n                result += 's';\n            } else\
    \ if (c == 'Q') {\n                result += 'S';\n            } else if (c ==\
    \ 'p') {\n                result += 'r';\n            } else if (c == 'P') {\n\
    \                result += 'R';\n            } else if (c == 'o') {\n        \
    \        result += 'q';\n            } else if (c == 'O') {\n                result\
    \ += 'Q';\n            } else if (c == 'n') {\n                result += 'p';\n\
    \           ", "        string encoded = \"\";\n        string vowels = \"aeiou\"\
    ;\n        for (int i = 0; i < message.Length; i++) {\n            char c = message[i];\n\
    \            if (vowels.Contains(c)) {\n                int index = vowels.IndexOf(c);\n\
    \                index = (index + 2) % 5;\n                c = vowels[index];\n\
    \            }\n            if (c >= 'a' && c <= 'z') {\n                c = (char)(c\
    \ - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n            \
    \    c = (char)(c - 'A' + 'a');\n            }\n            encoded += c;\n  \
    \      }\n        return encoded;", "        // TODO: Implement this function\n\
    \        return \"\";"]
stop_tokens:
- "\n    }\n"
