{
  "name": "mbpp_247_lps",
  "language": "lua",
  "prompt": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "    local len = #str\n    local table = {}\n    for i = 1, len do\n        table[i] = {}\n        for j = 1, len do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, len do\n        table[i][i] = 1\n    end\n    for l = 2, len do\n        for i = 1, len - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][len]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] and l == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "\tlocal n = #str\n\tlocal table = {}\n\tfor i = 1, n do\n\t\ttable[i] = {}\n\t\tfor j = 1, n do\n\t\t\ttable[i][j] = 0\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\ttable[i][i] = 1\n\tend\n\tfor l = 2, n do\n\t\tfor i = 1, n - l + 1 do\n\t\t\tlocal j = i + l - 1\n\t\t\tif str:sub(i, i) == str:sub(j, j) and l == 2 then\n\t\t\t\ttable[i][j] = 2\n\t\t\telseif str:sub(i, i) == str:sub(j, j) then\n\t\t\t\ttable[i][j] = table[i + 1][j - 1] + 2\n\t\t\telse\n\t\t\t\ttable[i][j] = math.max(table[i + 1][j], table[i][j - 1])\n\t\t\tend\n\t\tend\n\tend\n\treturn table[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend",
    "    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end"
  ]
}