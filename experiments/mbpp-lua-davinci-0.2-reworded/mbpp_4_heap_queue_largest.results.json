{
  "name": "mbpp_4_heap_queue_largest",
  "language": "lua",
  "prompt": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap:new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9d6iqd9.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp_9d6iqd9.lua:3: in function 'candidate'\n\t/tmp/tmp_9d6iqd9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor i = 1, n do\n\t\theap[i] = nums[i]\n\tend\n\theap_make(heap)\n\tfor i = n + 1, #nums do\n\t\tif nums[i] > heap[1] then\n\t\t\theap[1] = nums[i]\n\t\t\theap_sift_down(heap, 1)\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = heap_pop(heap)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa8rclb5w.lua:7: attempt to call global 'heap_make' (a nil value)\nstack traceback:\n\t/tmp/tmpa8rclb5w.lua:7: in function 'candidate'\n\t/tmp/tmpa8rclb5w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local size = 0\n    local function heap_push(x)\n        size = size + 1\n        heap[size] = x\n        local i = size\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[i], heap[p] = heap[p], heap[i]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n        heap[1] = heap[size]\n        heap[size] = nil\n        size = size - 1\n        local i = 1\n        while i * 2 <= size do\n            local l = i * 2\n            local r = i * 2 + 1\n            local j = l\n            if r <= size and heap[r] > heap[l] then\n                j = r\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for _, x in ipairs(nums) do\n        heap_push(x)\n        if size > n then\n            heap_pop()\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2h07b6e.lua:57: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmpa2h07b6e.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function heap_insert(heap, num)\n\t\ttable.insert(heap, num)\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i/2)\n\t\t\tif heap[j] < heap[i] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function heap_pop(heap)\n\t\tlocal ret = heap[1]\n\t\theap[1] = heap[#heap]\n\t\ttable.remove(heap, #heap)\n\t\tlocal i = 1\n\t\twhile i < #heap do\n\t\t\tlocal j = i*2\n\t\t\tif j < #heap and heap[j] < heap[j+1] then\n\t\t\t\tj = j+1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn ret\n\tend\n\tfor _, num in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\theap_insert(heap, num)\n\t\telseif num > heap[1] then\n\t\t\theap_pop(heap)\n\t\t\theap_insert(heap, num)\n\t\tend\n\tend\n\tlocal ret = {}\n\twhile #heap > 0 do\n\t\ttable.insert(ret, heap_pop(heap))\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusuguu51.lua:54: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpusuguu51.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, num in ipairs(nums) do\n        if i <= n then\n            heap[i] = num\n            heap_sift_up(heap, i)\n        else\n            if num > heap[1] then\n                heap[1] = num\n                heap_sift_down(heap, 1, n)\n            end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvcdj0z0q.lua:7: attempt to call global 'heap_sift_up' (a nil value)\nstack traceback:\n\t/tmp/tmpvcdj0z0q.lua:7: in function 'candidate'\n\t/tmp/tmpvcdj0z0q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local largest = {}\n  for i = 1, n do\n    largest[i] = heap_pop(heap)\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptnnr4x7b.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmptnnr4x7b.lua:5: in function 'candidate'\n\t/tmp/tmptnnr4x7b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\ttable.insert(heap, num)\n\t\t\theap_sift_up(heap, #heap)\n\t\telseif num > heap[1] then\n\t\t\theap[1] = num\n\t\t\theap_sift_down(heap, 1)\n\t\tend\n\tend\n\treturn heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkaucvpob.lua:7: attempt to call global 'heap_sift_up' (a nil value)\nstack traceback:\n\t/tmp/tmpkaucvpob.lua:7: in function 'candidate'\n\t/tmp/tmpkaucvpob.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\n  local function heap_insert(num)\n    heap_size = heap_size + 1\n    heap[heap_size] = num\n    local i = heap_size\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_remove()\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap[heap_size] = nil\n    heap_size = heap_size - 1\n    local i = 1\n    while i * 2 <= heap_size do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = i\n      if heap[left] > heap[largest] then\n        largest = left\n      end\n      if right <= heap_size and heap[right] > heap[largest] then\n        largest = right\n      end\n      if largest ~= i then\n        heap[i], heap[largest] = heap[largest], heap[i]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(num)\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_remove()\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe1f8hl2.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpxe1f8hl2.lua:5: in function 'candidate'\n\t/tmp/tmpxe1f8hl2.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            table.insert(heap, num)\n            heap_heapify_up(heap, #heap)\n        elseif num > heap[1] then\n            heap[1] = num\n            heap_heapify_down(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ivm0tgx.lua:7: attempt to call global 'heap_heapify_up' (a nil value)\nstack traceback:\n\t/tmp/tmp0ivm0tgx.lua:7: in function 'candidate'\n\t/tmp/tmp0ivm0tgx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, #nums do\n    heap[i] = nums[i]\n  end\n  heap_queue_heapify(heap)\n  for i = #nums, n + 1, -1 do\n    heap_queue_pop(heap)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_queue_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrr4ak33.lua:7: attempt to call global 'heap_queue_heapify' (a nil value)\nstack traceback:\n\t/tmp/tmpvrr4ak33.lua:7: in function 'candidate'\n\t/tmp/tmpvrr4ak33.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            end\n            if right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            end\n            if heap[i] < heap[left] or heap[i] < heap[right] then\n                if heap[left] > heap[right] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                    i = left\n                else\n                    heap[i], heap[right] = heap[right], heap[i]\n                    i = right\n                end\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5cntkic.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpb5cntkic.lua:5: in function 'candidate'\n\t/tmp/tmpb5cntkic.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i, num in ipairs(nums) do\n    heap[i] = num\n  end\n  heap_build_max(heap)\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_extract_max(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruh0o_jt.lua:7: attempt to call global 'heap_build_max' (a nil value)\nstack traceback:\n\t/tmp/tmpruh0o_jt.lua:7: in function 'candidate'\n\t/tmp/tmpruh0o_jt.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_e1tfu0v.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local heap_size = 0\n    local function heap_push(num)\n        heap_size = heap_size + 1\n        heap[heap_size] = num\n        local i = heap_size\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local child = i * 2\n            if child + 1 <= heap_size and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    heap[#heap + 1] = num\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i] < heap[left] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        if heap[left] > heap[right] then\n          if heap[i] < heap[left] then\n            heap[i], heap[left] = heap[left], heap[i]\n            i = left\n          else\n            break\n          end\n        else\n          if heap[i] < heap[right] then\n            heap[i], heap[right] = heap[right], heap[i]\n            i = right\n          else\n            break\n          end\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_pop(heap)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1xk2lpv.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpn1xk2lpv.lua:5: in local 'candidate'\n\t/tmp/tmpn1xk2lpv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, item)\n    heap[#heap + 1] = item\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local item = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local max = left\n      if right <= #heap and heap[right] > heap[left] then\n        max = right\n      end\n      if heap[max] > heap[i] then\n        heap[max], heap[i] = heap[i], heap[max]\n        i = max\n      else\n        break\n      end\n    end\n    return item\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for _ = 1, n do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps96h688c.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmps96h688c.lua:5: in local 'candidate'\n\t/tmp/tmps96h688c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\n  local function heap_insert(num)\n    heap_size = heap_size + 1\n    heap[heap_size] = num\n    local i = heap_size\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    while i * 2 <= heap_size do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = i\n      if heap[left] > heap[largest] then\n        largest = left\n      end\n      if right <= heap_size and heap[right] > heap[largest] then\n        largest = right\n      end\n      if largest ~= i then\n        heap[i], heap[largest] = heap[largest], heap[i]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(num)\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_pop()\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i] < heap[left] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        local max = heap[left] > heap[right] and left or right\n        if heap[i] < heap[max] then\n          heap[i], heap[max] = heap[max], heap[i]\n          i = max\n        else\n          break\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_pop(heap)\n      heap_insert(heap, num)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2l867pb.lua:62: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpy2l867pb.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_build_max_heap(heap)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_max_heapify(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tt1g1sz.lua:7: attempt to call a nil value (global 'heap_build_max_heap')\nstack traceback:\n\t/tmp/tmp1tt1g1sz.lua:7: in local 'candidate'\n\t/tmp/tmp1tt1g1sz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\ttable.insert(heap, num)\n\t\theap_sift_up(heap, #heap)\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\ttable.insert(result, heap_pop(heap))\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0_pqlpi.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpc0_pqlpi.lua:6: in local 'candidate'\n\t/tmp/tmpc0_pqlpi.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, #nums do\n        heap_push(heap, nums[i])\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        result[#result + 1] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbivp84e.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpxbivp84e.lua:5: in local 'candidate'\n\t/tmp/tmpxbivp84e.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[left] > heap[i] then\n                    heap[left], heap[i] = heap[i], heap[left]\n                end\n                break\n            else\n                if heap[left] > heap[right] then\n                    if heap[left] > heap[i] then\n                        heap[left], heap[i] = heap[i], heap[left]\n                        i = left\n                    else\n                        break\n                    end\n                else\n                    if heap[right] > heap[i] then\n                        heap[right], heap[i] = heap[i], heap[right]\n                        i = right\n                    else\n                        break\n                    end\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    while #heap > 0 do\n        table.insert(ret, 1, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4edalf27.lua:68: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmp4edalf27.lua:68: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, v in ipairs(nums) do\n    heap_push(heap, v)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpta1jaz22.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpta1jaz22.lua:5: in local 'candidate'\n\t/tmp/tmpta1jaz22.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_replace(heap, num)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_extract(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelqo26qp.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpelqo26qp.lua:6: in local 'candidate'\n\t/tmp/tmpelqo26qp.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local heap_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgvpg51mb.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1xk2lpv.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpn1xk2lpv.lua:5: in local 'candidate'\n\t/tmp/tmpn1xk2lpv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    heap[#heap + 1] = num\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i] < heap[left] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        if heap[left] > heap[right] then\n          if heap[i] < heap[left] then\n            heap[i], heap[left] = heap[left], heap[i]\n            i = left\n          else\n            break\n          end\n        else\n          if heap[i] < heap[right] then\n            heap[i], heap[right] = heap[right], heap[i]\n            i = right\n          else\n            break\n          end\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local ret = {}\n  for _ = 1, n do\n    ret[#ret + 1] = heap_pop(heap)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        table.insert(heap, num)\n        heap_up(heap, #heap)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap[1]\n        heap[1] = heap[#heap]\n        heap_down(heap, 1, #heap - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphret7dfq.lua:6: attempt to call a nil value (global 'heap_up')\nstack traceback:\n\t/tmp/tmphret7dfq.lua:6: in local 'candidate'\n\t/tmp/tmphret7dfq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59bnlvxr.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp59bnlvxr.lua:3: in local 'candidate'\n\t/tmp/tmp59bnlvxr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for _ = 1, n do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps96h688c.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmps96h688c.lua:5: in local 'candidate'\n\t/tmp/tmps96h688c.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_extract_max(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywty6b_f.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpywty6b_f.lua:5: in local 'candidate'\n\t/tmp/tmpywty6b_f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local j = i * 2\n      if j < #heap and heap[j] < heap[j + 1] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, #nums do\n    if i <= n then\n      heap_push(heap, nums[i])\n    else\n      if nums[i] > heap[1] then\n        heap_pop(heap)\n        heap_push(heap, nums[i])\n      end\n    end\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp605hy8qc.lua:56: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmp605hy8qc.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[max] > heap[i] then\n                heap[max], heap[i] = heap[i], heap[max]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5ciuasc.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpq5ciuasc.lua:6: in local 'candidate'\n\t/tmp/tmpq5ciuasc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkz9r9gk2.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpkz9r9gk2.lua:5: in local 'candidate'\n\t/tmp/tmpkz9r9gk2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = left\n      if right <= #heap and heap[right] > heap[left] then\n        largest = right\n      end\n      if heap[i] < heap[largest] then\n        heap[i], heap[largest] = heap[largest], heap[i]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heapify(heap, n)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heapify(heap, n, 1)\n    end\n  end\n  local res = {}\n  for i = 1, n do\n    res[i] = heap[1]\n    heap[1] = heap[n - i + 1]\n    heapify(heap, n - i, 1)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyh8n4b_.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmpgyh8n4b_.lua:7: in local 'candidate'\n\t/tmp/tmpgyh8n4b_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = Heap.new(function(a, b) return a > b end)\n\tfor _, num in ipairs(nums) do\n\t\theap:push(num)\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnd60tipn.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpnd60tipn.lua:3: in local 'candidate'\n\t/tmp/tmpnd60tipn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function push(x)\n    local i = #heap + 1\n    heap[i] = x\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function pop()\n    local x = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for i = 1, n do\n    push(nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      pop()\n      push(nums[i])\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizrphvqs.lua:55: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpizrphvqs.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    heap[#heap + 1] = num\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = i\n      if left <= #heap and heap[left] > heap[largest] then\n        largest = left\n      end\n      if right <= #heap and heap[right] > heap[largest] then\n        largest = right\n      end\n      if largest ~= i then\n        heap[largest], heap[i] = heap[i], heap[largest]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_pop(heap)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dc30yeh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3dc30yeh.lua:3: in local 'candidate'\n\t/tmp/tmp3dc30yeh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, #nums do\n        heap_insert(heap, nums[i])\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31qtjypk.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp31qtjypk.lua:5: in local 'candidate'\n\t/tmp/tmp31qtjypk.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    local last = table.remove(heap)\n    if #heap > 0 then\n      heap[1] = last\n      local i = 1\n      while i * 2 <= #heap do\n        local j = i * 2\n        if j + 1 <= #heap and heap[j + 1] > heap[j] then\n          j = j + 1\n        end\n        if heap[i] < heap[j] then\n          heap[i], heap[j] = heap[j], heap[i]\n          i = j\n        else\n          break\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_queue_build(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_queue_heapify(heap, 1, n)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap[1]\n        heap[1] = heap[n]\n        n = n - 1\n        heap_queue_heapify(heap, 1, n)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_t4qxmv.lua:7: attempt to call a nil value (global 'heap_queue_build')\nstack traceback:\n\t/tmp/tmp4_t4qxmv.lua:7: in local 'candidate'\n\t/tmp/tmp4_t4qxmv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_queue_heapify(heap, n)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_queue_sift_down(heap, 1, n)\n    end\n  end\n  heap_queue_sort(heap, n)\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfs0unax.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmppfs0unax.lua:7: in local 'candidate'\n\t/tmp/tmppfs0unax.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap, #heap)\n    local i = 1\n    while i < #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left > #heap then\n        break\n      elseif right > #heap then\n        if heap[i] < heap[left] then\n          heap[i], heap[left] = heap[left], heap[i]\n        end\n        break\n      else\n        local max = heap[left]\n        local max_i = left\n        if heap[right] > max then\n          max = heap[right]\n          max_i = right\n        end\n        if heap[i] < max then\n          heap[i], heap[max_i] = heap[max_i], heap[i]\n          i = max_i\n        else\n          break\n        end\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, val)\n    heap[#heap + 1] = val\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[i] > heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local val = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[j] > heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return val\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_pop(heap)\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent > 0 and heap[parent] < heap[i] then\n      heap[parent], heap[i] = heap[i], heap[parent]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left = i * 2\n    local right = i * 2 + 1\n    local largest = i\n    if left <= #heap and heap[left] > heap[largest] then\n      largest = left\n    end\n    if right <= #heap and heap[right] > heap[largest] then\n      largest = right\n    end\n    if largest ~= i then\n      heap[i], heap[largest] = heap[largest], heap[i]\n      sift_down(largest)\n    end\n  end\n  local function insert(num)\n    heap[#heap + 1] = num\n    sift_up(#heap)\n  end\n  local function extract()\n    local max = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    sift_down(1)\n    return max\n  end\n  for _, num in ipairs(nums) do\n    insert(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = extract()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_build_max(heap)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_max_heapify(heap, 1)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_extract_max(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1imeuqu.lua:7: attempt to call a nil value (global 'heap_build_max')\nstack traceback:\n\t/tmp/tmpr1imeuqu.lua:7: in local 'candidate'\n\t/tmp/tmpr1imeuqu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function heap_push(heap, num)\n\t\ttable.insert(heap, num)\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i / 2)\n\t\t\tif heap[j] < heap[i] then\n\t\t\t\theap[j], heap[i] = heap[i], heap[j]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function heap_pop(heap)\n\t\tlocal num = heap[1]\n\t\theap[1] = heap[#heap]\n\t\theap[#heap] = nil\n\t\tlocal i = 1\n\t\twhile i * 2 <= #heap do\n\t\t\tlocal j = i * 2\n\t\t\tif j < #heap and heap[j] < heap[j + 1] then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn num\n\tend\n\tfor _, num in ipairs(nums) do\n\t\theap_push(heap, num)\n\t\tif #heap > n then\n\t\t\theap_pop(heap)\n\t\tend\n\tend\n\tlocal result = {}\n\twhile #heap > 0 do\n\t\ttable.insert(result, 1, heap_pop(heap))\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf2dul92.lua:52: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpjf2dul92.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        table.insert(heap, num)\n        if #heap > n then\n            table.remove(heap, 1)\n        end\n        heap_sift_down(heap, 1, #heap)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp946a1iw2.lua:9: attempt to call a nil value (global 'heap_sift_down')\nstack traceback:\n\t/tmp/tmp946a1iw2.lua:9: in local 'candidate'\n\t/tmp/tmp946a1iw2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local c = i * 2\n            if c + 1 <= #heap and heap[c + 1] > heap[c] then\n                c = c + 1\n            end\n            if heap[i] < heap[c] then\n                heap[i], heap[c] = heap[c], heap[i]\n                i = c\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, n do\n        heap_push(heap, nums[i])\n    end\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap_pop(heap)\n            heap_push(heap, nums[i])\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukk59z_f.lua:55: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpukk59z_f.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = Heap()\n\tfor _, num in ipairs(nums) do\n\t\theap:push(num)\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = heap:pop()\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0zk3tar.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpz0zk3tar.lua:3: in local 'candidate'\n\t/tmp/tmpz0zk3tar.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local size = 0\n    local function heap_push(num)\n        size = size + 1\n        heap[size] = num\n        local i = size\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local num = heap[1]\n        heap[1] = heap[size]\n        heap[size] = nil\n        size = size - 1\n        local i = 1\n        while i * 2 <= size do\n            local child = i * 2\n            if child + 1 <= size and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return num\n    end\n    for _, num in ipairs(nums) do\n        heap_push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, value)\n        table.insert(heap, value)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local value = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = left + 1\n            local largest = i\n            if left <= #heap and heap[left] > heap[largest] then\n                largest = left\n            end\n            if right <= #heap and heap[right] > heap[largest] then\n                largest = right\n            end\n            if largest ~= i then\n                heap[largest], heap[i] = heap[i], heap[largest]\n                i = largest\n            else\n                break\n            end\n        end\n        return value\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, 1, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg89nj38v.lua:57: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpg89nj38v.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        table.insert(heap, num)\n        heap_sift_up(heap, #heap)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5y5kny5i.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmp5y5kny5i.lua:6: in local 'candidate'\n\t/tmp/tmp5y5kny5i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {nums[1]}\n  for i = 2, #nums do\n    heap_insert(heap, nums[i])\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojmlkowd.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpojmlkowd.lua:5: in local 'candidate'\n\t/tmp/tmpojmlkowd.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new(function(a, b) return a > b end)\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10yxg19b.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp10yxg19b.lua:3: in local 'candidate'\n\t/tmp/tmp10yxg19b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\ttable.insert(heap, num)\n\t\theap_sift_up(heap, #heap)\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tlocal num = table.remove(heap, 1)\n\t\ttable.insert(result, num)\n\t\theap_sift_down(heap, 1)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpto2ugl2v.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpto2ugl2v.lua:6: in local 'candidate'\n\t/tmp/tmpto2ugl2v.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, num in ipairs(nums) do\n        if #heap < n then\n            heap[#heap + 1] = num\n            heap_sift_up(heap, #heap)\n        elseif num > heap[1] then\n            heap[1] = num\n            heap_sift_down(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjk_pakq.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpnjk_pakq.lua:7: in local 'candidate'\n\t/tmp/tmpnjk_pakq.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_g_vdg1x.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp_g_vdg1x.lua:5: in local 'candidate'\n\t/tmp/tmp_g_vdg1x.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1xk2lpv.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpn1xk2lpv.lua:5: in local 'candidate'\n\t/tmp/tmpn1xk2lpv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_queue_heapify(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap_queue_replace(heap, n, nums[i])\n        end\n    end\n    return heap_queue_sort(heap, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnfoethxm.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmpnfoethxm.lua:7: in local 'candidate'\n\t/tmp/tmpnfoethxm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2neavpfb.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp2neavpfb.lua:5: in local 'candidate'\n\t/tmp/tmp2neavpfb.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[i] < heap[max] then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5cntkic.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpb5cntkic.lua:5: in function 'candidate'\n\t/tmp/tmpb5cntkic.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\n  local function heap_push(val)\n    heap_size = heap_size + 1\n    heap[heap_size] = val\n    local i = heap_size\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[parent] < heap[i] then\n        heap[parent], heap[i] = heap[i], heap[parent]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    if heap_size == 0 then\n      return nil\n    end\n    local val = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    while i <= heap_size do\n      local left = i * 2\n      local right = i * 2 + 1\n      if left <= heap_size and heap[left] > heap[i] then\n        if right <= heap_size and heap[right] > heap[left] then\n          heap[right], heap[i] = heap[i], heap[right]\n          i = right\n        else\n          heap[left], heap[i] = heap[i], heap[left]\n          i = left\n        end\n      elseif right <= heap_size and heap[right] > heap[i] then\n        heap[right], heap[i] = heap[i], heap[right]\n        i = right\n      else\n        break\n      end\n    end\n    return val\n  end\n  for _, num in ipairs(nums) do\n    heap_push(num)\n  end\n  local result = {}\n  for _ = 1, n do\n    local val = heap_pop()\n    if val == nil then\n      break\n    end\n    table.insert(result, val)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_replace(heap, num)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvyltjqs.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpgvyltjqs.lua:6: in local 'candidate'\n\t/tmp/tmpgvyltjqs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dc30yeh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3dc30yeh.lua:3: in local 'candidate'\n\t/tmp/tmp3dc30yeh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(n)\n    table.insert(heap, n)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local n = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[j] > heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return n\n  end\n  for _, n in ipairs(nums) do\n    heap_insert(n)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop())\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3qcbda0.lua:27: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpk3qcbda0.lua:27: in local 'heap_pop'\n\t/tmp/tmpk3qcbda0.lua:41: in local 'candidate'\n\t/tmp/tmpk3qcbda0.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_queue_heapify(heap, n)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_queue_sift_down(heap, 1, n)\n    end\n  end\n  heap_queue_sort(heap, n)\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfs0unax.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmppfs0unax.lua:7: in local 'candidate'\n\t/tmp/tmppfs0unax.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap(nums, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv34ahosz.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpv34ahosz.lua:3: in local 'candidate'\n\t/tmp/tmpv34ahosz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_queue_heapify(heap)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_queue_sift_down(heap, 1)\n    end\n  end\n  for i = n, 1, -1 do\n    heap[1], heap[i] = heap[i], heap[1]\n    heap_queue_sift_down(heap, 1, i - 1)\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqbtn8qx.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmpsqbtn8qx.lua:7: in local 'candidate'\n\t/tmp/tmpsqbtn8qx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_e1tfu0v.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_e1tfu0v.lua:14: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap:new(function(a, b) return a > b end)\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeosvcjwh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpeosvcjwh.lua:3: in local 'candidate'\n\t/tmp/tmpeosvcjwh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            table.insert(heap, num)\n            heap_sift_up(heap)\n        elseif heap[1] < num then\n            heap[1] = num\n            heap_sift_down(heap)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprud9zwyd.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmprud9zwyd.lua:7: in local 'candidate'\n\t/tmp/tmprud9zwyd.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        local i = #heap + 1\n        heap[i] = num\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local largest = i\n            if left <= #heap and heap[left] > heap[largest] then\n                largest = left\n            end\n            if right <= #heap and heap[right] > heap[largest] then\n                largest = right\n            end\n            if largest ~= i then\n                heap[largest], heap[i] = heap[i], heap[largest]\n                i = largest\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        local i = #heap + 1\n        heap[i] = num\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local n = #heap\n        local result = heap[1]\n        heap[1] = heap[n]\n        heap[n] = nil\n        local i = 1\n        while i < n do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = i\n            if left <= n and heap[left] > heap[max] then\n                max = left\n            end\n            if right <= n and heap[right] > heap[max] then\n                max = right\n            end\n            if max ~= i then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return result\n    end\n    for i = 1, n do\n        heap_insert(heap, nums[i])\n    end\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap_pop(heap)\n            heap_insert(heap, nums[i])\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1_snhnc.lua:30: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn1_snhnc.lua:30: in local 'heap_pop'\n\t/tmp/tmpn1_snhnc.lua:47: in local 'candidate'\n\t/tmp/tmpn1_snhnc.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, 1, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvc4mcbr.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpgvc4mcbr.lua:5: in local 'candidate'\n\t/tmp/tmpgvc4mcbr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor i, v in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\ttable.insert(heap, v)\n\t\t\theap_sift_up(heap, #heap)\n\t\telseif v > heap[1] then\n\t\t\theap[1] = v\n\t\t\theap_sift_down(heap, 1, #heap)\n\t\tend\n\tend\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\ttable.insert(ret, heap[1])\n\t\theap[1] = heap[#heap]\n\t\ttable.remove(heap)\n\t\theap_sift_down(heap, 1, #heap)\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxhbwfvs.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpbxhbwfvs.lua:7: in local 'candidate'\n\t/tmp/tmpbxhbwfvs.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    table.insert(heap, num)\n    heap_sift_up(heap, #heap)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw4ldqle.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpaw4ldqle.lua:6: in local 'candidate'\n\t/tmp/tmpaw4ldqle.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heapify(heap)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heapify(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw74ekkl4.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmpw74ekkl4.lua:7: in local 'candidate'\n\t/tmp/tmpw74ekkl4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bo0drmt.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp6bo0drmt.lua:5: in local 'candidate'\n\t/tmp/tmp6bo0drmt.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5cntkic.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpb5cntkic.lua:5: in function 'candidate'\n\t/tmp/tmpb5cntkic.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heapify(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heapify(heap, n, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe8mfe05.lua:7: attempt to call a nil value (global 'heapify')\nstack traceback:\n\t/tmp/tmpbe8mfe05.lua:7: in local 'candidate'\n\t/tmp/tmpbe8mfe05.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local largest = {}\n  for i = 1, n do\n    largest[i] = heap_pop(heap)\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn56pmown.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpn56pmown.lua:5: in local 'candidate'\n\t/tmp/tmpn56pmown.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e0dtbvq.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp0e0dtbvq.lua:5: in local 'candidate'\n\t/tmp/tmp0e0dtbvq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local heap_size = 0\n    local function heap_push(num)\n        heap_size = heap_size + 1\n        heap[heap_size] = num\n        local i = heap_size\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local ret = heap[1]\n        heap[1] = heap[heap_size]\n        heap[heap_size] = nil\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local child = i * 2\n            if child + 1 <= heap_size and heap[child + 1] > heap[child] then\n                child = child + 1\n            end\n            if heap[i] < heap[child] then\n                heap[i], heap[child] = heap[child], heap[i]\n                i = child\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, #nums do\n        if heap_size < n then\n            heap_push(nums[i])\n        elseif nums[i] > heap[1] then\n            heap_pop()\n            heap_push(nums[i])\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop()\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsieoybn7.lua:57: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpsieoybn7.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi6y3eid4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpi6y3eid4.lua:5: in local 'candidate'\n\t/tmp/tmpi6y3eid4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, num in ipairs(nums) do\n        heap[i] = num\n    end\n    heap_queue_heapify(heap)\n    for i = #heap, #heap - n + 1, -1 do\n        heap_queue_pop(heap)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_queue_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkn8g1oik.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmpkn8g1oik.lua:7: in local 'candidate'\n\t/tmp/tmpkn8g1oik.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function push(x)\n\t\theap[#heap+1] = x\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i/2)\n\t\t\tif heap[j] < heap[i] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function pop()\n\t\tlocal ret = heap[1]\n\t\theap[1] = heap[#heap]\n\t\theap[#heap] = nil\n\t\tlocal i = 1\n\t\twhile i < #heap do\n\t\t\tlocal j = i*2\n\t\t\tif j < #heap and heap[j] < heap[j+1] then\n\t\t\t\tj = j+1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn ret\n\tend\n\tfor i = 1, n do\n\t\tpush(nums[i])\n\tend\n\tfor i = n+1, #nums do\n\t\tif nums[i] > heap[1] then\n\t\t\tpop()\n\t\t\tpush(nums[i])\n\t\tend\n\tend\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\tret[i] = pop()\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwmjodtf.lua:55: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpqwmjodtf.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local res = {}\n    while #heap > 0 do\n        table.insert(res, heap_pop(heap))\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4icj7ive.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp4icj7ive.lua:5: in local 'candidate'\n\t/tmp/tmp4icj7ive.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, 1, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz1nojye.lua:52: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpfz1nojye.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzme7tifn.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmpzme7tifn.lua:5: in function 'candidate'\n\t/tmp/tmpzme7tifn.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap()\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap:pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4h9izlzw.lua:3: attempt to call a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp4h9izlzw.lua:3: in local 'candidate'\n\t/tmp/tmp4h9izlzw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, #nums do\n        heap_insert(heap, nums[i])\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_extract_max(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq3eu73e.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpbq3eu73e.lua:5: in local 'candidate'\n\t/tmp/tmpbq3eu73e.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeoyynvz4.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpeoyynvz4.lua:6: in local 'candidate'\n\t/tmp/tmpeoyynvz4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function sift_up(i)\n        local parent = math.floor(i / 2)\n        if parent > 0 and heap[i] > heap[parent] then\n            heap[i], heap[parent] = heap[parent], heap[i]\n            sift_up(parent)\n        end\n    end\n    local function sift_down(i)\n        local left = i * 2\n        local right = i * 2 + 1\n        local largest = i\n        if left <= #heap and heap[left] > heap[largest] then\n            largest = left\n        end\n        if right <= #heap and heap[right] > heap[largest] then\n            largest = right\n        end\n        if largest ~= i then\n            heap[i], heap[largest] = heap[largest], heap[i]\n            sift_down(largest)\n        end\n    end\n    for _, num in ipairs(nums) do\n        heap[#heap + 1] = num\n        sift_up(#heap)\n    end\n    for i = #heap, #heap - n + 1, -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        sift_down(1)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyodzb93.lua:40: expected: {85, 75, 65}\nactual: {58, 35, 25, 85, 14, 22, 65, 75, 22}\nstack traceback:\n\t/tmp/tmplyodzb93.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap:new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9d6iqd9.lua:3: attempt to index global 'Heap' (a nil value)\nstack traceback:\n\t/tmp/tmp_9d6iqd9.lua:3: in function 'candidate'\n\t/tmp/tmp_9d6iqd9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    return heap_sort(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe1f8hl2.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpxe1f8hl2.lua:5: in function 'candidate'\n\t/tmp/tmpxe1f8hl2.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, v in ipairs(nums) do\n        if #heap < n then\n            table.insert(heap, v)\n            heap_sift_up(heap, #heap)\n        elseif v > heap[1] then\n            heap[1] = v\n            heap_sift_down(heap, 1, #heap)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpie4k85fg.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpie4k85fg.lua:7: in local 'candidate'\n\t/tmp/tmpie4k85fg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, num)\n        elseif num > heap[1] then\n            heap_replace(heap, num)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5ciuasc.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpq5ciuasc.lua:6: in local 'candidate'\n\t/tmp/tmpq5ciuasc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, val)\n    table.insert(heap, val)\n    local i = #heap\n    while i > 1 do\n      local parent = math.floor(i / 2)\n      if heap[i] > heap[parent] then\n        heap[i], heap[parent] = heap[parent], heap[i]\n        i = parent\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local left = i * 2\n      local right = i * 2 + 1\n      local largest = left\n      if right <= #heap and heap[right] > heap[left] then\n        largest = right\n      end\n      if heap[i] < heap[largest] then\n        heap[i], heap[largest] = heap[largest], heap[i]\n        i = largest\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local hq = HeapQueue.new(n)\n  for _, num in ipairs(nums) do\n    hq:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = hq:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx33tk_wg.lua:3: attempt to index a nil value (global 'HeapQueue')\nstack traceback:\n\t/tmp/tmpx33tk_wg.lua:3: in local 'candidate'\n\t/tmp/tmpx33tk_wg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent < 1 then return end\n    if heap[parent] < heap[i] then\n      heap[parent], heap[i] = heap[i], heap[parent]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left, right = i * 2, i * 2 + 1\n    if right <= #heap then\n      if heap[left] > heap[right] then\n        if heap[left] > heap[i] then\n          heap[left], heap[i] = heap[i], heap[left]\n          sift_down(left)\n        end\n      else\n        if heap[right] > heap[i] then\n          heap[right], heap[i] = heap[i], heap[right]\n          sift_down(right)\n        end\n      end\n    elseif left <= #heap and heap[left] > heap[i] then\n      heap[left], heap[i] = heap[i], heap[left]\n      sift_down(left)\n    end\n  end\n  for i = 1, n do\n    heap[i] = nums[i]\n    sift_up(i)\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      sift_down(1)\n    end\n  end\n  for i = #heap, 2, -1 do\n    heap[1], heap[i] = heap[i], heap[1]\n    sift_down(1)\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggjjm0ua.lua:51: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpggjjm0ua.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv6cbte6.lua:5: attempt to call global 'heap_insert' (a nil value)\nstack traceback:\n\t/tmp/tmpnv6cbte6.lua:5: in function 'candidate'\n\t/tmp/tmpnv6cbte6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        else\n            if num > heap[1] then\n                heap_replace(heap, num)\n            end\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6u6dso7.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpk6u6dso7.lua:6: in local 'candidate'\n\t/tmp/tmpk6u6dso7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            table.insert(heap, num)\n            heap_sift_up(heap, #heap)\n        elseif num > heap[1] then\n            heap[1] = num\n            heap_sift_down(heap, 1, #heap)\n        end\n    end\n    local result = {}\n    for i = #heap, 1, -1 do\n        table.insert(result, heap[1])\n        heap[1] = heap[i]\n        heap_sift_down(heap, 1, i - 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05scx4u7.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmp05scx4u7.lua:7: in local 'candidate'\n\t/tmp/tmp05scx4u7.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[i] > heap[parent] then\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = left\n            if right <= #heap and heap[right] > heap[left] then\n                max = right\n            end\n            if heap[i] < heap[max] then\n                heap[i], heap[max] = heap[max], heap[i]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_insert(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            local max = i\n            if left <= #heap and heap[left] > heap[max] then\n                max = left\n            end\n            if right <= #heap and heap[right] > heap[max] then\n                max = right\n            end\n            if max ~= i then\n                heap[max], heap[i] = heap[i], heap[max]\n                i = max\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53d_4mao.lua:57: expected: {85, 75, 65}\nactual: {22, 22, 14}\nstack traceback:\n\t/tmp/tmp53d_4mao.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_remove(heap)\n    end\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_remove(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5eq0aljd.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp5eq0aljd.lua:5: in local 'candidate'\n\t/tmp/tmp5eq0aljd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_queue_heapify(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_queue_sift_down(heap, 1, n)\n        end\n    end\n    for i = n, 2, -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        heap_queue_sift_down(heap, 1, i - 1)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_m_v92fo.lua:7: attempt to call a nil value (global 'heap_queue_heapify')\nstack traceback:\n\t/tmp/tmp_m_v92fo.lua:7: in local 'candidate'\n\t/tmp/tmp_m_v92fo.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function sift_up(i)\n    local parent = math.floor(i / 2)\n    if parent > 0 and heap[i] > heap[parent] then\n      heap[i], heap[parent] = heap[parent], heap[i]\n      sift_up(parent)\n    end\n  end\n  local function sift_down(i)\n    local left = i * 2\n    local right = left + 1\n    local largest = i\n    if left <= #heap and heap[left] > heap[largest] then\n      largest = left\n    end\n    if right <= #heap and heap[right] > heap[largest] then\n      largest = right\n    end\n    if largest ~= i then\n      heap[i], heap[largest] = heap[largest], heap[i]\n      sift_down(largest)\n    end\n  end\n  for _, num in ipairs(nums) do\n    table.insert(heap, num)\n    sift_up(#heap)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap[1]\n    heap[1] = heap[#heap]\n    table.remove(heap)\n    sift_down(1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_extract_max(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpywty6b_f.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpywty6b_f.lua:5: in local 'candidate'\n\t/tmp/tmpywty6b_f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dc30yeh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3dc30yeh.lua:3: in local 'candidate'\n\t/tmp/tmp3dc30yeh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14qswm2d.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp14qswm2d.lua:5: in local 'candidate'\n\t/tmp/tmp14qswm2d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bo0drmt.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp6bo0drmt.lua:5: in local 'candidate'\n\t/tmp/tmp6bo0drmt.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_queue_build(heap)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap_queue_replace(heap, nums[i])\n        end\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_queue_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg0wlbfe.lua:7: attempt to call a nil value (global 'heap_queue_build')\nstack traceback:\n\t/tmp/tmpyg0wlbfe.lua:7: in local 'candidate'\n\t/tmp/tmpyg0wlbfe.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        if #heap < n then\n            heap_insert(heap, num)\n        else\n            if num > heap[1] then\n                heap_replace(heap, num)\n            end\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclft141v.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpclft141v.lua:6: in local 'candidate'\n\t/tmp/tmpclft141v.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      heap_insert(heap, num)\n    elseif num > heap[1] then\n      heap_replace(heap, num)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpks66oe71.lua:6: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpks66oe71.lua:6: in local 'candidate'\n\t/tmp/tmpks66oe71.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0e0dtbvq.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp0e0dtbvq.lua:5: in local 'candidate'\n\t/tmp/tmp0e0dtbvq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    result[#result + 1] = heap_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bo0drmt.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp6bo0drmt.lua:5: in local 'candidate'\n\t/tmp/tmp6bo0drmt.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    if #heap < n then\n      table.insert(heap, num)\n      heap_sift_up(heap, #heap)\n    elseif num > heap[1] then\n      heap[1] = num\n      heap_sift_down(heap, 1)\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1y68nxov.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmp1y68nxov.lua:7: in local 'candidate'\n\t/tmp/tmp1y68nxov.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    table.insert(heap, num)\n    heap_sift_up(heap, #heap)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm8iyfm_5.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function push(num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap, #heap)\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = i * 2 + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                if heap[left] > heap[right] then\n                    if heap[i] < heap[left] then\n                        heap[i], heap[left] = heap[left], heap[i]\n                        i = left\n                    else\n                        break\n                    end\n                else\n                    if heap[i] < heap[right] then\n                        heap[i], heap[right] = heap[right], heap[i]\n                        i = right\n                    else\n                        break\n                    end\n                end\n            end\n        end\n        return ret\n    end\n    for i = 1, #nums do\n        push(nums[i])\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, pop())\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\ttable.insert(heap, num)\n\t\theap_sift_up(heap, #heap)\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tresult[i] = heap_pop(heap)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppad1dv91.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmppad1dv91.lua:6: in local 'candidate'\n\t/tmp/tmppad1dv91.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_queue_push(heap, num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap_queue_pop(heap)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslhowhca.lua:5: attempt to call a nil value (global 'heap_queue_push')\nstack traceback:\n\t/tmp/tmpslhowhca.lua:5: in local 'candidate'\n\t/tmp/tmpslhowhca.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    result[i] = heap:pop()\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3dc30yeh.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp3dc30yeh.lua:3: in local 'candidate'\n\t/tmp/tmp3dc30yeh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function heap_insert(v)\n\t\ttable.insert(heap, v)\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i / 2)\n\t\t\tif heap[j] < heap[i] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function heap_pop()\n\t\tlocal v = heap[1]\n\t\theap[1] = heap[#heap]\n\t\ttable.remove(heap)\n\t\tlocal i = 1\n\t\twhile i < #heap do\n\t\t\tlocal j = i * 2\n\t\t\tif j + 1 <= #heap and heap[j + 1] > heap[j] then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn v\n\tend\n\tfor i = 1, #nums do\n\t\tif i <= n then\n\t\t\theap_insert(nums[i])\n\t\telseif nums[i] > heap[1] then\n\t\t\theap_pop()\n\t\t\theap_insert(nums[i])\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\ttable.insert(result, 1, heap_pop())\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvy8supfy.lua:54: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpvy8supfy.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local res = {}\n    while #heap > 0 do\n        table.insert(res, heap_pop(heap))\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4icj7ive.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmp4icj7ive.lua:5: in local 'candidate'\n\t/tmp/tmp4icj7ive.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_make(heap)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_sift_down(heap, 1)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjo0bw5tq.lua:7: attempt to call a nil value (global 'heap_make')\nstack traceback:\n\t/tmp/tmpjo0bw5tq.lua:7: in local 'candidate'\n\t/tmp/tmpjo0bw5tq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap.new(function(a, b) return a > b end)\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp59bnlvxr.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp59bnlvxr.lua:3: in local 'candidate'\n\t/tmp/tmp59bnlvxr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplf8x43x6.lua:5: attempt to call global 'heap_push' (a nil value)\nstack traceback:\n\t/tmp/tmplf8x43x6.lua:5: in function 'candidate'\n\t/tmp/tmplf8x43x6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor i, num in ipairs(nums) do\n\t\tif i <= n then\n\t\t\theap[i] = num\n\t\telse\n\t\t\tif num > heap[1] then\n\t\t\t\theap[1] = num\n\t\t\tend\n\t\tend\n\t\tif i > 1 then\n\t\t\theap_sift_down(heap, 1, i)\n\t\tend\n\tend\n\tfor i = n, 2, -1 do\n\t\theap_swap(heap, 1, i)\n\t\theap_sift_down(heap, 1, i - 1)\n\tend\n\treturn heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl33l03ft.lua:13: attempt to call a nil value (global 'heap_sift_down')\nstack traceback:\n\t/tmp/tmpl33l03ft.lua:13: in local 'candidate'\n\t/tmp/tmpl33l03ft.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n  end\n  local ret = {}\n  for i = 1, n do\n    table.insert(ret, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjyazr9y.lua:5: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpsjyazr9y.lua:5: in local 'candidate'\n\t/tmp/tmpsjyazr9y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tlocal function heap_push(heap, num)\n\t\ttable.insert(heap, num)\n\t\tlocal i = #heap\n\t\twhile i > 1 do\n\t\t\tlocal j = math.floor(i / 2)\n\t\t\tif heap[j] < heap[i] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function heap_pop(heap)\n\t\tlocal ret = heap[1]\n\t\tlocal i = 1\n\t\twhile i * 2 <= #heap do\n\t\t\tlocal j = i * 2\n\t\t\tif j + 1 <= #heap and heap[j + 1] > heap[j] then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tif heap[i] < heap[j] then\n\t\t\t\theap[i], heap[j] = heap[j], heap[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\ttable.remove(heap)\n\t\treturn ret\n\tend\n\tfor _, num in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\theap_push(heap, num)\n\t\telseif num > heap[1] then\n\t\t\theap_pop(heap)\n\t\t\theap_push(heap, num)\n\t\tend\n\tend\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\ttable.insert(ret, heap_pop(heap))\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jvj1naj.lua:53: expected: {85, 75, 65}\nactual: {85, 85, 85}\nstack traceback:\n\t/tmp/tmp1jvj1naj.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(v)\n    table.insert(heap, v)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local v = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return v\n  end\n  for _, v in ipairs(nums) do\n    heap_insert(v)\n  end\n  local res = {}\n  for i = 1, n do\n    table.insert(res, heap_pop())\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new(nums, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdavgn1x_.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpdavgn1x_.lua:3: in local 'candidate'\n\t/tmp/tmpdavgn1x_.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_insert(n)\n    table.insert(heap, n)\n    local i = #heap\n    while i > 1 do\n      local p = math.floor(i / 2)\n      if heap[p] < heap[i] then\n        heap[p], heap[i] = heap[i], heap[p]\n        i = p\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local r = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i < #heap do\n      local l, r = i * 2, i * 2 + 1\n      if l > #heap then\n        break\n      elseif r > #heap then\n        if heap[i] < heap[l] then\n          heap[i], heap[l] = heap[l], heap[i]\n        end\n        break\n      else\n        if heap[l] > heap[r] then\n          if heap[i] < heap[l] then\n            heap[i], heap[l] = heap[l], heap[i]\n            i = l\n          else\n            break\n          end\n        else\n          if heap[i] < heap[r] then\n            heap[i], heap[r] = heap[r], heap[i]\n            i = r\n          else\n            break\n          end\n        end\n      end\n    end\n    return r\n  end\n  for i = 1, #nums do\n    if i <= n then\n      heap_insert(nums[i])\n    else\n      if nums[i] > heap[1] then\n        heap_pop()\n        heap_insert(nums[i])\n      end\n    end\n  end\n  local r = {}\n  while #heap > 0 do\n    table.insert(r, 1, heap_pop())\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm_9_80m.lua:71: expected: {85, 75, 65}\nactual: {22, 25, 85}\nstack traceback:\n\t/tmp/tmpsm_9_80m.lua:71: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i, v in ipairs(nums) do\n        if #heap < n then\n            heap_push(heap, v)\n        elseif v > heap[1] then\n            heap_replace(heap, v)\n        end\n    end\n    local result = {}\n    for i = 1, n do\n        result[i] = heap_pop(heap)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprw1c1rd.lua:6: attempt to call a nil value (global 'heap_push')\nstack traceback:\n\t/tmp/tmpprw1c1rd.lua:6: in local 'candidate'\n\t/tmp/tmpprw1c1rd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for i = 1, n do\n        heap[i] = nums[i]\n    end\n    heap_build(heap, n)\n    for i = n + 1, #nums do\n        if nums[i] > heap[1] then\n            heap[1] = nums[i]\n            heap_sift_down(heap, 1, n)\n        end\n    end\n    heap_sort(heap, n)\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5c3k80c5.lua:7: attempt to call a nil value (global 'heap_build')\nstack traceback:\n\t/tmp/tmp5c3k80c5.lua:7: in local 'candidate'\n\t/tmp/tmp5c3k80c5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local function heap_push(heap, num)\n    table.insert(heap, num)\n    local i = #heap\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop(heap)\n    local ret = heap[1]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    local i = 1\n    while i * 2 <= #heap do\n      local j = i * 2\n      if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for _, num in ipairs(nums) do\n    heap_push(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local ret = {}\n  while #heap > 0 do\n    table.insert(ret, 1, heap_pop(heap))\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz1nojye.lua:52: expected: {85, 75, 65}\nactual: {14, 22, 22}\nstack traceback:\n\t/tmp/tmpfz1nojye.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n\tlocal heap = {}\n\tfor _, num in ipairs(nums) do\n\t\tif #heap < n then\n\t\t\ttable.insert(heap, num)\n\t\t\theap_sift_up(heap, #heap)\n\t\telseif num > heap[1] then\n\t\t\theap[1] = num\n\t\t\theap_sift_down(heap, 1)\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 1, n do\n\t\ttable.insert(result, heap[1])\n\t\theap[1] = heap[#heap]\n\t\ttable.remove(heap)\n\t\theap_sift_down(heap, 1)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ykeqiud.lua:7: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmp3ykeqiud.lua:7: in local 'candidate'\n\t/tmp/tmp3ykeqiud.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        heap[#heap + 1] = num\n        local i = #heap\n        while i > 1 do\n            local parent = math.floor(i / 2)\n            if heap[parent] < heap[i] then\n                heap[parent], heap[i] = heap[i], heap[parent]\n                i = parent\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while i < #heap do\n            local left = i * 2\n            local right = left + 1\n            if left > #heap then\n                break\n            elseif right > #heap then\n                if heap[i] < heap[left] then\n                    heap[i], heap[left] = heap[left], heap[i]\n                end\n                break\n            else\n                local max = heap[left]\n                local max_i = left\n                if heap[right] > max then\n                    max = heap[right]\n                    max_i = right\n                end\n                if heap[i] < max then\n                    heap[i], heap[max_i] = heap[max_i], heap[i]\n                    i = max_i\n                else\n                    break\n                end\n            end\n        end\n        return ret\n    end\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n    end\n    local ret = {}\n    for i = 1, n do\n        ret[i] = heap_pop(heap)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        table.insert(heap, num)\n        heap_sift_up(heap, #heap)\n    end\n    local result = {}\n    for i = 1, n do\n        local max = heap_pop(heap)\n        table.insert(result, max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv8czh4a4.lua:6: attempt to call a nil value (global 'heap_sift_up')\nstack traceback:\n\t/tmp/tmpv8czh4a4.lua:6: in local 'candidate'\n\t/tmp/tmpv8czh4a4.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new(function(a, b) return a > b end)\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeg40p3p6.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpeg40p3p6.lua:3: in local 'candidate'\n\t/tmp/tmpeg40p3p6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_insert(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\n    local result = {}\n    while #heap > 0 do\n        table.insert(result, heap_pop(heap))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptct9v9e4.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmptct9v9e4.lua:5: in local 'candidate'\n\t/tmp/tmptct9v9e4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = Heap.new(function(a, b) return a > b end)\n    for _, num in ipairs(nums) do\n        heap:push(num)\n    end\n    local result = {}\n    for i = 1, n do\n        table.insert(result, heap:pop())\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeg40p3p6.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmpeg40p3p6.lua:3: in local 'candidate'\n\t/tmp/tmpeg40p3p6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  local heap_size = 0\n  local function heap_insert(num)\n    heap_size = heap_size + 1\n    heap[heap_size] = num\n    local i = heap_size\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    while i * 2 <= heap_size do\n      local j = i * 2\n      if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return ret\n  end\n  for i = 1, n do\n    heap_insert(nums[i])\n  end\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap_pop()\n      heap_insert(nums[i])\n    end\n  end\n  local ret = {}\n  for i = 1, n do\n    ret[i] = heap_pop()\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5pwuut4.lua:57: expected: {85, 75, 65}\nactual: {85, 25, 22}\nstack traceback:\n\t/tmp/tmpj5pwuut4.lua:57: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsg5nfff1.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    local function heap_push(heap, num)\n        table.insert(heap, num)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i/2)\n            if heap[i] > heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop(heap)\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n        local i = 1\n        while i < #heap do\n            local j = i*2\n            if j+1 <= #heap and heap[j+1] > heap[j] then\n                j = j+1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return ret\n    end\n    for i = 1, #nums do\n        heap_push(heap, nums[i])\n    end\n    local ret = {}\n    for i = 1, n do\n        table.insert(ret, heap_pop(heap))\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvn_3rdob.lua:27: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvn_3rdob.lua:27: in local 'heap_pop'\n\t/tmp/tmpvn_3rdob.lua:41: in local 'candidate'\n\t/tmp/tmpvn_3rdob.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for _, num in ipairs(nums) do\n    heap_insert(heap, num)\n    if #heap > n then\n      heap_pop(heap)\n    end\n  end\n  local result = {}\n  while #heap > 0 do\n    table.insert(result, heap_pop(heap))\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrb5j8s_.lua:5: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmpzrb5j8s_.lua:5: in local 'candidate'\n\t/tmp/tmpzrb5j8s_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = {}\n  for i = 1, n do\n    heap[i] = nums[i]\n  end\n  heap_build_max(heap)\n  for i = n + 1, #nums do\n    if nums[i] > heap[1] then\n      heap[1] = nums[i]\n      heap_max_heapify(heap, 1)\n    end\n  end\n  return heap_sort_desc(heap)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pe2c98e.lua:7: attempt to call a nil value (global 'heap_build_max')\nstack traceback:\n\t/tmp/tmp0pe2c98e.lua:7: in local 'candidate'\n\t/tmp/tmp0pe2c98e.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n    local heap = {}\n    for _, num in ipairs(nums) do\n        heap_push(heap, num)\n        if #heap > n then\n            heap_pop(heap)\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "",
      "stderr": "lua: /tmp/tmpceg5pxrc.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the n largest integers from a given table of numbers, returned in descending order.\nlocal function heap_queue_largest(nums, n)\n  local heap = Heap:new()\n  for _, num in ipairs(nums) do\n    heap:push(num)\n  end\n  local result = {}\n  for i = 1, n do\n    table.insert(result, heap:pop())\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = heap_queue_largest\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), {85, 75, 65})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), {85, 75})\n    lu.assertEquals(candidate({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), {85, 75, 65, 58, 35})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123561,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2adij9me.lua:3: attempt to index a nil value (global 'Heap')\nstack traceback:\n\t/tmp/tmp2adij9me.lua:3: in local 'candidate'\n\t/tmp/tmp2adij9me.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}