{
  "name": "mbpp_9_find_Rotations",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the minimum number of rotations (greater than 0) required to get the same string.\nlocal function find_Rotations(str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Rotations\n    lu.assertEquals(candidate('aaaa'), 1)\n    lu.assertEquals(candidate('ab'), 2)\n    lu.assertEquals(candidate('abc'), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local len = #str\n  local min = len\n  for i = 1, len do\n    local s = str:sub(i, len) .. str:sub(1, i - 1)\n    if s < str then\n      min = math.min(min, i)\n    end\n  end\n  return min\nend",
    "  local len = string.len(str)\n  local min_rotations = len\n  local str_concat = str .. str\n  for i=1, len do\n    if string.sub(str_concat, i, i+len-1) == str then\n      min_rotations = math.min(min_rotations, i-1)\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local min_rotations_index = 0\n    local min_rotations_str = str\n    for i = 1, str_len do\n        local new_str = string.sub(str, i) .. string.sub(str, 1, i - 1)\n        if new_str < min_rotations_str then\n            min_rotations_str = new_str\n            min_rotations_index = i\n        end\n    end\n    return min_rotations_index\nend",
    "  local len = #str\n  local min = len\n  local min_index = 0\n  for i = 1, len do\n    local str1 = string.sub(str, i, len)\n    local str2 = string.sub(str, 1, i - 1)\n    local str3 = str1 .. str2\n    local str4 = string.reverse(str3)\n    local str5 = string.sub(str4, 1, len)\n    local str6 = string.sub(str4, len + 1, 2 * len)\n    local str7 = str5 .. str6\n    local str8 = string.reverse(str7)\n    local str9 = string.sub(str8, 1, len)\n    local str10 = string.sub(str8, len + 1, 2 * len)\n    if str9 == str10 then\n      if min > i then\n        min = i\n        min_index = i\n      end\n    end\n  end\n  return min_index\nend",
    "  local str_len = string.len(str)\n  local str_min = str\n  local str_min_len = str_len\n  for i = 1, str_len do\n    local str_rotated = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n    if string.len(str_rotated) < str_min_len then\n      str_min = str_rotated\n      str_min_len = string.len(str_rotated)\n    end\n  end\n  return str_min\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tfor i = 1, str_len do\n\t\tlocal str_rotated = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\tif str_rotated == str then\n\t\t\tmin_rotations = 0\n\t\t\tbreak\n\t\tend\n\t\tif str_rotated < str then\n\t\t\tmin_rotations = math.min(min_rotations, i)\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local str_i = str:sub(i, len) .. str:sub(1, i - 1)\n        if str_i < min then\n            min = str_i\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = 0\n\tlocal min_str = str\n\tfor i = 1, str_len do\n\t\tlocal temp_str = str:sub(i) .. str:sub(1, i - 1)\n\t\tif temp_str < min_str then\n\t\t\tmin_str = temp_str\n\t\t\tmin_rotations = i\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if s == str then\n      min_rotations = 0\n      break\n    end\n    local rotations = 0\n    for j = 1, len do\n      if string.sub(s, j, j) == string.sub(str, 1, 1) then\n        rotations = rotations + 1\n        local s1 = string.sub(s, j, len) .. string.sub(s, 1, j - 1)\n        if s1 == str then\n          if min_rotations > rotations then\n            min_rotations = rotations\n          end\n          break\n        end\n      end\n    end\n  end\n  return min_rotations\nend",
    "    local len = string.len(str)\n    local min = len\n    local i = 1\n    while i <= len do\n        if str:sub(i, len) == str:sub(1, len - i + 1) then\n            min = i - 1\n            break\n        end\n        i = i + 1\n    end\n    return min\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_concat:sub(i, i + str_len - 1) < str then\n            min_rotations = i - 1\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str_concat = str..str\n\tfor i = 1, len do\n\t\tif str_concat:sub(i, i + len - 1) < str then\n\t\t\tmin_rotations = min_rotations - 1\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str..str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_concat:sub(i, i + str_len - 1) == str then\n            min_rotations = math.min(min_rotations, i - 1)\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local str2 = str .. str\n  local i = 1\n  while i <= len do\n    if str2:sub(i, i + len - 1) == str then\n      return i - 1\n    end\n    i = i + 1\n  end\n  return 0\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    for j = 1, len do\n      if str:sub(i, i) ~= str:sub(j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "\tlocal min_rotations = 0\n\tlocal str_len = string.len(str)\n\tfor i = 1, str_len do\n\t\tlocal temp_str = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\tif temp_str == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = string.len(str)\n  local min_rotations = len\n  local str_concat = str .. str\n  for i = 1, len do\n    local substr = string.sub(str_concat, i, i + len - 1)\n    if substr == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_concat = str .. str\n  for i = 1, len do\n    local rotations = 0\n    local j = i\n    while j <= len do\n      if str_concat:sub(i, j) ~= str_concat:sub(j + 1, j + len) then\n        break\n      end\n      rotations = rotations + 1\n      j = j + 1\n    end\n    if rotations == len then\n      return 1\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations + 1\nend",
    "    local len = #str\n    local count = 0\n    local i = 1\n    while i <= len do\n        if str:sub(i,i) == str:sub(1,1) then\n            i = i + 1\n        else\n            count = count + 1\n            i = i + 1\n        end\n    end\n    return count\nend",
    "\tlocal str_len = string.len(str)\n\tlocal str_min = str\n\tfor i = 1, str_len do\n\t\tlocal str_temp = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\tif str_temp < str_min then\n\t\t\tstr_min = str_temp\n\t\tend\n\tend\n\treturn str_min\nend",
    "\tlocal len = #str\n\tlocal str1 = str .. str\n\tlocal min = len\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= len do\n\t\tj = 1\n\t\twhile j <= len do\n\t\t\tif str1:sub(i, i + j - 1) == str:sub(1, j) then\n\t\t\t\tif j == len then\n\t\t\t\t\tif i < min then\n\t\t\t\t\t\tmin = i\n\t\t\t\t\tend\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min\nend",
    "  local len = #str\n  local min = len\n  for i = 1, len do\n    local s = str:sub(i, len) .. str:sub(1, i - 1)\n    if s < min then\n      min = s\n    end\n  end\n  return min\nend",
    "  local len = string.len(str)\n  local min_rotations = len\n  local min_rotation_index = 0\n  local str_copy = str\n  for i = 1, len do\n    str_copy = string.sub(str_copy, 2) .. string.sub(str_copy, 1, 1)\n    if str_copy < str then\n      min_rotations = len - i\n      min_rotation_index = i\n      str = str_copy\n    end\n  end\n  return min_rotations, min_rotation_index\nend",
    "  local len = #str\n  local min = len\n  local s = str .. str\n  for i = 1, len do\n    local sub = s:sub(i, i + len - 1)\n    if sub < str then\n      min = math.min(min, sub)\n    end\n  end\n  return min\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local min_rotations_index = 0\n    for i = 1, str_len do\n        local rotations = 0\n        for j = 1, str_len do\n            if str:sub(i, i) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n            min_rotations_index = i\n        end\n    end\n    return min_rotations, min_rotations_index\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_copy = str\n    local i = 1\n    while i <= len do\n        local rotations = 0\n        local j = 1\n        while j <= len do\n            if str[j] ~= str_copy[j] then\n                rotations = rotations + 1\n            end\n            j = j + 1\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n        str_copy = str_copy:sub(2) .. str_copy:sub(1, 1)\n        i = i + 1\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_concat = str .. str\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str_concat:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = string.len(str)\n  local min_rotations = 0\n  local min_str = str\n  for i = 1, str_len do\n    local new_str = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n    if string.len(new_str) < string.len(min_str) then\n      min_rotations = i\n      min_str = new_str\n    end\n  end\n  return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 1\n\tfor i = 1, len do\n\t\tlocal j = i\n\t\tlocal k = 1\n\t\twhile j <= len do\n\t\t\tif str:sub(j, j) ~= str:sub(k, k) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\tend\n\t\tif j > len and min > i then\n\t\t\tmin = i\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local rot_str = string.sub(str_concat, i, i + str_len - 1)\n    if rot_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    for j = 1, len do\n      if str:sub(i, i) ~= str:sub(j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min = len\n  for i = 1, len do\n    local new = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if new < str then\n      local rot = len - i + 1\n      if rot < min then\n        min = rot\n      end\n    end\n  end\n  return min\nend",
    "    local len = #str\n    local min_rotations = len\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str:sub(i, i) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local min_rotations = len\n    local str = str .. str\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local min_rotations = 0\n  local min_str = str\n  for i = 1, len do\n    local new_str = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if new_str < min_str then\n      min_str = new_str\n      min_rotations = i\n    end\n  end\n  return min_rotations\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local j = i\n        local k = 1\n        while str:sub(j, j) == str:sub(k, k) do\n            j = j + 1\n            k = k + 1\n            if j > len then\n                j = 1\n            end\n            if k > len then\n                k = 1\n            end\n            if j == i then\n                if min > i - 1 then\n                    min = i - 1\n                    min_index = i\n                end\n                break\n            end\n        end\n    end\n    return min_index\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile i < len and j < len and k < len do\n\t\tk = 0\n\t\twhile k < len and str:byte(i+k) == str:byte(j+k) do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\tbreak\n\t\tend\n\t\tif str:byte(i+k) > str:byte(j+k) then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif i == j then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn math.min(i, j)\nend",
    "\tlocal str_len = #str\n\tlocal str_copy = str\n\tlocal min_rotations = 0\n\tlocal min_rotation_str = str\n\tlocal rotation_str = \"\"\n\tfor i = 1, str_len do\n\t\trotation_str = string.sub(str_copy, 2) .. string.sub(str_copy, 1, 1)\n\t\tif rotation_str < min_rotation_str then\n\t\t\tmin_rotation_str = rotation_str\n\t\t\tmin_rotations = i\n\t\tend\n\t\tstr_copy = rotation_str\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tlocal i = 1\n\twhile i <= len do\n\t\tlocal j = 1\n\t\tlocal k = i\n\t\tlocal count = 0\n\t\twhile j <= len do\n\t\t\tif str:sub(j, j) ~= str:sub(k, k) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif k > len then\n\t\t\t\tk = 1\n\t\t\tend\n\t\tend\n\t\tif count < min then\n\t\t\tmin = count\n\t\t\tmin_index = i\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min_index, min\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    local j = i\n    local k = 1\n    while rotations < len do\n      if str:sub(j, j) ~= str:sub(k, k) then\n        break\n      end\n      rotations = rotations + 1\n      j = j + 1\n      k = k + 1\n      if j > len then\n        j = 1\n      end\n    end\n    if rotations == len then\n      min_rotations = math.min(min_rotations, i)\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  for i=1,len-1 do\n    local rotations = 0\n    local j = i\n    local k = 1\n    while rotations < len do\n      if str:sub(j,j) ~= str:sub(k,k) then\n        break\n      end\n      j = j + 1\n      k = k + 1\n      if j > len then\n        j = 1\n      end\n      rotations = rotations + 1\n    end\n    if rotations == len then\n      min_rotations = math.min(min_rotations, i)\n    end\n  end\n  return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str1 = str .. str\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tfor j = 1, len do\n\t\t\tif str1:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local i = 1\n  while i <= len do\n    local j = i\n    local k = i + 1\n    while k <= len do\n      if str:sub(j, j) == str:sub(k, k) then\n        j = j + 1\n        k = k + 1\n      else\n        break\n      end\n    end\n    if k == len + 1 then\n      return i\n    end\n    i = i + 1\n  end\n  return 0\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local len = #str\n    local str2 = str..str\n    local i = 1\n    local j = 2\n    local k = 0\n    while i <= len and j <= len do\n        k = 0\n        while k < len and str:sub(i+k, i+k) == str2:sub(j+k, j+k) do\n            k = k + 1\n        end\n        if k == len then\n            break\n        end\n        if str:sub(i+k, i+k) > str2:sub(j+k, j+k) then\n            i = i + k + 1\n        else\n            j = j + k + 1\n        end\n        if i == j then\n            j = j + 1\n        end\n    end\n    return i\nend",
    "  local str_len = #str\n  local min_rotations = str_len\n  local str_concat = str .. str\n  for i = 1, str_len do\n    local rotated_str = str_concat:sub(i, i + str_len - 1)\n    if rotated_str == str then\n      min_rotations = 0\n      break\n    end\n    local j = 1\n    while j < str_len do\n      if rotated_str:sub(j, j) ~= str:sub(j, j) then\n        break\n      end\n      j = j + 1\n    end\n    if j < min_rotations then\n      min_rotations = j\n    end\n  end\n  return min_rotations\nend",
    "  local str_len = #str\n  local str_copy = str\n  local min_rotations = 0\n  local i = 0\n  while i < str_len do\n    local first_char = string.sub(str_copy, 1, 1)\n    str_copy = string.sub(str_copy, 2)\n    str_copy = str_copy .. first_char\n    if str_copy == str then\n      min_rotations = i + 1\n      break\n    end\n    i = i + 1\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min = len\n  local min_index = 0\n  for i = 1, len do\n    local temp = str:sub(i, len) .. str:sub(1, i - 1)\n    if temp < min then\n      min = temp\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local len = #str\n  local str = str .. str\n  local i = 1\n  local j = 2\n  local k = 0\n  local lps = {}\n  lps[1] = 0\n  while j < len do\n    if str[i] == str[j] then\n      i = i + 1\n      j = j + 1\n      k = k + 1\n      lps[j] = k\n    else\n      if k ~= 0 then\n        k = lps[k]\n        i = i - k\n      else\n        j = j + 1\n        lps[j] = 0\n      end\n    end\n  end\n  return len - lps[len]\nend",
    "    local str_len = #str\n    local str_copy = str\n    local min_rotations = 0\n    local min_rotations_str = \"\"\n    for i = 1, str_len do\n        str_copy = str_copy:sub(2) .. str_copy:sub(1, 1)\n        if str_copy < str then\n            min_rotations = i\n            min_rotations_str = str_copy\n        end\n    end\n    return min_rotations, min_rotations_str\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    local i = 1\n    while i <= str_len do\n        local j = i + 1\n        while j <= str_len do\n            if str_concat:sub(i, j) == str then\n                min_rotations = math.min(min_rotations, j - i)\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return min_rotations\nend",
    "\tlocal str_len = str:len()\n\tlocal min_rotations = str_len\n\tlocal str_copy = str\n\tfor i = 1, str_len do\n\t\tstr_copy = str_copy:sub(2) .. str_copy:sub(1, 1)\n\t\tif str_copy == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal temp = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif temp < min then\n\t\t\tmin = temp\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal str_copy = str\n\tfor i = 1, str_len do\n\t\tstr_copy = string.sub(str_copy, 2, str_len) .. string.sub(str_copy, 1, 1)\n\t\tif str_copy == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = string.len(str)\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal str_rotated = str\n\tlocal str_rotated_len = string.len(str_rotated)\n\tlocal str_rotated_len_1 = str_rotated_len - 1\n\tlocal str_rotated_len_2 = str_rotated_len - 2\n\tlocal str_rotated_len_3 = str_rotated_len - 3\n\tlocal str_rotated_len_4 = str_rotated_len - 4\n\tlocal str_rotated_len_5 = str_rotated_len - 5\n\tlocal str_rotated_len_6 = str_rotated_len - 6\n\tlocal str_rotated_len_7 = str_rotated_len - 7\n\tlocal str_rotated_len_8 = str_rotated_len - 8\n\tlocal str_rotated_len_9 = str_rotated_len - 9\n\tlocal str_rotated_len_10 = str_rotated_len - 10\n\tlocal str_rotated_len_11 = str_rotated_len - 11\n\tlocal str_rotated_len_12 = str_rotated_len - 12\n\tlocal str_rotated_len_13 = str_rotated_len - 13\n\tlocal str_rotated_len_14 = str_rotated_len - 14\n\tlocal str_rotated_len_15 = str_rotated_len - 15\n\tlocal str_rotated_len_16 = str_rotated_len - 16\n\tlocal str_rotated_len_17 = str_rotated_len - 17\n\tlocal str_rotated_len_18 = str_rotated_len - 18\n\tlocal str_rotated_len_19 = str_rotated_len - 19\n\tlocal str_rotated_len_20 = str_rotated_len - 20\n\tlocal str_rotated_len_21 = str_rotated_len - 21\n\tlocal str_rotated_len_22 = str_rotated_len - 22\n\tlocal str_rotated_len_23 = str_rotated_len - 23",
    "\tlocal len = string.len(str)\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal tmp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n\t\tif tmp < min then\n\t\t\tmin = tmp\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_concat = str .. str\n  for i = 1, len do\n    local rotations = 0\n    local j = i\n    while j <= len do\n      if str_concat:sub(i, j) ~= str:sub(1, j - i + 1) then\n        break\n      end\n      rotations = j - i + 1\n      j = j + 1\n    end\n    if rotations == len then\n      return 0\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_rotated = str\n\tfor i = 1, str_len do\n\t\tstr_rotated = str_rotated:sub(2) .. str_rotated:sub(1, 1)\n\t\tif str_rotated == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_concat = str..str\n  for i=1,len do\n    local rotations = 0\n    for j=1,len do\n      if str_concat:sub(i+j-1,i+j-1) ~= str:sub(j,j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_concat = str .. str\n\tlocal min_rotations = str_len\n\tfor i = 1, str_len do\n\t\tif str_concat:sub(i, i + str_len - 1) == str then\n\t\t\tmin_rotations = math.min(min_rotations, i)\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local min = len\n    for i = 1, len do\n        local s = str:sub(i, len) .. str:sub(1, i - 1)\n        if s < str then\n            min = i\n            break\n        end\n    end\n    return min\nend",
    "  local str_len = #str\n  local str_concat = str..str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i+str_len-1)\n    if sub_str == str then\n      min_rotations = i-1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = #str\n  local str_rot = str .. str\n  local str_rot_len = #str_rot\n  local i = 1\n  local j = 1\n  local k = 0\n  local lps = {}\n  lps[1] = 0\n  while i < str_rot_len do\n    if str_rot:sub(i, i) == str_rot:sub(j, j) then\n      i = i + 1\n      j = j + 1\n      k = k + 1\n      lps[i] = k\n    else\n      if k ~= 0 then\n        k = lps[k]\n        j = k + 1\n      else\n        i = i + 1\n        lps[i] = 0\n      end\n    end\n  end\n  return str_len - lps[str_rot_len]\nend",
    "\tlocal min_rotations = 0\n\tlocal min_rotation = str\n\tlocal len = str:len()\n\tfor i = 1, len do\n\t\tlocal rotation = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif rotation < min_rotation then\n\t\t\tmin_rotation = rotation\n\t\t\tmin_rotations = i\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = 0\n  local min_rotations_index = 0\n  local min_rotations_len = 0\n  local min_rotations_str = \"\"\n  for i = 1, str_len do\n    local str_sub = string.sub(str_concat, i, i + str_len - 1)\n    local str_sub_len = #str_sub\n    if str_sub_len < min_rotations_len then\n      min_rotations_index = i\n      min_rotations_len = str_sub_len\n      min_rotations_str = str_sub\n    end\n  end\n  min_rotations = min_rotations_index - 1\n  return min_rotations, min_rotations_str\nend",
    "  local len = string.len(str)\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    local j = i\n    local k = 1\n    while k <= len do\n      if string.sub(str, j, j) ~= string.sub(str, k, k) then\n        rotations = rotations + 1\n      end\n      j = j + 1\n      k = k + 1\n      if j > len then\n        j = 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tfor i = 1, str_len do\n\t\tlocal sub_str = string.sub(str_concat, i, i + str_len - 1)\n\t\tif sub_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local min = len\n    for i = 1, len do\n        local s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n        if s == str then\n            return 0\n        end\n        if s < str then\n            min = math.min(min, i)\n        end\n    end\n    return min\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i=1,len do\n        local temp = string.sub(str,i,len)..string.sub(str,1,i-1)\n        if temp < min then\n            min = temp\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tfor i = 1, str_len do\n\t\tlocal rot_str = string.sub(str_concat, i, i + str_len - 1)\n\t\tif rot_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal str_arr = {}\n\tfor i = 1, len do\n\t\tstr_arr[i] = str:sub(i, i)\n\tend\n\tlocal min_rotations = len\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tlocal j = 1\n\t\twhile j <= len do\n\t\t\tif str_arr[j] ~= str_arr[i] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tif i > len then\n\t\t\t\ti = 1\n\t\t\tend\n\t\t\trotations = rotations + 1\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_table = {}\n  local str_table_2 = {}\n  for i = 1, len do\n    str_table[i] = string.sub(str, i, i)\n    str_table_2[i] = string.sub(str, i, i)\n  end\n  for i = 1, len do\n    table.insert(str_table_2, 1, table.remove(str_table_2, len))\n    local str_2 = table.concat(str_table_2)\n    if str_2 == str then\n      min_rotations = i\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local str_concat = str .. str\n    local str_concat_len = #str_concat\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = math.min(min_rotations, i)\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local min = len\n    local i = 1\n    while i <= len do\n        local j = i\n        local k = 1\n        while j <= len do\n            if str:sub(k, k) ~= str:sub(j, j) then\n                break\n            end\n            k = k + 1\n            j = j + 1\n        end\n        if k > len then\n            break\n        end\n        if j - i < min then\n            min = j - i\n        end\n        i = i + 1\n    end\n    return min\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local min = len\n  local min_index = 1\n  for i = 1, len do\n    local temp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if temp < min then\n      min = temp\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal temp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n\t\tif temp < min then\n\t\t\tmin = temp\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "  local len = #str\n  local str2 = str .. str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    k = 0\n    while k < len and str2:sub(i, i + k) == str2:sub(j, j + k) do\n      k = k + 1\n    end\n    if k == len then\n      break\n    end\n    if str2:sub(i, i + k) > str2:sub(j, j + k) then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.min(i, j)\nend",
    "    local len = string.len(str)\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local temp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n        if temp < min then\n            min = temp\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local str_len = string.len(str)\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_concat = str .. str\n  for i = 1, len do\n    local rotations = 0\n    for j = 1, len do\n      if str_concat:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min = len\n  local i = 1\n  while i <= len do\n    local j = 1\n    while j <= len do\n      if str:sub(i,i) ~= str:sub(j,j) then\n        break\n      end\n      j = j + 1\n    end\n    if j > len then\n      min = i\n      break\n    end\n    i = i + 1\n  end\n  return len - min\nend",
    "  local len = #str\n  local str1 = str..str\n  local min = len\n  for i = 1, len do\n    local str2 = str1:sub(i, i+len-1)\n    if str2 < str then\n      min = i-1\n      break\n    end\n  end\n  return min\nend",
    "    local len = string.len(str)\n    local min = len\n    local min_index = 0\n    local min_str = str\n    for i = 1, len do\n        local substr = string.sub(str, i, len)\n        local substr_len = string.len(substr)\n        local str_left = string.sub(str, 1, i - 1)\n        local str_left_len = string.len(str_left)\n        local str_new = substr .. str_left\n        if string.sub(str_new, 1, substr_len) == substr then\n            if str_left_len < min then\n                min = str_left_len\n                min_index = i\n                min_str = str_new\n            end\n        end\n    end\n    return min_index, min_str\nend",
    "\tlocal rotations = {}\n\tlocal str_len = #str\n\tfor i = 1, str_len do\n\t\tlocal rotation = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\ttable.insert(rotations, rotation)\n\tend\n\ttable.sort(rotations)\n\treturn rotations[1]\nend",
    "\tlocal str_len = #str\n\tlocal rotations = 0\n\tlocal min_rotations = str_len\n\tlocal str_copy = str\n\tlocal str_copy_len = #str_copy\n\tlocal str_copy_len_1 = str_copy_len - 1\n\tlocal str_copy_len_2 = str_copy_len - 2\n\tlocal str_copy_len_3 = str_copy_len - 3\n\tlocal str_copy_len_4 = str_copy_len - 4\n\tlocal str_copy_len_5 = str_copy_len - 5\n\tlocal str_copy_len_6 = str_copy_len - 6\n\tlocal str_copy_len_7 = str_copy_len - 7\n\tlocal str_copy_len_8 = str_copy_len - 8\n\tlocal str_copy_len_9 = str_copy_len - 9\n\tlocal str_copy_len_10 = str_copy_len - 10\n\tlocal str_copy_len_11 = str_copy_len - 11\n\tlocal str_copy_len_12 = str_copy_len - 12\n\tlocal str_copy_len_13 = str_copy_len - 13\n\tlocal str_copy_len_14 = str_copy_len - 14\n\tlocal str_copy_len_15 = str_copy_len - 15\n\tlocal str_copy_len_16 = str_copy_len - 16\n\tlocal str_copy_len_17 = str_copy_len - 17\n\tlocal str_copy_len_18 = str_copy_len - 18\n\tlocal str_copy_len_19 = str_copy_len - 19\n\tlocal str_copy_len_20 = str_copy_len - 20\n\tlocal str_copy_len_21 = str_copy_len - 21\n\tlocal str_copy_len_22 = str_copy_len - 22\n\tlocal str_copy_len_23 = str_copy_len - 23\n\tlocal str_copy_len_24 = str_copy_len - 24\n\tlocal str_copy_len_25 = str_copy_len - 25\n\tlocal str_copy_len_26 = str_copy",
    "  local str_len = #str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local rotated_str = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n    if rotated_str == str then\n      min_rotations = 0\n      break\n    else\n      local rotations = 0\n      for j = 1, str_len do\n        local rotated_str = string.sub(str, j, str_len) .. string.sub(str, 1, j - 1)\n        rotations = rotations + 1\n        if rotated_str == str then\n          if rotations < min_rotations then\n            min_rotations = rotations\n          end\n          break\n        end\n      end\n    end\n  end\n  return min_rotations\nend",
    "    local len = str:len()\n    local min = len\n    for i = 1, len do\n        local s = str:sub(i, len) .. str:sub(1, i - 1)\n        if s < str then\n            min = i\n            break\n        end\n    end\n    return min\nend",
    "    local len = string.len(str)\n    local min = len\n    local i = 1\n    while i <= len do\n        local j = 1\n        while j <= len do\n            if str:sub(i, i) ~= str:sub(j, j) then\n                break\n            end\n            j = j + 1\n        end\n        if j > len then\n            min = i - 1\n            break\n        end\n        i = i + 1\n    end\n    return min\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal str1 = str..str\n\tfor i = 1, len do\n\t\tlocal str2 = str1:sub(i, i+len-1)\n\t\tif str2 < min then\n\t\t\tmin = str2\n\t\tend\n\tend\n\treturn min\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if (sub_str == str) then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_copy = str\n\tfor i = 1, str_len do\n\t\tstr_copy = str_copy:sub(2) .. str_copy:sub(1, 1)\n\t\tif str_copy == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tlocal str_concat_len = #str_concat\n\tfor i = 1, str_len do\n\t\tlocal sub_str = string.sub(str_concat, i, i + str_len - 1)\n\t\tif sub_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal rotations = 0\n\tlocal str_len = #str\n\tlocal str_copy = str\n\tlocal str_copy_len = str_len\n\tlocal str_copy_len_1 = str_len - 1\n\tlocal str_copy_len_2 = str_len - 2\n\tlocal str_copy_len_3 = str_len - 3\n\tlocal str_copy_len_4 = str_len - 4\n\tlocal str_copy_len_5 = str_len - 5\n\tlocal str_copy_len_6 = str_len - 6\n\tlocal str_copy_len_7 = str_len - 7\n\tlocal str_copy_len_8 = str_len - 8\n\tlocal str_copy_len_9 = str_len - 9\n\tlocal str_copy_len_10 = str_len - 10\n\tlocal str_copy_len_11 = str_len - 11\n\tlocal str_copy_len_12 = str_len - 12\n\tlocal str_copy_len_13 = str_len - 13\n\tlocal str_copy_len_14 = str_len - 14\n\tlocal str_copy_len_15 = str_len - 15\n\tlocal str_copy_len_16 = str_len - 16\n\tlocal str_copy_len_17 = str_len - 17\n\tlocal str_copy_len_18 = str_len - 18\n\tlocal str_copy_len_19 = str_len - 19\n\tlocal str_copy_len_20 = str_len - 20\n\tlocal str_copy_len_21 = str_len - 21\n\tlocal str_copy_len_22 = str_len - 22\n\tlocal str_copy_len_23 = str_len - 23\n\tlocal str_copy_len_24 = str_len - 24\n\tlocal str_copy_len_25 = str_len - 25\n\tlocal str_copy_len_26 = str_len - 26\n\tlocal str_copy_len_27 = str_len - 27\n\tlocal str_copy_len_28 = str_len - 28\n\tlocal str_copy_len_29 = str_len - 29\n\tlocal str_copy_len_30 = str",
    "  local len = #str\n  local str1 = str..str\n  local i = 1\n  local j = 1\n  local k = 0\n  local arr = {}\n  while i < len and j < len do\n    if str1:sub(i, i) == str1:sub(j, j) then\n      i = i + 1\n      j = j + 1\n    else\n      if k > 0 then\n        k = k - 1\n        i = i - k\n        j = j - k\n      else\n        j = j + 1\n        k = 0\n      end\n    end\n  end\n  return i - 1\nend",
    "  local str_len = #str\n  local str_concat = str..str\n  local min_rotations = 0\n  local min_rotations_len = 0\n  local min_rotations_str = \"\"\n  for i=1,str_len do\n    local str_rot = string.sub(str_concat,i,i+str_len-1)\n    if min_rotations_len == 0 then\n      min_rotations_len = #str_rot\n      min_rotations_str = str_rot\n    elseif #str_rot < min_rotations_len then\n      min_rotations_len = #str_rot\n      min_rotations_str = str_rot\n    end\n  end\n  min_rotations = str_len - min_rotations_len\n  return min_rotations, min_rotations_str\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_copy = str\n  for i = 1, len do\n    local first_char = string.sub(str_copy, 1, 1)\n    str_copy = string.sub(str_copy, 2, len)\n    str_copy = str_copy .. first_char\n    if str_copy == str then\n      return i\n    end\n  end\n  return min_rotations\nend",
    "    local len = #str\n    local min = math.huge\n    local min_index = 0\n    for i = 1, len do\n        local temp = str:sub(i, len) .. str:sub(1, i - 1)\n        if temp < min then\n            min = temp\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_copy = str\n  for i = 1, len do\n    local first_char = str_copy:sub(1, 1)\n    str_copy = str_copy:sub(2) .. first_char\n    if str_copy == str then\n      min_rotations = i\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local str2 = str..str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    if str[i] == str[j] then\n      i = i + 1\n      j = j + 1\n    else\n      if k > 0 then\n        k = k - 1\n        i = i - k\n        j = j - k\n      else\n        i = 1\n        j = j + 1\n      end\n    end\n  end\n  if i > len then\n    return k\n  else\n    return 0\n  end\nend",
    "    local str_len = string.len(str)\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local str1 = str .. str\n    local min = len\n    local index = 0\n    for i = 1, len do\n        local str2 = string.sub(str1, i, i + len - 1)\n        if str2 < min then\n            min = str2\n            index = i\n        end\n    end\n    return index\nend",
    "  local str_len = string.len(str)\n  local min_rotations = str_len\n  local str_copy = str\n  for i = 1, str_len - 1 do\n    str_copy = string.sub(str_copy, 2) .. string.sub(str_copy, 1, 1)\n    if str_copy == str then\n      min_rotations = i\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = string.len(str)\n  local min_rotations = len\n  local min_index = 1\n  local min_str = str\n  for i = 1, len do\n    local temp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if temp < min_str then\n      min_rotations = i\n      min_str = temp\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min = len\n  local min_index = 0\n  for i = 1, len do\n    local s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if s < min then\n      min = s\n      min_index = i\n    end\n  end\n  return min_index\nend",
    "  local str_len = string.len(str)\n  local min_rotations = str_len\n  local str_concat = str .. str\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "  local len = #str\n  local min = len\n  local min_index = 0\n  local i = 1\n  while i <= len do\n    local j = 1\n    while j <= len do\n      if str:sub(i, i) ~= str:sub(j, j) then\n        break\n      end\n      j = j + 1\n    end\n      if j - i < min then\n        min = j - i\n        min_index = i\n      end\n      i = i + 1\n  end\n  return min_index\nend",
    "    local str_len = string.len(str)\n    local str_tmp = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    local lps = {}\n    while i < str_len do\n        if str_tmp:sub(i, i) == str_tmp:sub(j, j) then\n            i = i + 1\n            j = j + 1\n            lps[i] = k\n        else\n            if k > 0 then\n                k = lps[k]\n            else\n                i = i + 1\n                j = j + 1\n                lps[i] = 0\n            end\n        end\n    end\n    return str_len - lps[str_len]\nend",
    "\tlocal str_len = string.len(str)\n\tlocal str_min = str\n\tlocal str_min_len = str_len\n\tlocal str_min_index = 0\n\tfor i = 1, str_len do\n\t\tlocal str_tmp = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\tlocal str_tmp_len = string.len(str_tmp)\n\t\tif str_tmp_len < str_min_len then\n\t\t\tstr_min = str_tmp\n\t\t\tstr_min_len = str_tmp_len\n\t\t\tstr_min_index = i\n\t\tend\n\tend\n\treturn str_min_index\nend",
    "    local str_len = string.len(str)\n    local min_rotations = 0\n    local min_str = str\n    for i = 1, str_len do\n        local str_rotated = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n        if str_rotated < min_str then\n            min_rotations = i\n            min_str = str_rotated\n        end\n    end\n    return min_rotations\nend",
    "  local min_rotations = 0\n  local str_len = string.len(str)\n  local str_copy = str\n  for i = 1, str_len do\n    str_copy = string.sub(str_copy, 2) .. string.sub(str_copy, 1, 1)\n    if str_copy == str then\n      min_rotations = i\n      break\n    end\n  end\n  return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_i = 0\n\tfor i = 1, len do\n\t\tlocal s = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\t\tmin_i = i\n\t\tend\n\tend\n\treturn min_i\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_concat = str .. str\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str_concat:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "    local len = string.len(str)\n    local min = len\n    for i = 1, len do\n        local s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n        if s == str then\n            return 0\n        end\n        local j = 1\n        while j <= len do\n            if string.sub(s, j, j) ~= string.sub(str, j, j) then\n                break\n            end\n            j = j + 1\n        end\n        if j > len then\n            return len - i + 1\n        end\n    end\n    return min\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal min_rotation_str = str\n\tfor i = 1, str_len do\n\t\tlocal rotation_str = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n\t\tif rotation_str < min_rotation_str then\n\t\t\tmin_rotation_str = rotation_str\n\t\t\tmin_rotations = i - 1\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tfor j = 1, len do\n\t\t\tif str:sub(j, j) ~= str:sub(i, i) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\tif i > len then\n\t\t\t\ti = 1\n\t\t\tend\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local str_len = string.len(str)\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal str1 = str..str\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 0\n\tlocal next = {}\n\tnext[1] = 0\n\twhile i < len do\n\t\tif j == 0 or str[i] == str[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tif str[i] ~= str[j] then\n\t\t\t\tnext[i] = j\n\t\t\telse\n\t\t\t\tnext[i] = next[j]\n\t\t\tend\n\t\telse\n\t\t\tj = next[j]\n\t\tend\n\tend\n\ti = 1\n\tj = 1\n\twhile i <= len and j <= len do\n\t\tif j == 0 or str1[i] == str[j] then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tj = next[j]\n\t\tend\n\tend\n\tif j > len then\n\t\tk = i - len\n\tend\n\treturn k\nend",
    "\tlocal count = 0\n\tlocal len = string.len(str)\n\tlocal str1 = str\n\tlocal str2 = str\n\tlocal str3 = str\n\tlocal str4 = str\n\tlocal str5 = str\n\tlocal str6 = str\n\tlocal str7 = str\n\tlocal str8 = str\n\tlocal str9 = str\n\tlocal str10 = str\n\tlocal str11 = str\n\tlocal str12 = str\n\tlocal str13 = str\n\tlocal str14 = str\n\tlocal str15 = str\n\tlocal str16 = str\n\tlocal str17 = str\n\tlocal str18 = str\n\tlocal str19 = str\n\tlocal str20 = str\n\tlocal str21 = str\n\tlocal str22 = str\n\tlocal str23 = str\n\tlocal str24 = str\n\tlocal str25 = str\n\tlocal str26 = str\n\tlocal str27 = str\n\tlocal str28 = str\n\tlocal str29 = str\n\tlocal str30 = str\n\tlocal str31 = str\n\tlocal str32 = str\n\tlocal str33 = str\n\tlocal str34 = str\n\tlocal str35 = str\n\tlocal str36 = str\n\tlocal str37 = str\n\tlocal str38 = str\n\tlocal str39 = str\n\tlocal str40 = str\n\tlocal str41 = str\n\tlocal str42 = str\n\tlocal str43 = str\n\tlocal str44 = str\n\tlocal str45 = str\n\tlocal str46 = str\n\tlocal str47 = str\n\tlocal str48 = str\n\tlocal str49 = str\n\tlocal str50 = str\n\tlocal str51 = str\n\tlocal str52 = str\n\tlocal str53 = str\n\tlocal str54 = str\n\tlocal str55 = str\n\tlocal str56 = str\n\tlocal str57 = str\n\tlocal str58 = str\n\tlocal str59 = str\n\tlocal str60 = str\n\tlocal str61 = str\n\tlocal str62 = str\n\tlocal str63 = str\n\tlocal str64 = str\n\tlocal str65 = str\n\tlocal str66 = str\n\tlocal str67 = str\n\tlocal str68 = str\n\tlocal str69 = str\n\tlocal str70 = str\n\tlocal str71",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str_concat = str .. str\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tfor j = 1, len do\n\t\t\tif str_concat:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal j = 1\n\t\tlocal k = i\n\t\twhile j <= len do\n\t\t\tif str:sub(j, j) ~= str:sub(k, k) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif k > len then\n\t\t\t\tk = 1\n\t\t\tend\n\t\tend\n\t\tif j > len then\n\t\t\tif i < min then\n\t\t\t\tmin = i\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tfor j = 1, len do\n\t\t\tif str:sub(i, i) ~= str:sub(j, j) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local str_len = #str\n  local min_rotations = str_len\n  local str_concat = str .. str\n  for i = 1, str_len do\n    local rot_str = string.sub(str_concat, i, i + str_len - 1)\n    if (rot_str == str) then\n      min_rotations = 0\n      break\n    end\n    local rot_str_len = #rot_str\n    local rot_str_concat = rot_str .. rot_str\n    local j = 1\n    while (j <= rot_str_len) do\n      local rot_rot_str = string.sub(rot_str_concat, j, j + rot_str_len - 1)\n      if (rot_rot_str == str) then\n        if (min_rotations > j - 1) then\n          min_rotations = j - 1\n        end\n        break\n      end\n      j = j + 1\n    end\n  end\n  return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = 0\n  local min_rotations_len = 0\n  for i = 1, str_len do\n    local rotations = string.sub(str_concat, i, i + str_len - 1)\n    if min_rotations_len == 0 or #rotations < min_rotations_len then\n      min_rotations = i - 1\n      min_rotations_len = #rotations\n    end\n  end\n  return min_rotations\nend",
    "  local str_len = #str\n  local str_len_2 = str_len * 2\n  local str_2 = str .. str\n  local str_2_len = #str_2\n  local i = 1\n  local j = 1\n  local k = 0\n  local lps = {}\n  lps[1] = 0\n  while i < str_len_2 do\n    if str_2:sub(i, i) == str_2:sub(j, j) then\n      i = i + 1\n      j = j + 1\n      k = k + 1\n      lps[i] = k\n    else\n      if k ~= 0 then\n        k = lps[k]\n        j = k + 1\n      else\n        i = i + 1\n        j = 1\n        lps[i] = 0\n      end\n    end\n  end\n  return str_len - lps[str_len_2]\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_copy = str\n\tfor i = 1, str_len do\n\t\tlocal first_char = str_copy:sub(1, 1)\n\t\tstr_copy = str_copy:sub(2) .. first_char\n\t\tif str_copy == str then\n\t\t\tmin_rotations = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotation = len\n  local min_rotation_index = 0\n  for i = 1, len do\n    local rotation = 0\n    local j = i\n    while true do\n      if str:sub(j, j) == str:sub(1, 1) then\n        break\n      end\n      rotation = rotation + 1\n      j = j + 1\n      if j > len then\n        j = 1\n      end\n    end\n    if rotation < min_rotation then\n      min_rotation = rotation\n      min_rotation_index = i\n    end\n  end\n  return min_rotation_index, min_rotation\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_concat = str .. str\n    for i = 1, len do\n        local str_sub = string.sub(str_concat, i, i + len - 1)\n        if str_sub == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local len = #str\n  local str1 = str .. str\n  local min = len\n  for i = 1, len do\n    local str2 = string.sub(str1, i, i + len - 1)\n    if str2 < str then\n      min = i\n    end\n  end\n  return min\nend",
    "\tlocal str_len = #str\n\tlocal str_rot = str..str\n\tlocal min_rot = str_len\n\tfor i = 1, str_len do\n\t\tlocal rot_str = string.sub(str_rot, i, i+str_len-1)\n\t\tif rot_str == str then\n\t\t\tmin_rot = i-1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rot\nend",
    "  local str_len = #str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local rotations = 0\n    for j = 1, str_len do\n      if str:sub(i, i) ~= str:sub(j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = string.len(str)\n    local min_rotations = str_len\n    local min_rotations_index = 0\n    for i = 1, str_len do\n        local s = string.sub(str, i, str_len) .. string.sub(str, 1, i - 1)\n        if s < str then\n            if i < min_rotations then\n                min_rotations = i\n                min_rotations_index = i\n            end\n        end\n    end\n    return min_rotations_index\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal min_rotation_index = 1\n\tfor i = 1, str_len do\n\t\tlocal rotations = 0\n\t\tlocal j = i\n\t\tlocal k = 1\n\t\twhile rotations < str_len do\n\t\t\tif str:sub(j, j) ~= str:sub(k, k) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\trotations = rotations + 1\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif j > str_len then\n\t\t\t\tj = 1\n\t\t\tend\n\t\t\tif k > str_len then\n\t\t\t\tk = 1\n\t\t\tend\n\t\tend\n\t\tif rotations == str_len then\n\t\t\tmin_rotations = 0\n\t\t\tmin_rotation_index = i\n\t\t\tbreak\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\t\tmin_rotation_index = i\n\t\tend\n\tend\n\treturn min_rotations, min_rotation_index\nend",
    "  local min = math.huge\n  local len = #str\n  for i = 1, len do\n    local s = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n    if s == str then\n      return 0\n    end\n    local rotations = 0\n    for j = 1, len do\n      if string.sub(s, j, j) ~= string.sub(str, j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min then\n      min = rotations\n    end\n  end\n  return min\nend",
    "  local len = string.len(str)\n  local min = math.huge\n  for i=1,len do\n    local temp = string.sub(str,i,len)..string.sub(str,1,i-1)\n    if temp < min then\n      min = temp\n    end\n  end\n  return min\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal s = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal str_len = #str\n\tlocal str_copy = str\n\tlocal rotations = 0\n\tlocal min_rotations = 0\n\tlocal min_rotations_str = str\n\twhile rotations < str_len do\n\t\tstr_copy = str_copy:sub(2) .. str_copy:sub(1,1)\n\t\trotations = rotations + 1\n\t\tif str_copy < min_rotations_str then\n\t\t\tmin_rotations = rotations\n\t\t\tmin_rotations_str = str_copy\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local j = i\n        local k = 1\n        local count = 0\n        while true do\n            if str:sub(j, j) == str:sub(k, k) then\n                count = count + 1\n                j = j + 1\n                k = k + 1\n                if j > len then\n                    j = 1\n                end\n                if k > len then\n                    k = 1\n                end\n                if count == len then\n                    break\n                end\n            else\n                break\n            end\n        end\n        if count < min then\n            min = count\n            min_index = i\n        end\n    end\n    return min, min_index\nend",
    "\tlocal len = string.len(str)\n\tlocal min_rotations = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tlocal str1 = string.sub(str, i, len)\n\t\tlocal str2 = string.sub(str, 1, i - 1)\n\t\tlocal new_str = str1 .. str2\n\t\tlocal j = 1\n\t\twhile j <= len do\n\t\t\tif string.sub(new_str, j, j) ~= string.sub(str, j, j) then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_rotations, min_index\nend",
    "    local str_len = #str\n    local min_rotations = str_len\n    local str_concat = str .. str\n    for i = 1, str_len do\n        local rot_str = string.sub(str_concat, i, i + str_len - 1)\n        if rot_str == str then\n            min_rotations = 0\n            break\n        end\n        local rot_str_len = #rot_str\n        local j = 1\n        while j <= rot_str_len do\n            if string.sub(rot_str, j, j) ~= string.sub(str, j, j) then\n                break\n            end\n            j = j + 1\n        end\n        if j - 1 < min_rotations then\n            min_rotations = j - 1\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local min_rotations = len\n    local str_concat = str .. str\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str_concat:sub(i + j - 1, i + j - 1) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal new_str = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif new_str < str then\n\t\t\tif new_str < min then\n\t\t\t\tmin = new_str\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tfor i = 1, len do\n\t\tlocal j = i\n\t\tlocal k = 1\n\t\twhile str:sub(j, j) == str:sub(k, k) do\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif j == len + 1 then\n\t\t\t\tj = 1\n\t\t\tend\n\t\t\tif k == len + 1 then\n\t\t\t\tk = 1\n\t\t\tend\n\t\t\tif j == i then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif j == i and k - 1 < min then\n\t\t\tmin = k - 1\n\t\tend\n\tend\n\treturn min\nend",
    "    local n = #str\n    local concat = str..str\n    local i = 1\n    while i <= n do\n        if concat:sub(i, i+n-1) == str then\n            return i-1\n        end\n        i = i+1\n    end\n    return 0\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal s = str:sub(i, len) .. str:sub(1, i-1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "    local len = #str\n    local i = 1\n    local j = 2\n    local k = 0\n    local lps = {}\n    lps[1] = 0\n    while j <= len do\n        if str:sub(i, i) == str:sub(j, j) then\n            k = k + 1\n            lps[j] = k\n            i = i + 1\n            j = j + 1\n        else\n            if k > 0 then\n                k = lps[k]\n                i = i - k\n            else\n                lps[j] = 0\n                j = j + 1\n            end\n        end\n    end\n    return len - lps[len]\nend",
    "  local len = #str\n  local min = len\n  local min_index = 0\n  for i = 1, len do\n    local j = i\n    local k = 1\n    while str:sub(j, j) == str:sub(k, k) do\n      j = j + 1\n      k = k + 1\n      if j > len then\n        j = 1\n      end\n      if k > len then\n        break\n      end\n    end\n    if k > len then\n      min = i\n      min_index = i - 1\n      break\n    end\n  end\n  return min_index\nend",
    "  local len = #str\n  local str = str..str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    k = 0\n    while k < len and str:sub(i,i+k) == str:sub(j,j+k) do\n      k = k + 1\n    end\n    if k == len then\n      break\n    end\n    if str:sub(i,i+k) > str:sub(j,j+k) then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return math.min(i,j)\nend",
    "  local len = #str\n  local min = len\n  local i = 1\n  local j = 1\n  local k = 1\n  local temp = \"\"\n  local temp2 = \"\"\n  while i <= len do\n    j = 1\n    while j <= len do\n      temp = string.sub(str, i, len)\n      temp2 = string.sub(str, 1, i-1)\n      temp = temp .. temp2\n      if temp == str then\n        if min > k then\n          min = k\n        end\n        break\n      end\n      j = j + 1\n      k = k + 1\n    end\n    i = i + 1\n    k = 1\n  end\n  return min\nend",
    "\tlocal str_len = #str\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 0\n\tlocal lps = {}\n\twhile i < str_len do\n\t\tif str:sub(i,i) == str:sub(j,j) then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tlps[i] = j\n\t\telse\n\t\t\tif j ~= 0 then\n\t\t\t\tj = lps[j]\n\t\t\telse\n\t\t\t\ti = i + 1\n\t\t\t\tlps[i] = 0\n\t\t\tend\n\t\tend\n\tend\n\tlocal lps_len = #lps\n\tfor i = 1, lps_len do\n\t\tif lps[i] == 0 then\n\t\t\tk = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn k\nend",
    "    local len = #str\n    local str2 = str .. str\n    local i = 1\n    while i <= len do\n        local j = i + 1\n        while j <= len do\n            if str[i] ~= str[j] then\n                break\n            end\n            j = j + 1\n        end\n        if j == len + 1 then\n            return i\n        end\n        i = i + 1\n    end\n    return 0\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    local j = i\n    local k = 1\n    while rotations < len do\n      if str:sub(j, j) ~= str:sub(k, k) then\n        break\n      end\n      j = j + 1\n      k = k + 1\n      if j > len then\n        j = 1\n      end\n      rotations = rotations + 1\n    end\n    if rotations == len then\n      min_rotations = math.min(min_rotations, i)\n    end\n  end\n  return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_rot = str .. str\n\tlocal rotations = 0\n\tlocal min_rotations = str_len\n\twhile rotations < str_len do\n\t\tif str_rot:sub(rotations+1, str_len+rotations) == str then\n\t\t\tif rotations < min_rotations then\n\t\t\t\tmin_rotations = rotations\n\t\t\tend\n\t\tend\n\t\trotations = rotations + 1\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal str1 = string.sub(str, i, len)\n\t\tlocal str2 = string.sub(str, 1, i - 1)\n\t\tlocal str3 = str1 .. str2\n\t\tlocal str4 = string.reverse(str3)\n\t\tif str3 == str4 then\n\t\t\tlocal rot = len - i + 1\n\t\t\tif rot < min then\n\t\t\t\tmin = rot\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\tend\n\treturn min, min_index\nend",
    "    local len = #str\n    local min_rotations = len\n    for i = 1, len do\n        local rotations = 0\n        for j = 1, len do\n            if str:sub(i, i) ~= str:sub(j, j) then\n                rotations = rotations + 1\n            end\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n        end\n    end\n    return min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal str1 = string.sub(str, i, len)\n\t\tlocal str2 = string.sub(str, 1, i - 1)\n\t\tlocal str3 = str1 .. str2\n\t\tlocal str4 = string.reverse(str3)\n\t\tlocal count = 0\n\t\tfor j = 1, len do\n\t\t\tif str3:sub(j, j) ~= str4:sub(j, j) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count < min then\n\t\t\tmin = count\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tfor i = 1, len do\n\t\tlocal s = str:sub(i, len) .. str:sub(1, i - 1)\n\t\tif s < min then\n\t\t\tmin = s\n\t\tend\n\tend\n\treturn min\nend",
    "  local len = #str\n  local min_rotations = math.huge\n  local min_index = 0\n  for i = 1, len do\n    local rotations = 0\n    for j = 1, len do\n      if str:sub(i, i) ~= str:sub(j, j) then\n        rotations = rotations + 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n      min_index = i\n    end\n  end\n  return min_rotations, min_index\nend",
    "    local str_len = string.len(str)\n    local str_copy = str\n    local min_rotations = 0\n    for i = 1, str_len do\n        str_copy = string.sub(str_copy, 2)..string.sub(str_copy, 1, 1)\n        if str_copy == str then\n            min_rotations = i\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal min_rotations = str_len\n\tlocal str_concat = str .. str\n\tlocal str_concat_len = #str_concat\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal sub_str = str_concat:sub(i, i + str_len - 1)\n\t\tif sub_str == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal i = 1\n\twhile i <= len do\n\t\tlocal j = 1\n\t\tlocal k = i\n\t\twhile j <= len do\n\t\t\tif str:sub(j,j) ~= str:sub(k,k) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif k > len then\n\t\t\t\tk = 1\n\t\t\tend\n\t\tend\n\t\tif j > len then\n\t\t\tif i < min then\n\t\t\t\tmin = i\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str_concat = str..str\n\tfor i = 1, len do\n\t\tlocal rot_str = string.sub(str_concat, i, i+len-1)\n\t\tif rot_str == str then\n\t\t\tmin_rotations = 0\n\t\t\tbreak\n\t\tend\n\t\tlocal rot_str_len = #rot_str\n\t\tlocal j = 1\n\t\twhile j <= rot_str_len do\n\t\t\tif rot_str:sub(j, j) ~= str:sub(j, j) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif j-1 < min_rotations then\n\t\t\tmin_rotations = j-1\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local temp = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n        if temp < min then\n            min = temp\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal len = string.len(str)\n\tlocal min_rotations = len\n\tlocal min_rotated_str = str\n\tfor i = 1, len do\n\t\tlocal rotated_str = string.sub(str, i) .. string.sub(str, 1, i - 1)\n\t\tif rotated_str < min_rotated_str then\n\t\t\tmin_rotations = i\n\t\t\tmin_rotated_str = rotated_str\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal str_len = string.len(str)\n\tlocal str_copy = str\n\tlocal count = 0\n\tlocal min_count = 0\n\tlocal min_str = \"\"\n\tlocal min_str_len = 0\n\twhile count < str_len do\n\t\tstr_copy = string.sub(str_copy, 2, str_len) .. string.sub(str_copy, 1, 1)\n\t\tcount = count + 1\n\t\tif str_copy == str then\n\t\t\tmin_count = count\n\t\t\tmin_str = str_copy\n\t\t\tmin_str_len = str_len\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_count, min_str, min_str_len\nend",
    "  local str_len = string.len(str)\n  local min_rotations = str_len\n  local min_rotations_index = 0\n  local str_concat = str..str\n  for i=1,str_len do\n    if str_concat:sub(i,i+str_len-1) < str then\n      min_rotations = str_len - i + 1\n      min_rotations_index = i\n    end\n  end\n  return min_rotations, min_rotations_index\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tfor j = 1, len do\n\t\t\tif str[j] ~= str[(i + j - 2) % len + 1] then\n\t\t\t\trotations = rotations + 1\n\t\t\tend\n\t\tend\n\t\tmin_rotations = math.min(min_rotations, rotations)\n\tend\n\treturn min_rotations\nend",
    "\tlocal rotations = 0\n\tlocal str_len = string.len(str)\n\tlocal str_copy = str\n\tlocal str_copy_len = string.len(str_copy)\n\tlocal str_copy_sub = string.sub(str_copy, 1, 1)\n\tlocal str_copy_sub_len = string.len(str_copy_sub)\n\tlocal str_copy_sub_rep = string.rep(str_copy_sub, str_copy_len)\n\tlocal str_copy_sub_rep_len = string.len(str_copy_sub_rep)\n\tlocal str_copy_sub_rep_sub = string.sub(str_copy_sub_rep, 1, str_copy_len)\n\tlocal str_copy_sub_rep_sub_len = string.len(str_copy_sub_rep_sub)\n\tlocal str_copy_sub_rep_sub_sub = string.sub(str_copy_sub_rep_sub, 1, str_copy_len)\n\tlocal str_copy_sub_rep_sub_sub_len = string.len(str_copy_sub_rep_sub_sub)\n\tlocal str_copy_sub_rep_sub_sub_sub = string.sub(str_copy_sub_rep_sub_sub, 1, str_copy_len)\n\tlocal str_copy_sub_rep_sub_sub_sub_len = string.len(str_copy_sub_rep_sub_sub_sub)\n\tlocal str_copy_sub_rep_sub_sub_sub_sub = string.sub(str_copy_sub_rep_sub_sub_sub, 1, str_copy_len)\n\tlocal str_copy_sub_rep_sub_sub_sub_sub_len = string.len(str_copy_sub_rep_sub_sub_sub_sub)\n\tlocal str_copy_sub_rep_sub_sub_sub_sub_sub = string.sub(str_copy_sub_rep_sub_sub_sub_sub, 1, str_copy_len)\n\tlocal str_copy_sub_rep_sub_sub_sub_sub_sub_len = string.len(str",
    "  local len = #str\n  local str2 = str .. str\n  local i = 1\n  local j = 2\n  local k = 0\n  while i <= len and j <= len do\n    k = 0\n    while k < len and str:sub(i+k, i+k) == str:sub(j+k, j+k) do\n      k = k + 1\n    end\n    if k == len then\n      break\n    end\n    if str:sub(i+k, i+k) > str:sub(j+k, j+k) then\n      i = i + k + 1\n    else\n      j = j + k + 1\n    end\n    if i == j then\n      j = j + 1\n    end\n  end\n  return i\nend",
    "  local len = #str\n  local min = len\n  for i = 1, len do\n    local j = i\n    local k = 1\n    local c = str:sub(j, j)\n    while str:sub(k, k) == c do\n      j = j + 1\n      if j > len then\n        j = 1\n      end\n      k = k + 1\n      if k > len then\n        break\n      end\n    end\n    if k > len then\n      break\n    end\n    local rotations = 0\n    while j ~= i do\n      rotations = rotations + 1\n      j = j + 1\n      if j > len then\n        j = 1\n      end\n    end\n    if rotations < min then\n      min = rotations\n    end\n  end\n  return min\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "\tlocal str_len = string.len(str)\n\tlocal min_rotations = str_len\n\tlocal i = 1\n\twhile i <= str_len do\n\t\tlocal j = 1\n\t\tlocal k = i\n\t\tlocal rotations = 0\n\t\twhile j <= str_len do\n\t\t\tif string.sub(str, j, j) ~= string.sub(str, k, k) then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif k > str_len then\n\t\t\t\tk = 1\n\t\t\tend\n\t\t\trotations = rotations + 1\n\t\tend\n\t\tif rotations == str_len then\n\t\t\tmin_rotations = 0\n\t\t\tbreak\n\t\telseif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str_concat = str .. str\n\tfor i = 1, len do\n\t\tif str_concat:sub(i, i + len - 1) < str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  for i = 1, len do\n    local rotations = 0\n    for j = 1, len do\n      if str:sub(j, j) ~= str:sub(i, i) then\n        rotations = rotations + 1\n      end\n      i = i + 1\n      if i > len then\n        i = 1\n      end\n    end\n    if rotations < min_rotations then\n      min_rotations = rotations\n    end\n  end\n  return min_rotations\nend",
    "\tlocal len = #str\n\tlocal str_table = {}\n\tlocal rotations = {}\n\tlocal min_rotations = 0\n\tlocal min_rotations_index = 0\n\tfor i = 1, len do\n\t\tstr_table[i] = string.sub(str, i, i)\n\tend\n\tfor i = 1, len do\n\t\tlocal temp = {}\n\t\tfor j = 1, len do\n\t\t\ttemp[j] = str_table[(i + j - 1) % len + 1]\n\t\tend\n\t\trotations[i] = table.concat(temp)\n\tend\n\tmin_rotations = rotations[1]\n\tfor i = 2, len do\n\t\tif string.byte(rotations[i]) < string.byte(min_rotations) then\n\t\t\tmin_rotations = rotations[i]\n\t\t\tmin_rotations_index = i\n\t\tend\n\tend\n\treturn min_rotations_index\nend",
    "\tlocal len = #str\n\tlocal str1 = str..str\n\tlocal i = 1\n\tlocal j = 2\n\tlocal k = 0\n\twhile i <= len and j <= len do\n\t\tk = 0\n\t\twhile k < len and str1:sub(i, i+k) == str1:sub(j, j+k) do\n\t\t\tk = k + 1\n\t\tend\n\t\tif k == len then\n\t\t\tbreak\n\t\tend\n\t\tif str1:sub(i, i+k) > str1:sub(j, j+k) then\n\t\t\ti = i + k + 1\n\t\telse\n\t\t\tj = j + k + 1\n\t\tend\n\t\tif i == j then\n\t\t\tj = j + 1\n\t\tend\n\tend\n\treturn math.min(i, j)\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = str_len\n  for i = 1, str_len do\n    local sub_str = string.sub(str_concat, i, i + str_len - 1)\n    if sub_str == str then\n      min_rotations = i - 1\n      break\n    end\n  end\n  return min_rotations\nend",
    "    local len = #str\n    local min = len\n    local min_index = 0\n    for i = 1, len do\n        local j = i\n        local k = 1\n        local count = 0\n        while true do\n            if str:sub(j, j) ~= str:sub(k, k) then\n                count = count + 1\n            end\n            if j == len then\n                j = 1\n            else\n                j = j + 1\n            end\n            if k == len then\n                k = 1\n            else\n                k = k + 1\n            end\n            if j == i then\n                break\n            end\n        end\n        if count < min then\n            min = count\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "    local len = string.len(str)\n    local str_temp = str .. str\n    local i = 1\n    local j = 1\n    local k = 1\n    local lps = {}\n    lps[1] = 0\n    while i < 2 * len do\n        if str_temp[i] == str_temp[j] then\n            i = i + 1\n            j = j + 1\n            lps[i] = j\n        else\n            if j ~= 1 then\n                j = lps[j - 1] + 1\n            else\n                i = i + 1\n                lps[i] = 0\n            end\n        end\n    end\n    return len - lps[2 * len]\nend",
    "\tlocal str_len = #str\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal min_rotations = 0\n\tlocal min_rotations_index = 0\n\tlocal temp_str = \"\"\n\tlocal temp_str_len = 0\n\tlocal temp_str_len_2 = 0\n\tlocal temp_str_len_3 = 0\n\tlocal temp_str_len_4 = 0\n\tlocal temp_str_len_5 = 0\n\tlocal temp_str_len_6 = 0\n\tlocal temp_str_len_7 = 0\n\tlocal temp_str_len_8 = 0\n\tlocal temp_str_len_9 = 0\n\tlocal temp_str_len_10 = 0\n\tlocal temp_str_len_11 = 0\n\tlocal temp_str_len_12 = 0\n\tlocal temp_str_len_13 = 0\n\tlocal temp_str_len_14 = 0\n\tlocal temp_str_len_15 = 0\n\tlocal temp_str_len_16 = 0\n\tlocal temp_str_len_17 = 0\n\tlocal temp_str_len_18 = 0\n\tlocal temp_str_len_19 = 0\n\tlocal temp_str_len_20 = 0\n\tlocal temp_str_len_21 = 0\n\tlocal temp_str_len_22 = 0\n\tlocal temp_str_len_23 = 0\n\tlocal temp_str_len_24 = 0\n\tlocal temp_str_len_25 = 0\n\tlocal temp_str_len_26 = 0\n\tlocal temp_str_len_27 = 0\n\tlocal temp_str_len_28 = 0\n\tlocal temp_str_len_29 = 0\n\tlocal temp_str_len_30 = 0\n\tlocal temp_str_len_31 = 0\n\tlocal temp_str_len_32 = 0\n\tlocal temp_str_len_33 = 0\n\tlocal temp_str_len_34 = 0\n\tlocal temp_str_len_35 = 0\n\tlocal temp_str_len_36 = 0\n\tlocal temp_str_len_37 = 0\n\tlocal temp_str_len_38 = 0\n\tlocal",
    "\tlocal str_len = #str\n\tlocal str_min = str\n\tlocal str_min_len = #str_min\n\tlocal str_min_rot = 0\n\tfor i = 1, str_len do\n\t\tstr = str:sub(2) .. str:sub(1, 1)\n\t\tif #str < str_min_len then\n\t\t\tstr_min = str\n\t\t\tstr_min_len = #str_min\n\t\t\tstr_min_rot = i\n\t\tend\n\tend\n\treturn str_min_rot\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tfor i = 1, len do\n\t\tlocal rot = string.sub(str, i, len) .. string.sub(str, 1, i - 1)\n\t\tif rot == str then\n\t\t\treturn 0\n\t\tend\n\t\tif rot < str and #rot < min then\n\t\t\tmin = #rot\n\t\tend\n\tend\n\treturn min\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        local sub_str = string.sub(str_concat, i, i + str_len - 1)\n        if sub_str == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "    local len = #str\n    local min_rotations = len\n    local min_index = 0\n    for i = 1, len do\n        local rotations = 0\n        local j = i\n        while true do\n            if str:sub(j, j) == str:sub(1, 1) then\n                break\n            end\n            j = j + 1\n            if j > len then\n                j = 1\n            end\n            rotations = rotations + 1\n        end\n        if rotations < min_rotations then\n            min_rotations = rotations\n            min_index = i\n        end\n    end\n    return min_rotations, min_index\nend",
    "  local len = #str\n  local min_rotations = 0\n  local min_str = str\n  for i = 1, len do\n    local new_str = str:sub(i, len) .. str:sub(1, i - 1)\n    if new_str < min_str then\n      min_str = new_str\n      min_rotations = i\n    end\n  end\n  return min_rotations\nend",
    "    local len = string.len(str)\n    local min = len\n    local min_index = 0\n    for i = 1, len - 1 do\n        local temp = string.sub(str, i + 1, len) .. string.sub(str, 1, i)\n        if temp < min then\n            min = temp\n            min_index = i\n        end\n    end\n    return min_index\nend",
    "\tlocal rotations = 0\n\tlocal str_len = #str\n\tlocal str_len_half = str_len / 2\n\tlocal str_len_half_floor = math.floor(str_len_half)\n\tlocal str_len_half_ceil = math.ceil(str_len_half)\n\tlocal str_len_half_floor_str = string.sub(str, 1, str_len_half_floor)\n\tlocal str_len_half_ceil_str = string.sub(str, str_len_half_ceil + 1, str_len)\n\tlocal str_len_half_floor_str_rev = string.reverse(str_len_half_floor_str)\n\tlocal str_len_half_ceil_str_rev = string.reverse(str_len_half_ceil_str)\n\tlocal str_len_half_floor_str_rev_str = string.sub(str_len_half_floor_str_rev, 1, str_len_half_floor)\n\tlocal str_len_half_ceil_str_rev_str = string.sub(str_len_half_ceil_str_rev, 1, str_len_half_ceil)\n\tlocal str_len_half_floor_str_rev_str_str = str_len_half_ceil_str .. str_len_half_floor_str_rev_str\n\tlocal str_len_half_ceil_str_rev_str_str = str_len_half_floor_str .. str_len_half_ceil_str_rev_str\n\tif str_len % 2 == 0 then\n\t\tif str == str_len_half_floor_str_rev_str_str then\n\t\t\trotations = str_len_half_floor\n\t\telseif str == str_len_half_ceil_str_rev_str_str then\n\t\t\trotations = str_len_half_ceil\n\t\tend\n\telse\n\t\tif str == str_len_half_floor_str_rev_str_str then\n\t\t\trotations = str_len_half_floor\n\t\telseif str == str_",
    "\tlocal len = #str\n\tlocal str_table = {}\n\tlocal min_rotations = len\n\tfor i = 1, len do\n\t\ttable.insert(str_table, string.sub(str, i, len) .. string.sub(str, 1, i - 1))\n\tend\n\ttable.sort(str_table)\n\tfor i = 1, len do\n\t\tif str_table[i] == str then\n\t\t\tmin_rotations = i - 1\n\t\t\tbreak\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal str_len = #str\n\tlocal str_copy = str\n\tlocal min_rotations = 0\n\tlocal min_rotations_str = str\n\tfor i = 1, str_len do\n\t\tstr_copy = str_copy:sub(2) .. str_copy:sub(1, 1)\n\t\tif str_copy < min_rotations_str then\n\t\t\tmin_rotations = i\n\t\t\tmin_rotations_str = str_copy\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "\tlocal len = #str\n\tlocal min_rotations = len\n\tlocal str_table = {}\n\tfor i = 1, len do\n\t\tstr_table[i] = string.sub(str, i, i)\n\tend\n\tfor i = 1, len do\n\t\tlocal rotations = 0\n\t\tlocal j = i\n\t\twhile rotations < len do\n\t\t\tif str_table[j] ~= str_table[j % len + 1] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\trotations = rotations + 1\n\t\t\tj = j + 1\n\t\tend\n\t\tif rotations < min_rotations then\n\t\t\tmin_rotations = rotations\n\t\tend\n\tend\n\treturn min_rotations\nend",
    "  local len = #str\n  local min_rotations = len\n  local str_concat = str .. str\n  for i = 1, len do\n    local str_rotated = str_concat:sub(i, i + len - 1)\n    if str_rotated == str then\n      min_rotations = 0\n      break\n    end\n    local j = 1\n    while j <= len do\n      if str_rotated:sub(j, j) ~= str:sub(j, j) then\n        break\n      end\n      j = j + 1\n    end\n    if j < min_rotations then\n      min_rotations = j\n    end\n  end\n  return min_rotations\nend",
    "    local str_len = #str\n    local str_concat = str .. str\n    local min_rotations = str_len\n    for i = 1, str_len do\n        if str_concat:sub(i, i + str_len - 1) == str then\n            min_rotations = i - 1\n            break\n        end\n    end\n    return min_rotations\nend",
    "  local str_len = #str\n  local str_concat = str .. str\n  local min_rotations = 0\n  local min_rotations_len = str_len\n  for i = 1, str_len do\n    local rotations = str_concat:sub(i, i + str_len - 1)\n    if rotations < str then\n      min_rotations = i\n      min_rotations_len = #rotations\n    end\n  end\n  return min_rotations, min_rotations_len\nend",
    "\tlocal len = #str\n\tlocal min = len\n\tlocal min_index = 0\n\tfor i = 1, len do\n\t\tlocal j = i\n\t\tlocal k = 1\n\t\twhile str:sub(j, j) == str:sub(k, k) do\n\t\t\tj = j + 1\n\t\t\tk = k + 1\n\t\t\tif j > len then\n\t\t\t\tj = 1\n\t\t\tend\n\t\t\tif k > len then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif k > len and min > i then\n\t\t\tmin = i\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend",
    "\tlocal str1 = str\n\tlocal str2 = str\n\tlocal str3 = str\n\tlocal str4 = str\n\tlocal str5 = str\n\tlocal str6 = str\n\tlocal str7 = str\n\tlocal str8 = str\n\tlocal str9 = str\n\tlocal str10 = str\n\tlocal str11 = str\n\tlocal str12 = str\n\tlocal str13 = str\n\tlocal str14 = str\n\tlocal str15 = str\n\tlocal str16 = str\n\tlocal str17 = str\n\tlocal str18 = str\n\tlocal str19 = str\n\tlocal str20 = str\n\tlocal str21 = str\n\tlocal str22 = str\n\tlocal str23 = str\n\tlocal str24 = str\n\tlocal str25 = str\n\tlocal str26 = str\n\tlocal str27 = str\n\tlocal str28 = str\n\tlocal str29 = str\n\tlocal str30 = str\n\tlocal str31 = str\n\tlocal str32 = str\n\tlocal str33 = str\n\tlocal str34 = str\n\tlocal str35 = str\n\tlocal str36 = str\n\tlocal str37 = str\n\tlocal str38 = str\n\tlocal str39 = str\n\tlocal str40 = str\n\tlocal str41 = str\n\tlocal str42 = str\n\tlocal str43 = str\n\tlocal str44 = str\n\tlocal str45 = str\n\tlocal str46 = str\n\tlocal str47 = str\n\tlocal str48 = str\n\tlocal str49 = str\n\tlocal str50 = str\n\tlocal str51 = str\n\tlocal str52 = str\n\tlocal str53 = str\n\tlocal str54 = str\n\tlocal str55 = str\n\tlocal str56 = str\n\tlocal str57 = str\n\tlocal str58 = str\n\tlocal str59 = str\n\tlocal str60 = str\n\tlocal str61 = str\n\tlocal str62 = str\n\tlocal str63 = str\n\tlocal str64 = str\n\tlocal str65 = str\n\tlocal str66 = str\n\tlocal str67 = str\n\tlocal str68 = str\n\tlocal str69 = str\n\tlocal str70 = str\n\tlocal str71 = str\n\tlocal str72 = str\n\tlocal str73 = str\n"
  ]
}