{
  "name": "mbpp_736_left_insertion",
  "language": "lua",
  "prompt": "-- Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/luathon-exercises/data-structures-and-algorithms/luathon-data-structure-exercise-24.php\nlocal function left_insertion(a, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_insertion\n    lu.assertEquals(candidate({1, 2, 4, 5}, 6), 4)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 3), 2)\n    lu.assertEquals(candidate({1, 2, 4, 5}, 7), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local l, r = 1, #a\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  return l\nend",
    "  local n = #a\n  local l, r = 1, n\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "\tlocal l, r = 1, #a\n\twhile l < r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif a[m] < x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m\n\t\tend\n\tend\n\treturn l\nend",
    "\tlocal l, r = 1, #a\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif a[m] < x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m - 1\n\t\tend\n\tend\n\treturn l\nend",
    "  local i = 1\n  while i <= #a and a[i] < x do\n    i = i + 1\n  end\n  return i\nend",
    "\tlocal i = 1\n\twhile i <= #a and a[i] < x do\n\t\ti = i + 1\n\tend\n\treturn i\nend",
    "  local low = 1\n  local high = #a\n  local mid\n  while low <= high do\n    mid = math.floor((low + high) / 2)\n    if a[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend",
    "  local l, r = 1, #a\n  while l < r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m\n    end\n  end\n  return l\nend",
    "  local i = 1\n  while a[i] < x do\n    i = i + 1\n  end\n  return i\nend",
    "  local i = 1\n  while i <= #a and a[i] < x do\n    i = i + 1\n  end\n  return i\nend",
    "    local l, r = 1, #a\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if a[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local i = 1\n  while a[i] < x do\n    i = i + 1\n  end\n  return i\nend",
    "  local l = 1\n  local r = #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend",
    "  local i = 1\n  while a[i] < x do\n    i = i + 1\n  end\n  return i\nend",
    "    local l, r = 1, #a\n    while l < r do\n        local m = math.floor((l + r) / 2)\n        if a[m] < x then\n            l = m + 1\n        else\n            r = m\n        end\n    end\n    return l\nend",
    "  local l, r = 1, #a\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if a[m] == x then\n      return m\n    elseif a[m] > x then\n      r = m - 1\n    else\n      l = m + 1\n    end\n  end\n  return l\nend",
    "  local lo, hi = 1, #a\n  while lo <= hi do\n    local mid = floor((lo + hi) / 2)\n    if a[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return lo\nend",
    "  local i = 1\n  while i <= #a and a[i] < x do\n    i = i + 1\n  end\n  return i\nend"
  ]
}