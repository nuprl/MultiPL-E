{
  "name": "mbpp_560_union_elements",
  "language": "lua",
  "prompt": "-- Write a function to find the union of the elements of two given tables and output them in sorted order.\nlocal function union_elements(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = union_elements\n    lu.assertEquals(candidate({3, 4, 5, 6}, {5, 7, 4, 10}), {3, 4, 5, 6, 7, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, {3, 4, 5, 6}), {1, 2, 3, 4, 5, 6})\n    lu.assertEquals(candidate({11, 12, 13, 14}, {13, 15, 16, 17}), {11, 12, 13, 14, 15, 16, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "\tlocal union_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[#union_tup + 1] = test_tup1[i]\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tunion_tup[#union_tup + 1] = test_tup2[i]\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_index = 1\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= tup1_len and tup2_index <= tup2_len do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_len do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_len do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index =",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i, j = 1, 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    local union_tup_count = 0\n    local union_tup_index = 1\n    local test_tup1_count = #test_tup1\n    local test_tup2_count = #test_tup2\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= test_tup1_count and test_tup2_index <= test_tup2_count do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= test_tup1_count do\n        union_tup_count = union_tup_count + 1\n        union_tup[union_tup_count] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <=",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index = tup2_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] == test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        elseif test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[i] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in pairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in pairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    if test_tup1_index <= #test_tup1 then\n        for i = test_tup1_index, #test_tup1 do\n            union_tup[union_tup_index] = test_tup1[i]\n            union_tup_index = union_tup_index + 1\n        end\n    elseif test_tup2_index <= #test_tup2 then\n        for i = test_tup2_index, #test_tup2 do\n            union_tup[union_tup_index] = test_tup2[i]\n            union_tup_index = union_tup_index + 1\n        end\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local result = {}\n    local result_len = 0\n    for i = 1, #test_tup1 do\n        result_len = result_len + 1\n        result[result_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_exist = false\n        for j = 1, #result do\n            if test_tup2[i] == result[j] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            result_len = result_len + 1\n            result[result_len] = test_tup2[i]\n        end\n    end\n    table.sort(result)\n    return result\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local tup1 = {}\n    local tup2 = {}\n    for _, v in ipairs(test_tup1) do\n        tup1[v] = true\n    end\n    for _, v in ipairs(test_tup2) do\n        tup2[v] = true\n    end\n    local union = {}\n    for k, _ in pairs(tup1) do\n        table.insert(union, k)\n    end\n    for k, _ in pairs(tup2) do\n        table.insert(union, k)\n    end\n    table.sort(union)\n    return union\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index = tup2_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_idx = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= test_tup1_len and test_tup2_idx <= test_tup2_len do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup_idx = union_tup_idx + 1\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup_idx = union_tup_idx + 1\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup_idx = union_tup_idx + 1\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= test_tup1_len do\n        union_tup_idx = union_tup_idx + 1\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_index = 1\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_index = 1\n    local tup2_index = 1",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        tup1_index = tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        tup2_index = tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    for i = 1, test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for _, v in ipairs(test_tup1) do\n        union_tup[union_tup_len + 1] = v\n        union_tup_len = union_tup_len + 1\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[union_tup_len + 1] = v\n        union_tup_len = union_tup_len + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for k, v in pairs(test_tup1) do\n        union_tup[k] = v\n    end\n    for k, v in pairs(test_tup2) do\n        union_tup[k] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i, j = 1, 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    return table.sort(union_tup)\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    return table.sort(union_tup)\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        test_tup1_idx = test_tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n        test_tup2_idx =",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    return table.sort(union_tup)\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_in_union = false\n        for j = 1, #union_tup do\n            if test_tup2[i] == union_tup[j] then\n                is_in_union = true\n                break\n            end\n        end\n        if not is_in_union then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= #test_tup1 and tup2_idx <= #test_tup2 do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[tup1_idx]\n        tup1_idx = tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[tup2_idx]\n        tup2_idx = tup2_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_index = 1\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[union_tup_index] = test_tup1[i]\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tif not is_in_tup(test_tup2[i], union_tup) then\n\t\t\tunion_tup[union_tup_index] = test_tup2[i]\n\t\t\tunion_tup_index = union_tup_index + 1\n\t\tend\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_count = 0\n    local union_tup_index = 1\n    local test_tup1_count = #test_tup1\n    local test_tup2_count = #test_tup2\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= test_tup1_count and test_tup2_index <= test_tup2_count do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup_count = union_tup_count + 1\n            union_tup[union_tup_count] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= test_tup1_count do\n        union_tup_count = union_tup_count + 1\n        union_tup[union_tup_count] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <=",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local i = 1\n    local j = 1\n    while i <= #test_tup1 and j <= #test_tup2 do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= #test_tup2 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "  local union_tup = {}\n  for _, v in ipairs(test_tup1) do\n    union_tup[#union_tup + 1] = v\n  end\n  for _, v in ipairs(test_tup2) do\n    union_tup[#union_tup + 1] = v\n  end\n  table.sort(union_tup)\n  return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_idx = 1\n  local test_tup1_idx = 1\n  local test_tup2_idx = 1",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[i] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index = tup2_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= #test_tup1 and tup2_idx <= #test_tup2 do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n    end\n    while tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        tup1_idx = tup1_idx + 1\n    end\n    while tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[tup2_idx]\n        union_tup_idx = union_tup_idx + 1\n        tup",
    "    local union_tup = {}\n    for _, v in pairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in pairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_set = {}\n    for i = 1, #test_tup1 do\n        union_set[test_tup1[i]] = true\n    end\n    for i = 1, #test_tup2 do\n        union_set[test_tup2[i]] = true\n    end\n    local union_tup = {}\n    for k, v in pairs(union_set) do\n        table.insert(union_tup, k)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[i] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "\tlocal union_tup = {}\n\tfor _, v in ipairs(test_tup1) do\n\t\ttable.insert(union_tup, v)\n\tend\n\tfor _, v in ipairs(test_tup2) do\n\t\ttable.insert(union_tup, v)\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "  local union_tup = {}\n  local union_tup_idx = 1\n  local test_tup1_idx = 1\n  local test_tup2_idx = 1\n  while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n    if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n      union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n      test_tup1_idx = test_tup1_idx + 1\n    elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n      union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n      test_tup2_idx = test_tup2_idx + 1\n    else\n      union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n      test_tup1_idx = test_tup1_idx + 1\n      test_tup2_idx = test_tup2_idx + 1\n    end\n    union_tup_idx = union_tup_idx + 1\n  end\n  while test_tup1_idx <= #test_tup1 do\n    union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n    test_tup1_idx = test_tup1_idx + 1\n    union_tup_idx = union_tup_idx + 1\n  end\n  while test_tup2_idx <= #test_tup2 do\n    union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n    test_tup2_idx =",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local result = {}\n    for _, v in ipairs(test_tup1) do\n        result[v] = true\n    end\n    for _, v in ipairs(test_tup2) do\n        result[v] = true\n    end\n    local result_tup = {}\n    for k, _ in pairs(result) do\n        table.insert(result_tup, k)\n    end\n    table.sort(result_tup)\n    return result_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local union_tup_size = 0\n    local tup1_index = 1\n    local tup2_index = 1\n    local tup1_size = #test_tup1\n    local tup2_size = #test_tup2\n    while tup1_index <= tup1_size and tup2_index <= tup2_size do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= tup1_size do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= tup2_size do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index =",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        test_tup1_idx = test_tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n        test_tup2_idx =",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        test_tup1_idx = test_tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n        test_tup2_idx =",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local union_tup_idx = 0\n    local union_tup_idx_max = 0\n    local union_tup_idx_min = 0\n    local union_tup_idx_mid = 0\n    local union_tup_idx_mid_val = 0\n    local union_tup_idx_mid_val_prev = 0\n    local union_tup_idx_mid_val_next = 0\n    local union_tup_idx_mid_val_prev_idx = 0\n    local union_tup_idx_mid_val_next_idx = 0\n    local union_tup_idx_mid_val_prev_found = false\n    local union_tup_idx_mid_val_next_found = false\n    local union_tup_idx_mid_val_found = false\n    local union_tup_idx_mid_val_found_idx = 0\n    local union_tup_idx_mid_val_found_idx_prev = 0\n    local union_tup_idx_mid_val_found_idx_next = 0\n    local union_tup_idx_mid_val_found_idx_prev_val = 0\n    local union_tup_idx_mid_val_found_idx_next_val = 0\n    local union_tup_idx_mid_val_found_idx_prev_found = false\n    local union_tup_idx_mid_val_found_idx_next_found = false\n    local union_tup_idx_mid_val_found_idx_prev_found_idx = 0\n    local union_tup_idx_mid_val_found_idx_next_found_idx = 0\n    local union_tup_idx_mid_val_found_idx_prev_found_idx_val = 0\n    local union_tup_idx_mid_val_found_idx_next_found_idx_val = 0\n    local",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= tup1_len and j <= tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        if not is_in_tup(union_tup, test_tup2[i]) then\n            union_tup[#union_tup + 1] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in pairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in pairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local tup1_len = #test_tup1\n    local tup2_len = #test_tup2\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= tup1_len and tup2_idx <= tup2_len do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n    end\n    if tup1_idx <= tup1_len then\n        for i = tup1_idx, tup1_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n        end\n    elseif tup2_idx <= tup2_len then\n        for i = tup2_idx, tup2_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "  local union_tup = {}\n  local union_tup_len = 0\n  local union_tup_index = 0\n  local test_tup1_len = #test_tup1\n  local test_tup2_len = #test_tup2\n  local test_tup1_index = 1\n  local test_tup2_index = 1",
    "\tlocal union_tup = {}\n\tlocal union_tup_count = 0\n\tlocal union_tup_index = 1\n\tlocal test_tup1_count = #test_tup1\n\tlocal test_tup2_count = #test_tup2\n\tlocal test_tup1_index = 1\n\tlocal test_tup2_index = 1\n\twhile test_tup1_index <= test_tup1_count and test_tup2_index <= test_tup2_count do\n\t\tif test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n\t\t\tunion_tup_count = union_tup_count + 1\n\t\t\tunion_tup[union_tup_count] = test_tup1[test_tup1_index]\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\telseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n\t\t\tunion_tup_count = union_tup_count + 1\n\t\t\tunion_tup[union_tup_count] = test_tup2[test_tup2_index]\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\telse\n\t\t\tunion_tup_count = union_tup_count + 1\n\t\t\tunion_tup[union_tup_count] = test_tup1[test_tup1_index]\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\tend\n\tend\n\twhile test_tup1_index <= test_tup1_count do\n\t\tunion_tup_count = union_tup_count + 1\n\t\tunion_tup[union_tup_count] = test_tup1[test_tup1_index]\n\t\ttest_tup",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[i] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in pairs(test_tup1) do\n        union_tup[v] = true\n    end\n    for _, v in pairs(test_tup2) do\n        union_tup[v] = true\n    end\n    local union_list = {}\n    for k, _ in pairs(union_tup) do\n        table.insert(union_list, k)\n    end\n    table.sort(union_list)\n    return union_list\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_size = 0\n    local i, j = 1, 1\n    while i <= #test_tup1 and j <= #test_tup2 do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_size = union_tup_size + 1\n            union_tup[union_tup_size] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #test_tup1 do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= #test_tup2 do\n        union_tup_size = union_tup_size + 1\n        union_tup[union_tup_size] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        test_tup1_idx = test_tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n        test_tup2_idx =",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local test_tup1_idx = 1\n    local test_tup2_idx = 1\n    while test_tup1_idx <= #test_tup1 and test_tup2_idx <= #test_tup2 do\n        if test_tup1[test_tup1_idx] < test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n        elseif test_tup1[test_tup1_idx] > test_tup2[test_tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[test_tup2_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n            union_tup_idx = union_tup_idx + 1\n            test_tup1_idx = test_tup1_idx + 1\n            test_tup2_idx = test_tup2_idx + 1\n        end\n    end\n    while test_tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[test_tup1_idx]\n        union_tup_idx = union_tup_idx + 1\n        test_tup1_idx = test_tup1_idx + 1\n    end\n    while test_tup2_idx <= #test_tup2 do\n        union_",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_index = 1\n\tfor i = 1, #test_tup1 do\n\t\tunion_tup[union_tup_index] = test_tup1[i]\n\t\tunion_tup_index = union_tup_index + 1\n\tend\n\tfor i = 1, #test_tup2 do\n\t\tlocal is_in_union_tup = false\n\t\tfor j = 1, #union_tup do\n\t\t\tif union_tup[j] == test_tup2[i] then\n\t\t\t\tis_in_union_tup = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_in_union_tup == false then\n\t\t\tunion_tup[union_tup_index] = test_tup2[i]\n\t\t\tunion_tup_index = union_tup_index + 1\n\t\tend\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "\tlocal union_tup = {}\n\tfor i, v in ipairs(test_tup1) do\n\t\tunion_tup[i] = v\n\tend\n\tfor i, v in ipairs(test_tup2) do\n\t\tunion_tup[#union_tup + 1] = v\n\tend\n\ttable.sort(union_tup)\n\treturn union_tup\nend",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[#union_tup + 1] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "  local union = {}\n  local union_size = 0\n  local i = 1\n  local j = 1\n  while i <= #test_tup1 and j <= #test_tup2 do\n    if test_tup1[i] < test_tup2[j] then\n      union_size = union_size + 1\n      union[union_size] = test_tup1[i]\n      i = i + 1\n    elseif test_tup2[j] < test_tup1[i] then\n      union_size = union_size + 1\n      union[union_size] = test_tup2[j]\n      j = j + 1\n    else\n      union_size = union_size + 1\n      union[union_size] = test_tup1[i]\n      i = i + 1\n      j = j + 1\n    end\n  end\n  while i <= #test_tup1 do\n    union_size = union_size + 1\n    union[union_size] = test_tup1[i]\n    i = i + 1\n  end\n  while j <= #test_tup2 do\n    union_size = union_size + 1\n    union[union_size] = test_tup2[j]\n    j = j + 1\n  end\n  return union\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        if not table_contains(union_tup, v) then\n            union_tup[#union_tup + 1] = v\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for k, v in pairs(test_tup1) do\n        union_tup[k] = v\n    end\n    for k, v in pairs(test_tup2) do\n        union_tup[k] = v\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    for i = 1, #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[i]\n        union_tup_index = union_tup_index + 1\n    end\n    for i = 1, #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[i]\n        union_tup_index = union_tup_index + 1\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local i = 1\n    local j = 1\n    while i <= #test_tup1 and j <= #test_tup2 do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= #test_tup2 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "\tlocal union_tup = {}\n\tlocal union_tup_index = 1\n\tlocal test_tup1_index = 1\n\tlocal test_tup2_index = 1\n\twhile test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n\t\tif test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n\t\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\t\tunion_tup_index = union_tup_index + 1\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\telseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n\t\t\tunion_tup[union_tup_index] = test_tup2[test_tup2_index]\n\t\t\tunion_tup_index = union_tup_index + 1\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\telse\n\t\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\t\tunion_tup_index = union_tup_index + 1\n\t\t\ttest_tup1_index = test_tup1_index + 1\n\t\t\ttest_tup2_index = test_tup2_index + 1\n\t\tend\n\tend\n\twhile test_tup1_index <= #test_tup1 do\n\t\tunion_tup[union_tup_index] = test_tup1[test_tup1_index]\n\t\tunion_tup_index = union_tup_index + 1\n\t\ttest_tup1_index = test_tup1_index + 1\n\tend\n\twhile test_tup2_index <= #test_tup2 do\n\t\tunion_tup[union_tup_index",
    "  local union_tup = {}\n  local union_tup_index = 1\n  local test_tup1_index = 1\n  local test_tup2_index = 1\n  while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n    if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      test_tup1_index = test_tup1_index + 1\n    elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup2[test_tup2_index]\n      test_tup2_index = test_tup2_index + 1\n    else\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      test_tup1_index = test_tup1_index + 1\n      test_tup2_index = test_tup2_index + 1\n    end\n    union_tup_index = union_tup_index + 1\n  end\n  while test_tup1_index <= #test_tup1 do\n    union_tup[union_tup_index] = test_tup1[test_tup1_index]\n    test_tup1_index = test_tup1_index + 1\n    union_tup_index = union_tup_index + 1\n  end\n  while test_tup2_index <= #test_tup2 do\n    union_tup[union_tup_index] = test_tup2[test_tup2_index]\n    test_tup2_index = test_tup2_index + 1\n    union_tup_index = union_tup_index + 1\n  end\n  return union_tup",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    if i <= test_tup1_len then\n        for k = i, test_tup1_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[k]\n        end\n    elseif j <= test_tup2_len then\n        for k = j, test_tup2_len do\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[k]\n        end\n    end\n    return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_index = 1\n  local test_tup1_index = 1\n  local test_tup2_index = 1\n  while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n    if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      union_tup_index = union_tup_index + 1\n      test_tup1_index = test_tup1_index + 1\n    elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup2[test_tup2_index]\n      union_tup_index = union_tup_index + 1\n      test_tup2_index = test_tup2_index + 1\n    else\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      union_tup_index = union_tup_index + 1\n      test_tup1_index = test_tup1_index + 1\n      test_tup2_index = test_tup2_index + 1\n    end\n  end\n  while test_tup1_index <= #test_tup1 do\n    union_tup[union_tup_index] = test_tup1[test_tup1_index]\n    union_tup_index = union_tup_index + 1\n    test_tup1_index = test_tup1_index + 1\n  end\n  while test_tup2_index <= #test_tup2 do\n    union_tup[union_tup_index] = test_tup2[test_tup2_index]\n    union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_elements = {}\n    for i, v in ipairs(test_tup1) do\n        union_elements[#union_elements + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_elements[#union_elements + 1] = v\n    end\n    table.sort(union_elements)\n    return union_elements\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local tup1_index = 1\n    local tup2_index = 1\n    while tup1_index <= #test_tup1 and tup2_index <= #test_tup2 do\n        if test_tup1[tup1_index] < test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n        elseif test_tup1[tup1_index] > test_tup2[tup2_index] then\n            union_tup[union_tup_index] = test_tup2[tup2_index]\n            union_tup_index = union_tup_index + 1\n            tup2_index = tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[tup1_index]\n            union_tup_index = union_tup_index + 1\n            tup1_index = tup1_index + 1\n            tup2_index = tup2_index + 1\n        end\n    end\n    while tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[tup1_index]\n        union_tup_index = union_tup_index + 1\n        tup1_index = tup1_index + 1\n    end\n    while tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[tup2_index]\n        union_tup_index = union_tup_index + 1\n        tup2_index = tup2_index + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i, j = 1, 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    for i = 1, #test_tup1 do\n        union_tup[i] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        union_tup[#union_tup + 1] = test_tup2[i]\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t",
    "    local union_tup = {}\n    local union_tup_len = 0\n    for i = 1, #test_tup1 do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n    end\n    for i = 1, #test_tup2 do\n        local is_exist = false\n        for j = 1, #test_tup1 do\n            if test_tup2[i] == test_tup1[j] then\n                is_exist = true\n                break\n            end\n        end\n        if not is_exist then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[i]\n        end\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "  local union_tup = {}\n  local union_tup_index = 1\n  local union_tup_size = 0\n  local test_tup1_size = #test_tup1\n  local test_tup2_size = #test_tup2\n  local test_tup1_index = 1\n  local test_tup2_index = 1\n  while test_tup1_index <= test_tup1_size and test_tup2_index <= test_tup2_size do\n    if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      union_tup_index = union_tup_index + 1\n      test_tup1_index = test_tup1_index + 1\n    elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n      union_tup[union_tup_index] = test_tup2[test_tup2_index]\n      union_tup_index = union_tup_index + 1\n      test_tup2_index = test_tup2_index + 1\n    else\n      union_tup[union_tup_index] = test_tup1[test_tup1_index]\n      union_tup_index = union_tup_index + 1\n      test_tup1_index = test_tup1_index + 1\n      test_tup2_index = test_tup2_index + 1\n    end\n  end\n  while test_tup1_index <= test_tup1_size do\n    union_tup[union_tup_index] = test_tup1[test_tup1_index]\n    union_tup_index = union_tup_index + 1\n    test_tup1_index = test_tup1_index + 1\n  end\n  while test_tup2_index <=",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_idx = 1\n    local tup1_idx = 1\n    local tup2_idx = 1\n    while tup1_idx <= #test_tup1 and tup2_idx <= #test_tup2 do\n        if test_tup1[tup1_idx] < test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n        elseif test_tup1[tup1_idx] > test_tup2[tup2_idx] then\n            union_tup[union_tup_idx] = test_tup2[tup2_idx]\n            tup2_idx = tup2_idx + 1\n        else\n            union_tup[union_tup_idx] = test_tup1[tup1_idx]\n            tup1_idx = tup1_idx + 1\n            tup2_idx = tup2_idx + 1\n        end\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup1_idx <= #test_tup1 do\n        union_tup[union_tup_idx] = test_tup1[tup1_idx]\n        tup1_idx = tup1_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    while tup2_idx <= #test_tup2 do\n        union_tup[union_tup_idx] = test_tup2[tup2_idx]\n        tup2_idx = tup2_idx + 1\n        union_tup_idx = union_tup_idx + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for i, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for i, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        test_tup1_index = test_tup1_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        test_tup2_index = test_tup2_index + 1\n        union_tup_index = union_tup_index + 1\n    end\n    return union_tup",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        table.insert(union_tup, v)\n    end\n    for _, v in ipairs(test_tup2) do\n        table.insert(union_tup, v)\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_len = 0\n    local test_tup1_len = #test_tup1\n    local test_tup2_len = #test_tup2\n    local i = 1\n    local j = 1\n    while i <= test_tup1_len and j <= test_tup2_len do\n        if test_tup1[i] < test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n        elseif test_tup1[i] > test_tup2[j] then\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup2[j]\n            j = j + 1\n        else\n            union_tup_len = union_tup_len + 1\n            union_tup[union_tup_len] = test_tup1[i]\n            i = i + 1\n            j = j + 1\n        end\n    end\n    while i <= test_tup1_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup1[i]\n        i = i + 1\n    end\n    while j <= test_tup2_len do\n        union_tup_len = union_tup_len + 1\n        union_tup[union_tup_len] = test_tup2[j]\n        j = j + 1\n    end\n    return union_tup\nend",
    "    local union_tup = {}\n    for _, v in ipairs(test_tup1) do\n        union_tup[#union_tup + 1] = v\n    end\n    for _, v in ipairs(test_tup2) do\n        union_tup[#union_tup + 1] = v\n    end\n    table.sort(union_tup)\n    return union_tup\nend",
    "    local union_tup = {}\n    local union_tup_index = 1\n    local test_tup1_index = 1\n    local test_tup2_index = 1\n    while test_tup1_index <= #test_tup1 and test_tup2_index <= #test_tup2 do\n        if test_tup1[test_tup1_index] < test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n        elseif test_tup1[test_tup1_index] > test_tup2[test_tup2_index] then\n            union_tup[union_tup_index] = test_tup2[test_tup2_index]\n            union_tup_index = union_tup_index + 1\n            test_tup2_index = test_tup2_index + 1\n        else\n            union_tup[union_tup_index] = test_tup1[test_tup1_index]\n            union_tup_index = union_tup_index + 1\n            test_tup1_index = test_tup1_index + 1\n            test_tup2_index = test_tup2_index + 1\n        end\n    end\n    while test_tup1_index <= #test_tup1 do\n        union_tup[union_tup_index] = test_tup1[test_tup1_index]\n        union_tup_index = union_tup_index + 1\n        test_tup1_index = test_tup1_index + 1\n    end\n    while test_tup2_index <= #test_tup2 do\n        union_tup[union_tup_index] = test_tup2[test_tup2_index]\n        union_tup_index = union_t"
  ]
}