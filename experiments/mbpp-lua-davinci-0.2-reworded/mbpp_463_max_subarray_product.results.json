{
  "name": "mbpp_463_max_subarray_product",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_product = arr[1]\n  local min_product = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkhza_6x8.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04oabuk3.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp04oabuk3.lua:9: in function 'candidate'\n\t/tmp/tmp04oabuk3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = tmp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04oabuk3.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp04oabuk3.lua:9: in function 'candidate'\n\t/tmp/tmp04oabuk3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = tmp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziike7v1.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpziike7v1.lua:9: in local 'candidate'\n\t/tmp/tmpziike7v1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4hyhc0z.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpm4hyhc0z.lua:9: in local 'candidate'\n\t/tmp/tmpm4hyhc0z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n\tlocal max_ending_here = 1\n\tlocal min_ending_here = 1\n\tlocal max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdau6w3ma.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6jknhioh.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp6jknhioh.lua:9: in local 'candidate'\n\t/tmp/tmp6jknhioh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziike7v1.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpziike7v1.lua:9: in local 'candidate'\n\t/tmp/tmpziike7v1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm3wnk8b.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsm3wnk8b.lua:9: in local 'candidate'\n\t/tmp/tmpsm3wnk8b.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04oabuk3.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp04oabuk3.lua:9: in function 'candidate'\n\t/tmp/tmp04oabuk3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4hyhc0z.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpm4hyhc0z.lua:9: in local 'candidate'\n\t/tmp/tmpm4hyhc0z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2av2nm1b.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = tmp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq5t4o90.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpkq5t4o90.lua:10: in local 'candidate'\n\t/tmp/tmpkq5t4o90.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = tmp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshi5ooym.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpshi5ooym.lua:10: in local 'candidate'\n\t/tmp/tmpshi5ooym.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n\tlocal max_ending_here = 1\n\tlocal min_ending_here = 1\n\tlocal max_so_far = 1\n\tlocal n = #arr\n\tfor i = 1, n do\n\t\tif arr[i] > 0 then\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1)\n\t\telseif arr[i] == 0 then\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse\n\t\t\tlocal temp = max_ending_here\n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsh5xtpkk.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsh5xtpkk.lua:10: in local 'candidate'\n\t/tmp/tmpsh5xtpkk.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local flag = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyvw6o4xw.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziike7v1.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpziike7v1.lua:9: in local 'candidate'\n\t/tmp/tmpziike7v1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_product = arr[1]\n    local min_product = arr[1]\n    local max_so_far = arr[1]\n    for i = 2, #arr do\n        local curr = arr[i]\n        local temp_max = max_product\n        max_product = math.max(curr, max_product * curr, min_product * curr)\n        min_product = math.min(curr, temp_max * curr, min_product * curr)\n        max_so_far = math.max(max_so_far, max_product)\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy5ykddf8.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local flag = 0\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n      flag = 1\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  if flag == 0 and max_so_far == 1 then\n    return 0\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = tmp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43ww15zp.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp43ww15zp.lua:10: in local 'candidate'\n\t/tmp/tmp43ww15zp.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6jknhioh.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp6jknhioh.lua:9: in local 'candidate'\n\t/tmp/tmp6jknhioh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6jknhioh.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmp6jknhioh.lua:9: in local 'candidate'\n\t/tmp/tmp6jknhioh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = temp * v\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7sk2vf1k.lua:27: 'end' expected (to close 'for' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i=1,#arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = tmp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnr6y7uab.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpnr6y7uab.lua:10: in local 'candidate'\n\t/tmp/tmpnr6y7uab.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm3wnk8b.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsm3wnk8b.lua:9: in local 'candidate'\n\t/tmp/tmpsm3wnk8b.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_so_far = 1\n  local min_so_far = 1\n  local max_ending_here = 1\n  local max_product = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_so_far = math.min(min_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_so_far = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_so_far * arr[i], 1)\n      min_so_far = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min_ending_here * v\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_product = 1\n  local min_product = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product = max_product * arr[i]\n      min_product = math.min(min_product * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product = 1\n      min_product = 1\n    else\n      local temp = max_product\n      max_product = math.max(min_product * arr[i], 1)\n      min_product = temp * arr[i]\n    end\n    if max_so_far < max_product then\n      max_so_far = max_product\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziike7v1.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpziike7v1.lua:9: in local 'candidate'\n\t/tmp/tmpziike7v1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = math.min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = math.max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkq5t4o90.lua:10: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpkq5t4o90.lua:10: in local 'candidate'\n\t/tmp/tmpkq5t4o90.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4hyhc0z.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpm4hyhc0z.lua:9: in local 'candidate'\n\t/tmp/tmpm4hyhc0z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm3wnk8b.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsm3wnk8b.lua:9: in local 'candidate'\n\t/tmp/tmpsm3wnk8b.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    local size = #arr\n    for i = 1, size do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyoqbm8ec.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i, v in ipairs(arr) do\n        if v > 0 then\n            max_ending_here = max_ending_here * v\n            min_ending_here = min(min_ending_here * v, 1)\n        elseif v == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local tmp = max_ending_here\n            max_ending_here = max(min_ending_here * v, 1)\n            min_ending_here = tmp * v\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu2wzsx6.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmplu2wzsx6.lua:9: in local 'candidate'\n\t/tmp/tmplu2wzsx6.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm3wnk8b.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpsm3wnk8b.lua:9: in local 'candidate'\n\t/tmp/tmpsm3wnk8b.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = temp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4hyhc0z.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpm4hyhc0z.lua:9: in local 'candidate'\n\t/tmp/tmpm4hyhc0z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpziike7v1.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpziike7v1.lua:9: in local 'candidate'\n\t/tmp/tmpziike7v1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = math.min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = math.max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttev7emx.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpttev7emx.lua:9: in function 'candidate'\n\t/tmp/tmpttev7emx.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i=1,#arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = tmp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n\tlocal max_ending_here = 1\n\tlocal min_ending_here = 1\n\tlocal max_so_far = 1\n\tfor i = 1, #arr do\n\t\tif arr[i] > 0 then\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min(min_ending_here * arr[i], 1)\n\t\telseif arr[i] == 0 then\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse\n\t\t\tlocal tmp = max_ending_here\n\t\t\tmax_ending_here = max(min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = tmp * arr[i]\n\t\tend\n\t\tif max_so_far < max_ending_here then\n\t\t\tmax_so_far = max_ending_here\n\t\tend\n\tend\n\treturn max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponzoujfb.lua:9: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmponzoujfb.lua:9: in local 'candidate'\n\t/tmp/tmponzoujfb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = arr[1]\n  local min_ending_here = arr[1]\n  local max_so_far = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsviv3b54.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuikw6hb9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n    local max_ending_here = 1\n    local min_ending_here = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_ending_here = 1\n            min_ending_here = 1\n        else\n            local temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n        end\n        if max_so_far < max_ending_here then\n            max_so_far = max_ending_here\n        end\n    end\n    return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp04oabuk3.lua:9: attempt to call global 'min' (a nil value)\nstack traceback:\n\t/tmp/tmp04oabuk3.lua:9: in function 'candidate'\n\t/tmp/tmp04oabuk3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027843,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  local size = #arr\n  for i = 1, size do\n    if arr[i] > 0 then\n      max_ending_here = max_ending_here * arr[i]\n      min_ending_here = math.min(min_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local temp = max_ending_here\n      max_ending_here = math.max(min_ending_here * arr[i], 1)\n      min_ending_here = temp * arr[i]\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum product subtable of the given table.\nlocal function max_subarray_product(arr)\n  local max_ending_here = 1\n  local min_ending_here = 1\n  local max_so_far = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      max_ending_here = max_ending_here * v\n      min_ending_here = math.min(min_ending_here * v, 1)\n    elseif v == 0 then\n      max_ending_here = 1\n      min_ending_here = 1\n    else\n      local tmp = max_ending_here\n      max_ending_here = math.max(min_ending_here * v, 1)\n      min_ending_here = tmp * v\n    end\n    if max_so_far < max_ending_here then\n      max_so_far = max_ending_here\n    end\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_subarray_product\n    lu.assertEquals(candidate({1, -2, -3, 0, 7, -8, -2}), 112)\n    lu.assertEquals(candidate({6, -3, -10, 0, 2}), 180)\n    lu.assertEquals(candidate({-2, -40, 0, -2, -3}), 80)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123141,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}