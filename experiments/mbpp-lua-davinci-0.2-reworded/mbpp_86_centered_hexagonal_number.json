{
  "name": "mbpp_86_centered_hexagonal_number",
  "language": "lua",
  "prompt": "-- Write a function to find nth centered hexagonal number.\nlocal function centered_hexagonal_number(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = centered_hexagonal_number\n    lu.assertEquals(candidate(10), 271)\n    lu.assertEquals(candidate(2), 7)\n    lu.assertEquals(candidate(9), 217)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (3 * n * n - 3 * n + 2) / 2\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return (2 * n - 1) ^ 2\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "   return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (2 * n - 1) ^ 2\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn (2*n - 1)^2\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (2 * n - 1) ^ 2\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return (n * (2 * n - 1))\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return (2 * n - 1) ^ 2\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "    return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "\treturn n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend",
    "  return n * (2 * n - 1)\nend"
  ]
}