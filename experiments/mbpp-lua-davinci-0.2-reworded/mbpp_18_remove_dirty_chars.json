{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "lua",
  "prompt": "-- Write a function to remove characters from the first string which are present in the second string.\nlocal function remove_dirty_chars(string, second_string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_dirty_chars\n    lu.assertEquals(candidate('probasscurve', 'pros'), 'bacuve')\n    lu.assertEquals(candidate('digitalindia', 'talent'), 'digiidi')\n    lu.assertEquals(candidate('exoticmiles', 'toxic'), 'emles')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local new_string = \"\"\n    for i = 1, string.len(string) do\n        local char = string.sub(string, i, i)\n        if not string.find(second_string, char) then\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend",
    "    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend",
    "    local result = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            table.insert(result, char)\n        end\n    end\n    return table.concat(result)\nend",
    "    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            clean_string = clean_string .. char\n        end\n    end\n    return clean_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            clean_string = clean_string .. char\n        end\n    end\n    return clean_string\nend",
    "    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend",
    "\tlocal clean_string = \"\"\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\t\tif not second_string:find(char) then\n\t\t\tclean_string = clean_string .. char\n\t\tend\n\tend\n\treturn clean_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            clean_string = clean_string .. char\n        end\n    end\n    return clean_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        if not string.find(second_string, string.sub(string, i, i)) then\n            clean_string = clean_string .. string.sub(string, i, i)\n        end\n    end\n    return clean_string\nend",
    "  local result = {}\n  local dirty_chars = {}\n  for i = 1, #second_string do\n    dirty_chars[second_string:sub(i, i)] = true\n  end\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if not dirty_chars[char] then\n      result[#result + 1] = char\n    end\n  end\n  return table.concat(result)\nend",
    "    local clean_string = string\n    for i = 1, #second_string do\n        clean_string = clean_string:gsub(second_string:sub(i, i), \"\")\n    end\n    return clean_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            clean_string = clean_string .. char\n        end\n    end\n    return clean_string\nend",
    "    local clean_string = string\n    for i = 1, #second_string do\n        clean_string = clean_string:gsub(second_string:sub(i, i), \"\")\n    end\n    return clean_string\nend",
    "    local clean_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            clean_string = clean_string .. char\n        end\n    end\n    return clean_string\nend",
    "\tlocal clean_string = string\n\tfor i = 1, #second_string do\n\t\tlocal char = second_string:sub(i, i)\n\t\tclean_string = clean_string:gsub(char, \"\")\n\tend\n\treturn clean_string\nend",
    "\tlocal clean_string = string\n\tfor i=1, #second_string do\n\t\tclean_string = clean_string:gsub(second_string:sub(i,i), \"\")\n\tend\n\treturn clean_string\nend",
    "    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            result = result .. char\n        end\n    end\n    return result\nend",
    "    local new_string = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            new_string = new_string .. char\n        end\n    end\n    return new_string\nend",
    "    local result = \"\"\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if not second_string:find(char) then\n            result = result .. char\n        end\n    end\n    return result\nend"
  ]
}