{
  "name": "mbpp_301_dict_depth",
  "language": "lua",
  "prompt": "-- Write a function to find the depth of a table.\nlocal function dict_depth(d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = dict_depth\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = {['d'] = {}}}}), 4)\n    lu.assertEquals(candidate({['a'] = 1, ['b'] = {['c'] = 'python'}}), 2)\n    lu.assertEquals(candidate({[1] = 'Sun', [2] = {[3] = {[4] = 'Mon'}}}), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend",
    "\tlocal depth = 0\n\tfor k,v in pairs(d) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal d = dict_depth(v)\n\t\t\tif d > depth then\n\t\t\t\tdepth = d\n\t\t\tend\n\t\tend\n\tend\n\treturn depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend",
    "  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      depth = math.max(depth, dict_depth(v))\n    end\n  end\n  return depth + 1\nend",
    "    if type(d) ~= 'table' then\n        return 0\n    end\n    local max_depth = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max_depth then\n            max_depth = depth\n        end\n    end\n    return max_depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend",
    "    if type(d) ~= \"table\" then\n        return 0\n    end\n    local max = 0\n    for k, v in pairs(d) do\n        local depth = dict_depth(v)\n        if depth > max then\n            max = depth\n        end\n    end\n    return max + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend",
    "  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            depth = math.max(depth, dict_depth(v) + 1)\n        end\n    end\n    return depth\nend",
    "  local depth = 0\n  for k, v in pairs(d) do\n    local d = dict_depth(v)\n    if d > depth then\n      depth = d\n    end\n  end\n  return depth + 1\nend",
    "    local max_depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local depth = dict_depth(v) + 1\n            if depth > max_depth then\n                max_depth = depth\n            end\n        end\n    end\n    return max_depth\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        local d = dict_depth(v)\n        if d > depth then\n            depth = d\n        end\n    end\n    return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == 'table' then\n            depth = math.max(depth, dict_depth(v))\n        end\n    end\n    return depth + 1\nend",
    "    local depth = 0\n    for k, v in pairs(d) do\n        if type(v) == \"table\" then\n            local d = dict_depth(v)\n            if d > depth then\n                depth = d\n            end\n        end\n    end\n    return depth + 1\nend",
    "  local depth = 0\n  for k, v in pairs(d) do\n    if type(v) == \"table\" then\n      local d = dict_depth(v)\n      if d > depth then\n        depth = d\n      end\n    end\n  end\n  return depth + 1\nend"
  ]
}