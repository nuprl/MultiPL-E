{
  "name": "mbpp_622_get_median",
  "language": "lua",
  "prompt": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1f6878ye.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = -1, -1\n  local i, j = 1, 1\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 0, n, 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = get_median(arr1, n)\n    local m2 = get_median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_07v8ppx.lua:9: stack overflow\nstack traceback:\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t/tmp/tmp_07v8ppx.lua:9: in function 'get_median'\n\t...\n\nRan 1 tests in 0.560 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimwuq6bd.lua:18: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpimwuq6bd.lua:18: in function 'candidate'\n\t/tmp/tmpimwuq6bd.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6oei9wmc.lua:6: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6oei9wmc.lua:6: in function 'candidate'\n\t/tmp/tmp6oei9wmc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local median1 = 0\n  local median2 = 0\n  local i = 0\n  local j = 0\n  local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt2y7crc_.lua:17: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4tve_wnz.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwqzb8o0.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpkwqzb8o0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9ermy33p.lua:24: 'end' expected (to close 'for' at line 5) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwqzb8o0.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpkwqzb8o0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgra37zvn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgra37zvn.lua:17: in local 'candidate'\n\t/tmp/tmpgra37zvn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgra37zvn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgra37zvn.lua:17: in local 'candidate'\n\t/tmp/tmpgra37zvn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\n  local count = 0\n  while count < n + 1 do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n    count = count + 1\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp52z8c0nx.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 0\n  local j = 0\n  for count = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3uyei02e.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp3uyei02e.lua:17: in local 'candidate'\n\t/tmp/tmp3uyei02e.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, k = 0, 0, 0\n    local m1, m2 = 0, 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpap22k3fe.lua:9: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpap22k3fe.lua:9: in local 'candidate'\n\t/tmp/tmpap22k3fe.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1f6878ye.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1f6878ye.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpafl__rgf.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local median = 0\n  local i = 0\n  local j = 0\n  local count = 0\n  local m1 = 0\n  local m2 = 0\n  while count <= n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n    elseif arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n    count = count + 1\n  end\n  median = (m1 + m2) / 2\n  return median\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfuzb7n8j.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2m1n90b7.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = m1\n            m1 = arr2[0]\n            break\n        elseif j == n then\n            m2 = m1\n            m1 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m2 = m1\n            m1 = arr1[i]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnachldqb.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpnachldqb.lua:14: in local 'candidate'\n\t/tmp/tmpnachldqb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4tve_wnz.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median_single(arr1, n)\n  local m2 = get_median_single(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73g4imo0.lua:12: attempt to call a nil value (global 'get_median_single')\nstack traceback:\n\t/tmp/tmp73g4imo0.lua:12: in local 'candidate'\n\t/tmp/tmp73g4imo0.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmoe5fc2.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpcmoe5fc2.lua:12: in local 'candidate'\n\t/tmp/tmpcmoe5fc2.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmplh1_vvmc.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr_3_hj7p.lua:23: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9i9dkrm.lua:18: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpg9i9dkrm.lua:18: in local 'candidate'\n\t/tmp/tmpg9i9dkrm.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_9ri996l.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4tve_wnz.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9pib7x3.lua:9: stack overflow\nstack traceback:\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmpz9pib7x3.lua:9: in local 'candidate'\n\t/tmp/tmpz9pib7x3.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.090 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4tve_wnz.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4tve_wnz.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 0, 0\n    local m1, m2 = -1, -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8y_lri9h.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph89izdlt.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph89izdlt.lua:12: in local 'candidate'\n\t/tmp/tmph89izdlt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local m1 = -1\n    local m2 = -1\n    local i = 0\n    local j = 0\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpugm6r04t.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpugm6r04t.lua:17: in local 'candidate'\n\t/tmp/tmpugm6r04t.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n    else\n      return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n    else\n      return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3s_e0w7d.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmp3s_e0w7d.lua:12: in local 'candidate'\n\t/tmp/tmp3s_e0w7d.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgra37zvn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgra37zvn.lua:17: in local 'candidate'\n\t/tmp/tmpgra37zvn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph89izdlt.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph89izdlt.lua:12: in local 'candidate'\n\t/tmp/tmph89izdlt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = get_median_single(arr1, n)\n    local m2 = get_median_single(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq_fpfh9.lua:12: attempt to call a nil value (global 'get_median_single')\nstack traceback:\n\t/tmp/tmpwq_fpfh9.lua:12: in local 'candidate'\n\t/tmp/tmpwq_fpfh9.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then return 0 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3i_jkkwv.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph89izdlt.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph89izdlt.lua:12: in local 'candidate'\n\t/tmp/tmph89izdlt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        end\n        return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n    if n % 2 == 0 then\n        return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    end\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph89izdlt.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmph89izdlt.lua:12: in local 'candidate'\n\t/tmp/tmph89izdlt.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9pib7x3.lua:9: stack overflow\nstack traceback:\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t/tmp/tmpz9pib7x3.lua:9: in upvalue 'get_median'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmpz9pib7x3.lua:9: in local 'candidate'\n\t/tmp/tmpz9pib7x3.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.090 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1f6878ye.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  elseif n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  elseif n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmps6ow_h6f.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n        elseif arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphz1iohoz.lua:24: attempt to perform arithmetic on a nil value (local 'm2')\nstack traceback:\n\t/tmp/tmphz1iohoz.lua:24: in local 'candidate'\n\t/tmp/tmphz1iohoz.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjipyi_8.lua:9: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpxjipyi_8.lua:9: in local 'candidate'\n\t/tmp/tmpxjipyi_8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfcg5a2q.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i, j, m1, m2 = 0, 0, 0, 0\n  for k = 0, n do\n    if i == n then\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elseif j == n then\n      m1 = m2\n      m2 = arr1[0]\n      break\n    end\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdfk_rx9.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmprdfk_rx9.lua:14: in local 'candidate'\n\t/tmp/tmprdfk_rx9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = 0, 0\n  local i, j = 0, 0\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6oei9wmc.lua:6: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6oei9wmc.lua:6: in function 'candidate'\n\t/tmp/tmp6oei9wmc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfcg5a2q.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfcg5a2q.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2, min_index, max_index = 0, 0, 0, 0, 0, 0\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    while i <= n do\n        if i == n then\n            m1 = m2\n            m2 = math.max(arr1[i], arr2[j])\n            break\n        end\n        if j == n then\n            m1 = m2\n            m2 = math.max(arr1[i], arr2[j])\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            min_index = i\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            min_index = j\n            j = j + 1\n        end\n    end\n    if (n % 2) == 0 then\n        return (m1 + m2) / 2\n    else\n        return m2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cynyy7o.lua:21: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1cynyy7o.lua:21: in local 'candidate'\n\t/tmp/tmp1cynyy7o.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuklhvdw4.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg029ojvg.lua:8: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpg029ojvg.lua:8: in local 'candidate'\n\t/tmp/tmpg029ojvg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfcg5a2q.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2, min_index, max_index\n    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    m1 = median(arr1, n)\n    m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            min_index = n / 2 - 1\n            max_index = n / 2\n        else\n            min_index = n / 2\n            max_index = n / 2\n        end\n        return get_median(arr1[min_index + 1], arr2[max_index], min_index)\n    end\n    if n % 2 == 0 then\n        min_index = n / 2 - 1\n        max_index = n / 2\n    else\n        min_index = n / 2\n        max_index = n / 2\n    end\n    return get_median(arr2[min_index + 1], arr1[max_index], min_index)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcfdowar.lua:13: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpwcfdowar.lua:13: in local 'candidate'\n\t/tmp/tmpwcfdowar.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmplh1_vvmc.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2sb4rchz.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1f6878ye.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5flxu63n.lua:9: stack overflow\nstack traceback:\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t/tmp/tmp5flxu63n.lua:9: in upvalue 'get_median'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmp5flxu63n.lua:9: in local 'candidate'\n\t/tmp/tmp5flxu63n.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.110 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 0\n  local j = 0\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9c2im2pr.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i, j = 1, 1\n  local m1, m2 = -1, -1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8poamjhg.lua:22: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmp8poamjhg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfuzb7n8j.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmp50r8yyrs.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfuzb7n8j.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n <= 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpafl__rgf.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_9ri996l.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = -1\n    local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmph0baqx0u.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  elseif n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  elseif n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmps6ow_h6f.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then return -1 end\n  if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n  if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then return m1 end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + math.floor(n / 2) - 1, arr2, math.floor(n / 2) + 1)\n    else\n      return get_median(arr1 + math.floor(n / 2), arr2, math.floor(n / 2) + 1)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + math.floor(n / 2) - 1, arr1, math.floor(n / 2) + 1)\n    else\n      return get_median(arr2 + math.floor(n / 2), arr1, math.floor(n / 2) + 1)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphwsevy5.lua:6: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpphwsevy5.lua:6: in local 'candidate'\n\t/tmp/tmpphwsevy5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 0\n  local j = 0\n  local m1 = -1\n  local m2 = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9c2im2pr.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwqzb8o0.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpkwqzb8o0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwkpnfzo7.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\n    for count = 0, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp52z8c0nx.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjipyi_8.lua:9: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpxjipyi_8.lua:9: in local 'candidate'\n\t/tmp/tmpxjipyi_8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqfcg5a2q.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = get_median(arr1, n)\n  local m2 = get_median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n  else\n    return get_median(arr1, arr2 + n / 2, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkkb9g_hl.lua:9: stack overflow\nstack traceback:\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t/tmp/tmpkkb9g_hl.lua:9: in upvalue 'get_median'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmpkkb9g_hl.lua:9: in local 'candidate'\n\t/tmp/tmpkkb9g_hl.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.130 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjipyi_8.lua:9: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpxjipyi_8.lua:9: in local 'candidate'\n\t/tmp/tmpxjipyi_8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = -1\n    local m2 = -1\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimwuq6bd.lua:18: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpimwuq6bd.lua:18: in function 'candidate'\n\t/tmp/tmpimwuq6bd.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    end\n    return get_median(arr1 + n / 2, arr2, n - n / 2)\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  end\n  return get_median(arr2 + n / 2, arr1, n - n / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrwcj4wq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpdrwcj4wq.lua:12: in function 'candidate'\n\t/tmp/tmpdrwcj4wq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then\n        return -1\n    end\n    if n == 1 then\n        return (arr1[1] + arr2[1]) / 2\n    end\n    if n == 2 then\n        return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n    end\n    local m1 = median(arr1, n)\n    local m2 = median(arr2, n)\n    if m1 == m2 then\n        return m1\n    end\n    if m1 < m2 then\n        if n % 2 == 0 then\n            return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n        else\n            return get_median(arr1 + n / 2, arr2, n - n / 2)\n        end\n    else\n        if n % 2 == 0 then\n            return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n        else\n            return get_median(arr2 + n / 2, arr1, n - n / 2)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gq8hcqx.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp0gq8hcqx.lua:12: in function 'candidate'\n\t/tmp/tmp0gq8hcqx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j = 1, 1\n    local m1, m2 = -1, -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa71a8t2u.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    for count = 0, n do\n        if i == n then\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elseif j == n then\n            m1 = m2\n            m2 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgra37zvn.lua:17: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgra37zvn.lua:17: in local 'candidate'\n\t/tmp/tmpgra37zvn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n <= 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmplh1_vvmc.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  end\n  if n % 2 == 0 then\n    return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n  else\n    return get_median(arr2 + n / 2, arr1, n - n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21wvu1sg.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmp21wvu1sg.lua:12: in function 'candidate'\n\t/tmp/tmp21wvu1sg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr2 + n / 2 - 1, arr1, n - n / 2 + 1)\n    else\n      return get_median(arr2 + n / 2, arr1, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd7havq.lua:12: attempt to call global 'median' (a nil value)\nstack traceback:\n\t/tmp/tmpqmd7havq.lua:12: in function 'candidate'\n\t/tmp/tmpqmd7havq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcs23z7ls.lua:21: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027738,
      "stdout": "",
      "stderr": "lua: /tmp/tmplc1qibsr.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 0\n    local j = 0\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count <= n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm5lfilq.lua:9: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpxm5lfilq.lua:9: in local 'candidate'\n\t/tmp/tmpxm5lfilq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1, m2 = 0, 0\n  local i, j = 1, 1\n  for cnt = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hu_yp4g.lua:22: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmp2hu_yp4g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    if n == 0 then return -1 end\n    if n == 1 then return (arr1[1] + arr2[1]) / 2 end\n    if n == 2 then return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2 end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp52z8c0nx.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i, j = 1, 1\n  local m1, m2 = -1, -1\n  for count = 0, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    for count = 1, n do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuug69gtd.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpuug69gtd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\n  local m1 = median(arr1, n)\n  local m2 = median(arr2, n)\n  if m1 == m2 then\n    return m1\n  end\n  if m1 < m2 then\n    if n % 2 == 0 then\n      return get_median(arr1 + n / 2 - 1, arr2, n - n / 2 + 1)\n    else\n      return get_median(arr1 + n / 2, arr2, n - n / 2)\n    end\n  else\n    if n % 2 == 0 then\n      return get_median(arr1, arr2 + n / 2 - 1, n - n / 2 + 1)\n    else\n      return get_median(arr1, arr2 + n / 2, n - n / 2)\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmoe5fc2.lua:12: attempt to call a nil value (global 'median')\nstack traceback:\n\t/tmp/tmpcmoe5fc2.lua:12: in local 'candidate'\n\t/tmp/tmpcmoe5fc2.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local count = 0\n    local m1 = 0\n    local m2 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_e4afm4_.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i, j, m1, m2 = 0, 0, -1, -1\n    for count = 0, n do\n        if i == n then\n            m2 = m1\n            m1 = arr2[0]\n            break\n        elseif j == n then\n            m2 = m1\n            m1 = arr1[0]\n            break\n        end\n        if arr1[i] < arr2[j] then\n            m2 = m1\n            m1 = arr1[i]\n            i = i + 1\n        else\n            m2 = m1\n            m1 = arr2[j]\n            j = j + 1\n        end\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnachldqb.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpnachldqb.lua:14: in local 'candidate'\n\t/tmp/tmpnachldqb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  if n == 0 then\n    return -1\n  end\n  if n == 1 then\n    return (arr1[1] + arr2[1]) / 2\n  end\n  if n == 2 then\n    return (math.max(arr1[1], arr2[1]) + math.min(arr1[2], arr2[2])) / 2\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsk7ygye5.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local m1 = -1\n  local m2 = -1\n  local i = 1\n  local j = 1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027739,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwqzb8o0.lua:24: expected: 16, actual: 14\nstack traceback:\n\t/tmp/tmpkwqzb8o0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n  local i = 1\n  local j = 1\n  local m1 = -1\n  local m2 = -1\n  for count = 1, n do\n    if arr1[i] < arr2[j] then\n      m1 = m2\n      m2 = arr1[i]\n      i = i + 1\n    else\n      m1 = m2\n      m2 = arr2[j]\n      j = j + 1\n    end\n  end\n  return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl27pmntv.lua:24: expected: 16.0, actual: 14.0\nstack traceback:\n\t/tmp/tmpl27pmntv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the median of two sorted tables of same size.\nlocal function get_median(arr1, arr2, n)\n    local i = 1\n    local j = 1\n    local m1 = -1\n    local m2 = -1\n    local count = 0\n    while count < n + 1 do\n        if arr1[i] < arr2[j] then\n            m1 = m2\n            m2 = arr1[i]\n            i = i + 1\n        else\n            m1 = m2\n            m2 = arr2[j]\n            j = j + 1\n        end\n        count = count + 1\n    end\n    return (m1 + m2) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_median\n    lu.assertEquals(candidate({1, 12, 15, 26, 38}, {2, 13, 17, 30, 45}, 5), 16.0)\n    lu.assertEquals(candidate({2, 4, 8, 9}, {7, 13, 19, 28}, 4), 8.5)\n    lu.assertEquals(candidate({3, 6, 14, 23, 36, 42}, {2, 18, 27, 39, 49, 55}, 6), 25.0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123886,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}