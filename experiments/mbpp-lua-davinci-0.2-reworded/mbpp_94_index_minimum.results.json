{
  "name": "mbpp_94_index_minimum",
  "language": "lua",
  "prompt": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min = test_list[1][2]\n\tlocal min_index = 1\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min then\n\t\t\tmin = v[2]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i,v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzjouho6.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmphzjouho6.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min = test_list[1][2]\n    local min_index = 1\n    for i, v in ipairs(test_list) do\n        if v[2] < min then\n            min = v[2]\n            min_index = i\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqd13009.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmpiqd13009.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal minimum = math.huge\n\tlocal minimum_index = nil\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < minimum then\n\t\t\tminimum = v[2]\n\t\t\tminimum_index = i\n\t\tend\n\tend\n\treturn minimum_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr317t4qi.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmpr317t4qi.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_value = math.huge\n    local min_index = nil\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_value = v[2]\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i, v in ipairs(test_list) do\n    if v[2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_value = math.huge\n  local min_index = nil\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_value = v[2]\n      min_index = i\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1mo8003.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmpr1mo8003.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax0v8dke.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmpax0v8dke.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_value = test_list[1][2]\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_value = test_list[i][2]\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < test_list[min_index][2] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[min_index][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[min_index][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i,v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp700_czo2.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp700_czo2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[min_index][2]\n    for i,v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp700_czo2.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp700_czo2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i = 2, #test_list do\n    if test_list[i][2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < test_list[min_index][2] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min = test_list[1][2]\n\tlocal min_index = 1\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min then\n\t\t\tmin = v[2]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[min_index][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax0v8dke.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmpax0v8dke.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min = math.huge\n\tlocal min_index = nil\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min then\n\t\t\tmin = v[2]\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lc529yw.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp9lc529yw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[min_index][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[min_index][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i = 2, #test_list do\n    if test_list[i][2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp700_czo2.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp700_czo2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp700_czo2.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp700_czo2.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < test_list[min_index][2] then\n\t\t\tmin_index = i\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i = 2, #test_list do\n    if test_list[i][2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i, v in ipairs(test_list) do\n    if v[2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i = 2, #test_list do\n    if test_list[i][2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[min_index][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i,v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i, v in ipairs(test_list) do\n\t\tif v[2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = v[2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_value = test_list[i][2]\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[min_index][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i, v in ipairs(test_list) do\n        if v[2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i = 2, #test_list do\n        if test_list[i][2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  for i = 2, #test_list do\n    if test_list[i][2] < test_list[min_index][2] then\n      min_index = i\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i = 2, #test_list do\n        if test_list[i][2] < min_value then\n            min_index = i\n            min_value = test_list[i][2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aemzscf.lua:17: expected: \"Varsha\"\nactual: 3\nstack traceback:\n\t/tmp/tmp8aemzscf.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i = 2, #test_list do\n    if test_list[i][2] < min_value then\n      min_index = i\n      min_value = test_list[i][2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    for i, v in ipairs(test_list) do\n        if v[2] < test_list[min_index][2] then\n            min_index = i\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i, v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n  local min_index = 1\n  local min_value = test_list[1][2]\n  for i,v in ipairs(test_list) do\n    if v[2] < min_value then\n      min_index = i\n      min_value = v[2]\n    end\n  end\n  return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123605,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n    local min_index = 1\n    local min_value = test_list[1][2]\n    for i, v in ipairs(test_list) do\n        if v[2] < min_value then\n            min_index = i\n            min_value = v[2]\n        end\n    end\n    return test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of tables, write a function that returns the first value of the table with the smallest second value.\nlocal function index_minimum(test_list)\n\tlocal min_index = 1\n\tlocal min_value = test_list[1][2]\n\tfor i = 2, #test_list do\n\t\tif test_list[i][2] < min_value then\n\t\t\tmin_index = i\n\t\t\tmin_value = test_list[i][2]\n\t\tend\n\tend\n\treturn test_list[min_index][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = index_minimum\n    lu.assertEquals(candidate({{'Rash', 143}, {'Manjeet', 200}, {'Varsha', 100}}), 'Varsha')\n    lu.assertEquals(candidate({{'Yash', 185}, {'Dawood', 125}, {'Sanya', 175}}), 'Dawood')\n    lu.assertEquals(candidate({{'Sai', 345}, {'Salman', 145}, {'Ayesha', 96}}), 'Ayesha')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027772,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}