{
  "name": "mbpp_247_lps",
  "language": "lua",
  "prompt": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local len = #str\n    local table = {}\n    for i = 1, len do\n        table[i] = {}\n        for j = 1, len do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, len do\n        table[i][i] = 1\n    end\n    for l = 2, len do\n        for i = 1, len - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][len]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] and l == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploo9v3wa.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmploo9v3wa.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n\tlocal n = #str\n\tlocal table = {}\n\tfor i = 1, n do\n\t\ttable[i] = {}\n\t\tfor j = 1, n do\n\t\t\ttable[i][j] = 0\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\ttable[i][i] = 1\n\tend\n\tfor l = 2, n do\n\t\tfor i = 1, n - l + 1 do\n\t\t\tlocal j = i + l - 1\n\t\t\tif str:sub(i, i) == str:sub(j, j) and l == 2 then\n\t\t\t\ttable[i][j] = 2\n\t\t\telseif str:sub(i, i) == str:sub(j, j) then\n\t\t\t\ttable[i][j] = table[i + 1][j - 1] + 2\n\t\t\telse\n\t\t\t\ttable[i][j] = math.max(table[i + 1][j], table[i][j - 1])\n\t\t\tend\n\t\tend\n\tend\n\treturn table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6fo83lhy.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      if str:sub(j, j) == str:sub(j + i - 1, j + i - 1) then\n        table[j][j + i - 1] = table[j + 1][j + i - 2] + 2\n      else\n        table[j][j + i - 1] = math.max(table[j][j + i - 2], table[j + 1][j + i - 1])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local len = #str\n  local dp = {}\n  for i = 1, len do\n    dp[i] = {}\n    for j = 1, len do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, len do\n    dp[i][i] = 1\n  end\n  for i = 1, len - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for l = 3, len do\n    for i = 1, len - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][len]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for l = 3, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local table = {}\n    for i = 1, n do\n        table[i] = {}\n        for j = 1, n do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        table[i][i] = 1\n    end\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      if str:sub(j, j) == str:sub(j + i - 1, j + i - 1) then\n        dp[j][j + i - 1] = dp[j + 1][j + i - 2] + 2\n      else\n        dp[j][j + i - 1] = math.max(dp[j][j + i - 2], dp[j + 1][j + i - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local L = {}\n  for i = 1, n do\n    L[i] = {}\n    L[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        L[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        L[i][j] = L[i + 1][j - 1] + 2\n      else\n        L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n      end\n    end\n  end\n  return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i=1,n do\n    dp[i] = {}\n    for j=1,n do\n      dp[i][j] = 0\n    end\n  end\n  for i=1,n do\n    dp[i][i] = 1\n  end\n  for l=2,n do\n    for i=1,n-l+1 do\n      local j = i+l-1\n      if str:sub(i,i) == str:sub(j,j) then\n        dp[i][j] = dp[i+1][j-1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      if str:sub(j, j) == str:sub(j + i - 1, j + i - 1) then\n        dp[j][j + i - 1] = dp[j + 1][j + i - 2] + 2\n      else\n        dp[j][j + i - 1] = math.max(dp[j][j + i - 2], dp[j + 1][j + i - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local l = {}\n    for i = 1, n do\n        l[i] = {}\n        for j = 1, n do\n            l[i][j] = 0\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "lua: /tmp/tmpapb_bxhx.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      table[i][i + 1] = 2\n    else\n      table[i][i + 1] = 1\n    end\n  end\n  for k = 3, n do\n    for i = 1, n - k + 1 do\n      local j = i + k - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = 2 + table[i + 1][j - 1]\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = 1, n - 1 do\n        if str:sub(i, i) == str:sub(i + 1, i + 1) then\n            dp[i][i + 1] = 2\n        else\n            dp[i][i + 1] = 1\n        end\n    end\n    for k = 3, n do\n        for i = 1, n - k + 1 do\n            local j = i + k - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local t = {}\n  for i = 1, n do\n    t[i] = {}\n    for j = 1, n do\n      t[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    t[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      local k = j + i - 1\n      if str:sub(j, j) == str:sub(k, k) then\n        t[j][k] = t[j + 1][k - 1] + 2\n      else\n        t[j][k] = math.max(t[j + 1][k], t[j][k - 1])\n      end\n    end\n  end\n  return t[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] and l == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ejmfjs4.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp3ejmfjs4.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n\tlocal n = #str\n\tlocal table = {}\n\tfor i = 1, n do\n\t\ttable[i] = {}\n\t\tfor j = 1, n do\n\t\t\ttable[i][j] = 0\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\ttable[i][i] = 1\n\tend\n\tfor l = 2, n do\n\t\tfor i = 1, n - l + 1 do\n\t\t\tlocal j = i + l - 1\n\t\t\tif str:sub(i, i) == str:sub(j, j) and l == 2 then\n\t\t\t\ttable[i][j] = 2\n\t\t\telseif str:sub(i, i) == str:sub(j, j) then\n\t\t\t\ttable[i][j] = table[i + 1][j - 1] + 2\n\t\t\telse\n\t\t\t\ttable[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n\t\t\tend\n\t\tend\n\tend\n\treturn table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgnq9dxe.lua:27: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpxgnq9dxe.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for len = 2, n do\n        for i = 1, n - len + 1 do\n            local j = i + len - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local L = {}\n    for i = 1, n do\n        L[i] = {}\n        for j = 1, n do\n            L[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        L[i][i] = 1\n    end\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                L[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                L[i][j] = L[i + 1][j - 1] + 2\n            else\n                L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n            end\n        end\n    end\n    return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkxrsuybm.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] and l == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ejmfjs4.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp3ejmfjs4.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      if str:sub(j, j) == str:sub(j + i - 1, j + i - 1) then\n        dp[j][j + i - 1] = 2 + dp[j + 1][j + i - 2]\n      else\n        dp[j][j + i - 1] = math.max(dp[j][j + i - 2], dp[j + 1][j + i - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for i = 3, n do\n    for j = 1, n - i + 1 do\n      local k = j + i - 1\n      if str:sub(j, j) == str:sub(k, k) then\n        dp[j][k] = dp[j + 1][k - 1] + 2\n      else\n        dp[j][k] = math.max(dp[j][k - 1], dp[j + 1][k])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for k = 3, n do\n    for i = 1, n - k + 1 do\n      local j = i + k - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local len = #str\n    local table = {}\n    for i = 1, len do\n        table[i] = {}\n        for j = 1, len do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, len do\n        table[i][i] = 1\n    end\n    for l = 2, len do\n        for i = 1, len - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i + 1][j], table[i][j - 1])\n            end\n        end\n    end\n    return table[1][len]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i=1,n do\n    table[i] = {}\n    for j=1,n do\n      table[i][j] = 0\n    end\n  end\n  for i=1,n do\n    table[i][i] = 1\n  end\n  for l=2,n do\n    for i=1,n-l+1 do\n      local j = i+l-1\n      if str:sub(i,i) == str:sub(j,j) and l == 2 then\n        table[i][j] = 2\n      elseif str:sub(i,i) == str:sub(j,j) then\n        table[i][j] = table[i+1][j-1] + 2\n      else\n        table[i][j] = math.max(table[i][j-1], table[i+1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local l = {}\n  for i = 1, n do\n    l[i] = {}\n    for j = 1, n do\n      l[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    l[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        l[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        l[i][j] = l[i + 1][j - 1] + 2\n      else\n        l[i][j] = math.max(l[i][j - 1], l[i + 1][j])\n      end\n    end\n  end\n  return l[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local L = {}\n  for i = 1, n do\n    L[i] = {}\n    for j = 1, n do\n      L[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    L[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        L[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        L[i][j] = L[i + 1][j - 1] + 2\n      else\n        L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n      end\n    end\n  end\n  return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for k = 3, n do\n    for i = 1, n - k + 1 do\n      local j = i + k - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for len = 2, n do\n    for i = 1, n - len + 1 do\n      local j = i + len - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] and l == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmploo9v3wa.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmploo9v3wa.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y59dcu1.lua:29: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp7y59dcu1.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y59dcu1.lua:29: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp7y59dcu1.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for len = 2, n do\n    for i = 1, n - len + 1 do\n      local j = i + len - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      if str[j] == str[j + i - 1] then\n        dp[j][j + i - 1] = 2 + dp[j + 1][j + i - 2]\n      else\n        dp[j][j + i - 1] = math.max(dp[j + 1][j + i - 1], dp[j][j + i - 2])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclvw95j3.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpclvw95j3.lua:12: in local 'candidate'\n\t/tmp/tmpclvw95j3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str[i] == str[j] and l == 2 then\n        dp[i][j] = 2\n      elseif str[i] == str[j] then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuf0uzgj.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnuf0uzgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local L = {}\n  for i = 1, n do\n    L[i] = {}\n    L[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        L[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        L[i][j] = L[i + 1][j - 1] + 2\n      else\n        L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n      end\n    end\n  end\n  return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6fo83lhy.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local L = {}\n    for i = 0, n do\n        L[i] = {}\n        for j = 0, n do\n            L[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        L[i][i] = 1\n    end\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                L[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                L[i][j] = L[i + 1][j - 1] + 2\n            else\n                L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n            end\n        end\n    end\n    return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local table = {}\n    for i = 1, n do\n        table[i] = {}\n        for j = 1, n do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        table[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = 2, n do\n        for j = 1, n - i + 1 do\n            local k = j + i - 1\n            if str:sub(j, j) == str:sub(k, k) then\n                dp[j][k] = dp[j + 1][k - 1] + 2\n            else\n                dp[j][k] = math.max(dp[j + 1][k], dp[j][k - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local len = #str\n  local table = {}\n  for i = 1, len do\n    table[i] = {}\n    table[i][i] = 1\n  end\n  for i = 1, len - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      table[i][i + 1] = 2\n    else\n      table[i][i + 1] = 1\n    end\n  end\n  for i = 3, len do\n    for j = 1, len - i + 1 do\n      local k = j + i - 1\n      if str:sub(j, j) == str:sub(k, k) then\n        table[j][k] = table[j + 1][k - 1] + 2\n      else\n        table[j][k] = math.max(table[j][k - 1], table[j + 1][k])\n      end\n    end\n  end\n  return table[1][len]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    for i = n - 1, 1, -1 do\n        for j = i + 1, n do\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local L = {}\n  for i = 1, n do\n    L[i] = {}\n    for j = 1, n do\n      L[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    L[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        L[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        L[i][j] = L[i + 1][j - 1] + 2\n      else\n        L[i][j] = math.max(L[i][j - 1], L[i + 1][j])\n      end\n    end\n  end\n  return L[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    for i = 1, n - 1 do\n        if str[i] == str[i + 1] then\n            dp[i][i + 1] = 2\n        else\n            dp[i][i + 1] = 1\n        end\n    end\n    for l = 3, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str[i] == str[j] then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgt0jplg.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpfgt0jplg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local l = {}\n  for i = 1, n do\n    l[i] = {}\n    for j = 1, n do\n      l[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    l[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        l[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        l[i][j] = l[i + 1][j - 1] + 2\n      else\n        l[i][j] = math.max(l[i][j - 1], l[i + 1][j])\n      end\n    end\n  end\n  return l[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6fo83lhy.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for len = 2, n do\n        for i = 1, n - len + 1 do\n            local j = i + len - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == j then\n        dp[i][j] = 1\n      else\n        dp[i][j] = 0\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local table = {}\n    for i = 1, n do\n        table[i] = {}\n        for j = 1, n do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        table[i][i] = 1\n    end\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027866,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for l = 3, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i=1,n do\n    dp[i] = {}\n    for j=1,n do\n      dp[i][j] = 0\n    end\n  end\n  for i=1,n do\n    dp[i][i] = 1\n  end\n  for l=2,n do\n    for i=1,n-l+1 do\n      local j = i+l-1\n      if str:sub(i,i) == str:sub(j,j) then\n        dp[i][j] = dp[i+1][j-1] + 2\n      else\n        dp[i][j] = math.max(dp[i+1][j], dp[i][j-1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == j then\n        dp[i][j] = 1\n      else\n        dp[i][j] = 0\n      end\n    end\n  end\n  for i = 1, n do\n    for j = 1, n do\n      if i < j then\n        if str:sub(i, i) == str:sub(j, j) then\n          dp[i][j] = dp[i + 1][j - 1] + 2\n        else\n          dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n        end\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oluoizw.lua:32: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp4oluoizw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0m_bez9n.lua:20: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == j then\n        dp[i][j] = 1\n      else\n        dp[i][j] = 0\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4krhqtf4.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for k = 3, n do\n    for i = 1, n - k + 1 do\n      local j = i + k - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local l = {}\n  for i = 1, n do\n    l[i] = {}\n    for j = 1, n do\n      l[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    l[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        l[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        l[i][j] = l[i + 1][j - 1] + 2\n      else\n        l[i][j] = math.max(l[i][j - 1], l[i + 1][j])\n      end\n    end\n  end\n  return l[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local l = {}\n  for i = 1, n do\n    l[i] = {}\n    for j = 1, n do\n      l[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    l[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        l[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        l[i][j] = l[i + 1][j - 1] + 2\n      else\n        l[i][j] = math.max(l[i][j - 1], l[i + 1][j])\n      end\n    end\n  end\n  return l[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local table = {}\n    for i = 1, n do\n        table[i] = {}\n        for j = 1, n do\n            table[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        table[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                table[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                table[i][j] = table[i + 1][j - 1] + 2\n            else\n                table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n            end\n        end\n    end\n    return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) and l == 2 then\n                dp[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == j then\n        dp[i][j] = 1\n      else\n        dp[i][j] = 0\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, n - i + 1 do\n      local k = j + i - 1\n      if str:sub(j, j) == str:sub(k, k) then\n        dp[j][k] = dp[j + 1][k - 1] + 2\n      else\n        dp[j][k] = math.max(dp[j][k - 1], dp[j + 1][k])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local table = {}\n  for i = 1, n do\n    table[i] = {}\n    for j = 1, n do\n      table[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    table[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        table[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        table[i][j] = table[i + 1][j - 1] + 2\n      else\n        table[i][j] = math.max(table[i][j - 1], table[i + 1][j])\n      end\n    end\n  end\n  return table[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i=1,n do\n        dp[i] = {}\n        for j=1,n do\n            dp[i][j] = 0\n        end\n    end\n    for i=1,n do\n        dp[i][i] = 1\n    end\n    for l=2,n do\n        for i=1,n-l+1 do\n            local j = i+l-1\n            if str:sub(i,i) == str:sub(j,j) then\n                dp[i][j] = dp[i+1][j-1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j-1], dp[i+1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for i = 1, n - 1 do\n    if str:sub(i, i) == str:sub(i + 1, i + 1) then\n      dp[i][i + 1] = 2\n    else\n      dp[i][i + 1] = 1\n    end\n  end\n  for k = 3, n do\n    for i = 1, n - k + 1 do\n      local j = i + k - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for cl = 2, n do\n    for i = 1, n - cl + 1 do\n      local j = i + cl - 1\n      if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for len = 2, n do\n        for i = 1, n - len + 1 do\n            local j = i + len - 1\n            if str[i] == str[j] and len == 2 then\n                dp[i][j] = 2\n            elseif str[i] == str[j] then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2v92prm.lua:32: expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpp2v92prm.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) and l == 2 then\n        dp[i][j] = 2\n      elseif str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local l = {}\n    for i = 0, n do\n        l[i] = {}\n        for j = 0, n do\n            l[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        l[i][i] = 1\n    end\n    for cl = 2, n do\n        for i = 1, n - cl + 1 do\n            local j = i + cl - 1\n            if str:sub(i, i) == str:sub(j, j) and cl == 2 then\n                l[i][j] = 2\n            elseif str:sub(i, i) == str:sub(j, j) then\n                l[i][j] = l[i + 1][j - 1] + 2\n            else\n                l[i][j] = math.max(l[i][j - 1], l[i + 1][j])\n            end\n        end\n    end\n    return l[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for l = 2, n do\n        for i = 1, n - l + 1 do\n            local j = i + l - 1\n            if str:sub(i, i) == str:sub(j, j) then\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else\n                dp[i][j] = math.max(dp[i][j - 1], dp[i + 1][j])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "lua: /tmp/tmpztd0ketj.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n    local n = #str\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    for i = 1, n do\n        dp[i][i] = 1\n    end\n    for i = 2, n do\n        for j = 1, n - i + 1 do\n            if str:sub(j, j) == str:sub(j + i - 1, j + i - 1) then\n                dp[j][j + i - 1] = dp[j + 1][j + i - 2] + 2\n            else\n                dp[j][j + i - 1] = math.max(dp[j + 1][j + i - 1], dp[j][j + i - 2])\n            end\n        end\n    end\n    return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    dp[i][i] = 1\n  end\n  for i = n - 1, 1, -1 do\n    for j = i + 1, n do\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124180,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = dp[i + 1][j - 1] + 2\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the length of the longest palindromic subsequence in the given string.\nlocal function lps(str)\n  local n = #str\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    dp[i][i] = 1\n  end\n  for l = 2, n do\n    for i = 1, n - l + 1 do\n      local j = i + l - 1\n      if str:sub(i, i) == str:sub(j, j) then\n        dp[i][j] = 2 + dp[i + 1][j - 1]\n      else\n        dp[i][j] = math.max(dp[i + 1][j], dp[i][j - 1])\n      end\n    end\n  end\n  return dp[1][n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = lps\n    lu.assertEquals(candidate('TENS FOR TENS'), 5)\n    lu.assertEquals(candidate('CARDIO FOR CARDS'), 7)\n    lu.assertEquals(candidate('PART OF THE JOURNEY IS PART'), 9)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027865,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}