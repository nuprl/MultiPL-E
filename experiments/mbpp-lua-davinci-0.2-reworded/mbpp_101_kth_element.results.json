{
  "name": "mbpp_101_kth_element",
  "language": "lua",
  "prompt": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tif k < 1 or k > #arr then\n\t\treturn nil\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgvgta0hx.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local len = #arr\n  if k < 1 or k > len then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \"..#arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be greater than 0\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  -- TODO: Implement this function.\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if not arr or k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tassert(k >= 1 and k <= #arr, \"k must be between 1 and #arr\")\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local i = 1\n  while i <= n do\n    local j = i\n    while j <= n do\n      if arr[j] < arr[i] then\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rcq9jqg.lua:24: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp2rcq9jqg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    -- TODO: Implement this function.\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o9il_kc.lua:10: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp7o9il_kc.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"index out of bounds\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  -- TODO: Write your code here\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqr_x62q.lua:10: expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpiqr_x62q.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"kth_element: k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal n = #arr\n\tif k < 1 or k > n then\n\t\treturn nil\n\tend\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlphxk1m.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptlphxk1m.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuaubxy72.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmp43wiqlmc.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuaubxy72.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal kth = arr[k]\n\ttable.remove(arr, k)\n\treturn kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmphgg1xs2q.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83dss0hr.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp83dss0hr.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    -- TODO: Implement this function.\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tassert(k > 0, \"k must be greater than 0\")\n\tassert(k <= #arr, \"k must be less than or equal to the length of the array\")\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local function partition(arr, left, right)\n    local pivot = arr[right]\n    local i = left - 1\n    for j = left, right - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuaubxy72.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 then\n    return nil\n  end\n  if k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k should be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"invalid index\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlphxk1m.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptlphxk1m.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"k must be between 1 and \" .. #arr)\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    error(\"kth_element: index out of bounds\")\n  end\n  local pivot = arr[1]\n  local left, right = 1, n\n  while left < right do\n    while left < right and arr[right] >= pivot do\n      right = right - 1\n    end\n    arr[left] = arr[right]\n    while left < right and arr[left] <= pivot do\n      left = left + 1\n    end\n    arr[right] = arr[left]\n  end\n  arr[left] = pivot\n  if left == k then\n    return pivot\n  elseif left < k then\n    return kth_element(arr, k, left + 1, n)\n  else\n    return kth_element(arr, k, 1, left - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp740xkl69.lua:32: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp740xkl69.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be positive\")\n  assert(k <= #arr, \"k is too large\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal n = #arr\n\tlocal function partition(l, r)\n\t\tlocal pivot = arr[l]\n\t\tlocal i = l\n\t\tlocal j = r + 1\n\t\twhile true do\n\t\t\trepeat i = i + 1 until arr[i] >= pivot\n\t\t\trepeat j = j - 1 until arr[j] <= pivot\n\t\t\tif i >= j then break end\n\t\t\tarr[i], arr[j] = arr[j], arr[i]\n\t\tend\n\t\tarr[l], arr[j] = arr[j], arr[l]\n\t\treturn j\n\tend\n\tlocal function select(l, r, k)\n\t\tif l == r then return arr[l] end\n\t\tlocal j = partition(l, r)\n\t\tif k == j then return arr[k]\n\t\telseif k < j then return select(l, j - 1, k)\n\t\telse return select(j + 1, r, k) end\n\tend\n\treturn select(1, n, k)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoeym7xq.lua:30: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpwoeym7xq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    local pivot = arr[1]\n    local left = {}\n    local right = {}\n    for i = 2, n do\n        if arr[i] < pivot then\n            left[#left + 1] = arr[i]\n        else\n            right[#right + 1] = arr[i]\n        end\n    end\n    if k <= #left then\n        return kth_element(left, k)\n    elseif k == #left + 1 then\n        return pivot\n    else\n        return kth_element(right, k - #left - 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83dss0hr.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmp83dss0hr.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k is out of range\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"k is out of range\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal n = #arr\n\tif k < 1 or k > n then\n\t\treturn nil\n\tend\n\tlocal pivot = arr[1]\n\tlocal left = {}\n\tlocal right = {}\n\tfor i = 2, n do\n\t\tif arr[i] < pivot then\n\t\t\tleft[#left + 1] = arr[i]\n\t\telse\n\t\t\tright[#right + 1] = arr[i]\n\t\tend\n\tend\n\tif k <= #left then\n\t\treturn kth_element(left, k)\n\telseif k == #left + 1 then\n\t\treturn pivot\n\telse\n\t\treturn kth_element(right, k - #left - 1)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptitk3o47.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptitk3o47.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k >= 1 and k <= #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0, \"k must be positive\")\n    assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"index out of bounds\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    else\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlphxk1m.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptlphxk1m.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"kth_element: k is out of bounds\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local kth = arr[k]\n    for i = k, #arr do\n        if arr[i] < kth then\n            kth = arr[i]\n        end\n    end\n    return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpecfggzp1.lua:17: expected: 36, actual: 4\nstack traceback:\n\t/tmp/tmpecfggzp1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tif k < 1 or k > #arr then\n\t\treturn nil\n\tend\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local k = k or 1\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    error(\"kth_element: k out of range\")\n  end\n  local pivot = arr[1]\n  local left = {}\n  local right = {}\n  for i = 2, n do\n    local v = arr[i]\n    if v < pivot then\n      left[#left + 1] = v\n    else\n      right[#right + 1] = v\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k == #left + 1 then\n    return pivot\n  else\n    return kth_element(right, k - #left - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9zwxdhs.lua:30: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpc9zwxdhs.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be positive\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then return nil end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    for i = 1, n do\n        for j = i + 1, n do\n            if arr[i] > arr[j] then\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpessrm7l9.lua:17: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpessrm7l9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local len = #arr\n  if k < 1 or k > len then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be positive\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <= pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5gc9tz8o.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k is out of range\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal n = #arr\n\tif k < 1 or k > n then\n\t\treturn nil\n\tend\n\tlocal pivot = arr[1]\n\tlocal left = {}\n\tlocal right = {}\n\tfor i = 2, n do\n\t\tif arr[i] < pivot then\n\t\t\tleft[#left + 1] = arr[i]\n\t\telse\n\t\t\tright[#right + 1] = arr[i]\n\t\tend\n\tend\n\tif k <= #left then\n\t\treturn kth_element(left, k)\n\telseif k == #left + 1 then\n\t\treturn pivot\n\telse\n\t\treturn kth_element(right, k - #left - 1)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptitk3o47.lua:29: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmptitk3o47.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then return nil end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"Index out of bounds\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be positive\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then\n    return nil\n  end\n  local pivot = arr[math.random(n)]\n  local left, right = {}, {}\n  for i = 1, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    elseif arr[i] > pivot then\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k > n - #right then\n    return kth_element(right, k - (n - #right))\n  end\n  return pivot\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy5op8sw.lua:27: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmphy5op8sw.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k <= 0 or k > n then\n    return nil\n  end\n  local pivot = arr[math.random(n)]\n  local left, right = {}, {}\n  for i = 1, n do\n    if arr[i] < pivot then\n      left[#left + 1] = arr[i]\n    elseif arr[i] > pivot then\n      right[#right + 1] = arr[i]\n    end\n  end\n  if k <= #left then\n    return kth_element(left, k)\n  elseif k > n - #right then\n    return kth_element(right, k - (n - #right))\n  else\n    return pivot\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk56xi6l4.lua:28: expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpk56xi6l4.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k should be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be in range [1, #arr]\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"invalid k\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        error('Index out of bounds')\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k is out of range\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local function partition(arr, l, r)\n    local pivot = arr[r]\n    local i = l - 1\n    for j = l, r - 1 do\n      if arr[j] <= pivot then\n        i = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n      end\n    end\n    arr[i + 1], arr[r] = arr[r], arr[i + 1]\n    return i + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "lua: /tmp/tmp43wiqlmc.lua:24: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be in range 1..#arr\")\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k >= 1 and k <= #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local n = #arr\n  if k < 1 or k > n then return nil end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tlocal n = #arr\n\tif k < 1 or k > n then\n\t\treturn nil\n\tend\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  local kth = arr[k]\n  local i = 1\n  local j = #arr\n  while i <= j do\n    while arr[i] < kth do i = i + 1 end\n    while arr[j] > kth do j = j - 1 end\n    if i <= j then\n      arr[i], arr[j] = arr[j], arr[i]\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiou_06fl.lua:21: expected: 3, actual: 12\nstack traceback:\n\t/tmp/tmpiou_06fl.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    assert(k > 0 and k <= #arr, \"k must be between 1 and \" .. #arr)\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    error(\"kth_element: index out of bounds\")\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    if k < 1 or k > #arr then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0, \"k must be positive\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027758,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n\tassert(k >= 1 and k <= #arr, \"k must be between 1 and \" .. #arr)\n\treturn arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  if k < 1 or k > #arr then\n    return nil\n  end\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027757,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k >= 1, \"k must be greater than or equal to 1\")\n  assert(k <= #arr, \"k must be less than or equal to the length of the array\")\n  return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n    local n = #arr\n    if k < 1 or k > n then\n        return nil\n    end\n    return arr[k]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the kth element in the given table using 1-based indexing.\nlocal function kth_element(arr, k)\n  assert(k > 0 and k <= #arr, \"k is out of range\")\n  local kth = arr[k]\n  for i = k + 1, #arr do\n    local v = arr[i]\n    if v < kth then\n      kth = v\n    end\n  end\n  return kth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = kth_element\n    lu.assertEquals(candidate({12, 3, 5, 7, 19}, 2), 3)\n    lu.assertEquals(candidate({17, 24, 8, 23}, 3), 8)\n    lu.assertEquals(candidate({16, 21, 25, 36, 4}, 4), 36)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123737,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96mmp2c5.lua:19: expected: 36, actual: 4\nstack traceback:\n\t/tmp/tmp96mmp2c5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}