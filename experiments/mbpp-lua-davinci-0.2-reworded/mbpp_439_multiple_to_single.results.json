{
  "name": "mbpp_439_multiple_to_single",
  "language": "lua",
  "prompt": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2tj44af.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpo2tj44af.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2tj44af.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpo2tj44af.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = ''\n  for _,v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n * 256 + L[i]\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4_0dxf.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpgr4_0dxf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local res = 0\n    for i, v in ipairs(L) do\n        res = res * 10 + v\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcu9mlbmj.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpcu9mlbmj.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i, v in ipairs(L) do\n\t\tresult = result + v\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ejvf1nh.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp3ejvf1nh.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = ''\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmguyx9b.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpxmguyx9b.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zv67kza.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp0zv67kza.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. tostring(L[i])\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for i = 1, #L do\n        s = s .. L[i]\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local result = 0\n    for i, v in ipairs(L) do\n        result = result * 10 + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hthq4rm.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmp4hthq4rm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result * 256 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxubsz5ld.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpxubsz5ld.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgeyw1v3.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpkgeyw1v3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.format(\"%02x\", v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynuuqu9q.lua:13: expected: 113350, actual: \"0b2132\"\nstack traceback:\n\t/tmp/tmpynuuqu9q.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposw017zm.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmposw017zm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i, v in ipairs(L) do\n    n = n + v * 10^(#L-i)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputymq1d_.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmputymq1d_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i, v in ipairs(L) do\n\t\tn = n + v * 10^(#L - i)\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5hy2ray.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmpc5hy2ray.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = #L\n  local r = 0\n  for i = 1, n do\n    r = r + L[i] * 10^(n-i)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpwntuqz.lua:14: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmpzpwntuqz.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i, v in ipairs(L) do\n    n = n + v\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c4wqeex.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp2c4wqeex.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n * 256 + L[i]\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4_0dxf.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpgr4_0dxf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i,v in ipairs(L) do\n\t\tn = n + v * (256 ^ (i-1))\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm3758zb.lua:13: expected: 113350, actual: 3285259.0\nstack traceback:\n\t/tmp/tmppm3758zb.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbby09ra.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmptbby09ra.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n   local s = \"\"\n   for _, v in ipairs(L) do\n      s = s .. string.format(\"%02x\", v)\n   end\n   return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrfxmgwk.lua:13: expected: 113350, actual: \"0b2132\"\nstack traceback:\n\t/tmp/tmpfrfxmgwk.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal ret = 0\n\tfor i = 1, #L do\n\t\tret = ret + L[i]\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o9lhfl4.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp0o9lhfl4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. tostring(v)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k0jxys8.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp9k0jxys8.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1evcdemw.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp1evcdemw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local n = 0\n    for i = 1, #L do\n        n = n * 256 + L[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84bux_i8.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmp84bux_i8.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n * 256 + L[i]\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4_0dxf.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpgr4_0dxf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n + L[i] * 10^(#L - i)\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoi_wohus.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmpoi_wohus.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. tostring(v)\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal ret = 0\n\tfor i = 1, #L do\n\t\tret = ret * 10 + L[i]\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxuq9nptm.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpxuq9nptm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1evcdemw.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp1evcdemw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal R = 0\n\tfor i,v in ipairs(L) do\n\t\tR = R + v\n\tend\n\treturn R\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepq3enx2.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpepq3enx2.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.format(\"%02x\", v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpynuuqu9q.lua:13: expected: 113350, actual: \"0b2132\"\nstack traceback:\n\t/tmp/tmpynuuqu9q.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  local multiplier = 1\n  for i = #L, 1, -1 do\n    result = result + L[i] * multiplier\n    multiplier = multiplier * 10\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp115kfui.lua:15: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpp115kfui.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i, v in ipairs(L) do\n    n = n + v * 10^(#L - i)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0msdmj2v.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmp0msdmj2v.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza_fdodr.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpza_fdodr.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zv7w8am.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp3zv7w8am.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. tostring(v)\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n + L[i] * (10 ^ (i - 1))\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z5lkua6.lua:13: expected: 113350, actual: 5341.0\nstack traceback:\n\t/tmp/tmp7z5lkua6.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagt1hqcq.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpagt1hqcq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local n = 0\n    for i = 1, #L do\n        n = n * 256 + L[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84bux_i8.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmp84bux_i8.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i, v in ipairs(L) do\n\t\tresult = result + v * 10 ^ (i - 1)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o0smv1z.lua:13: expected: 113350, actual: 5341.0\nstack traceback:\n\t/tmp/tmp4o0smv1z.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 256 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0wyd5r9.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpo0wyd5r9.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i, v in ipairs(L) do\n\t\tn = n + v * 10 ^ (i - 1)\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63pe8gd1.lua:13: expected: 113350, actual: 5341.0\nstack traceback:\n\t/tmp/tmp63pe8gd1.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal ret = 0\n\tfor i, v in ipairs(L) do\n\t\tret = ret + v\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztl0hzka.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpztl0hzka.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i, v in ipairs(L) do\n\t\tresult = result + v\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ejvf1nh.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp3ejvf1nh.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn17b9bkl.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpn17b9bkl.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagt1hqcq.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpagt1hqcq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zv67kza.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp0zv67kza.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local n = 0\n    for i, v in ipairs(L) do\n        n = n + v * 10^(#L - i)\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mypk25_.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmp4mypk25_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i, v in ipairs(L) do\n\t\tn = n + v\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal940ldd.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpal940ldd.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1evcdemw.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp1evcdemw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tlocal multiplier = 1\n\tfor i = #L, 1, -1 do\n\t\tresult = result + L[i] * multiplier\n\t\tmultiplier = multiplier * 10\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptptosaxx.lua:15: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmptptosaxx.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _, v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local result = 0\n    for i, v in ipairs(L) do\n        result = result + v * 10 ^ (#L - i)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxv11_ss.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmpsxv11_ss.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for _, v in ipairs(L) do\n    result = result * 10 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5ch9ui.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpkw5ch9ui.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for _, v in ipairs(L) do\n    result = result * 10 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5ch9ui.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpkw5ch9ui.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for _, v in ipairs(L) do\n    result = result * 10 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5ch9ui.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpkw5ch9ui.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2t428uw.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpq2t428uw.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n * 256 + L[i]\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4_0dxf.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpgr4_0dxf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for _, v in ipairs(L) do\n    result = result * 10 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5ch9ui.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpkw5ch9ui.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i, v in ipairs(L) do\n\t\tn = n * 256 + v\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44nncmxm.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmp44nncmxm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. string.char(v)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhb5729r.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmpwhb5729r.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagt1hqcq.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpagt1hqcq.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2tj44af.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpo2tj44af.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2tj44af.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpo2tj44af.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i=1,#L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i, v in ipairs(L) do\n    n = n + v * 10^(#L - i)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0msdmj2v.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmp0msdmj2v.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. string.char(L[i])\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17pt1qnm.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp17pt1qnm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for i,v in ipairs(L) do\n        s = s .. tostring(v)\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i,v in ipairs(L) do\n\t\tresult = result + v\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mqglhdg.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp8mqglhdg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. tostring(v)\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 256 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0wyd5r9.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpo0wyd5r9.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposw017zm.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmposw017zm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i, v in ipairs(L) do\n    result = result + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2tj44af.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpo2tj44af.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zv7w8am.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp3zv7w8am.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal str = \"\"\n\tfor i = 1, #L do\n\t\tstr = str .. L[i]\n\tend\n\treturn tonumber(str)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local r = 0\n  for i = 1, #L do\n    r = r * 256 + L[i]\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpequ01o8p.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpequ01o8p.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i,v in ipairs(L) do\n\t\tresult = result + v\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mqglhdg.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp8mqglhdg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i,v in ipairs(L) do\n\t\ts = s..v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _,v in ipairs(L) do\n        s = s .. string.format(\"%d\", v)\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal n = 0\n\tfor i = 1, #L do\n\t\tn = n * 256 + L[i]\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr4_0dxf.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpgr4_0dxf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. string.char(v)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp076x1m4i.lua:13: expected: 113350, actual: \"\u000b!2\"\nstack traceback:\n\t/tmp/tmp076x1m4i.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpza_fdodr.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpza_fdodr.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _,v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgeyw1v3.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmpkgeyw1v3.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. tostring(v)\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for _, v in ipairs(L) do\n    result = result * 10 + v\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw5ch9ui.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpkw5ch9ui.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local ret = 0\n  for i = 1, #L do\n    ret = ret * 10 + L[i]\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqrozgxn.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpdqrozgxn.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _,v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i, v in ipairs(L) do\n\t\tresult = result + v\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ejvf1nh.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmp3ejvf1nh.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local n = 0\n  for i = 1, #L do\n    n = n * 256 + L[i]\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwspw5r4.lua:13: expected: 113350, actual: 729394\nstack traceback:\n\t/tmp/tmpdwspw5r4.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local result = 0\n    for i, v in ipairs(L) do\n        result = result + v * 10^(#L - i)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mekfaqg.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmp_mekfaqg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. v\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local ret = 0\n    for i, v in ipairs(L) do\n        ret = ret + v * 10^(#L - i)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng2qn7lg.lua:13: expected: 113350, actual: 1480.0\nstack traceback:\n\t/tmp/tmpng2qn7lg.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i, v in ipairs(L) do\n    s = s .. v\n  end\n  return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for _,v in ipairs(L) do\n        s = s .. v\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local s = \"\"\n    for i, v in ipairs(L) do\n        s = s .. tostring(v)\n    end\n    return tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for _, v in ipairs(L) do\n    s = s .. v\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zv67kza.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmp0zv67kza.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i = 1, #L do\n\t\ts = s .. L[i]\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbby09ra.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmptbby09ra.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor i=1,#L do\n\t\ts = s..L[i]\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal result = 0\n\tfor i = 1, #L do\n\t\tresult = result * 10 + L[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmhjo0g7.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmprmhjo0g7.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local s = \"\"\n  for i = 1, #L do\n    s = s .. L[i]\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposw017zm.lua:13: expected: 113350, actual: \"113350\"\nstack traceback:\n\t/tmp/tmposw017zm.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n  local result = 0\n  for i = 1, #L do\n    result = result * 10 + L[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt475pq10.lua:13: expected: 113350, actual: 1480\nstack traceback:\n\t/tmp/tmpt475pq10.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n    local result = 0\n    for i, v in ipairs(L) do\n        result = result + v\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123704,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvb8o1na.lua:13: expected: 113350, actual: 94\nstack traceback:\n\t/tmp/tmpvvb8o1na.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to join a table of multiple integers into a single integer.\nlocal function multiple_to_single(L)\n\tlocal s = \"\"\n\tfor _, v in ipairs(L) do\n\t\ts = s .. tostring(v)\n\tend\n\treturn tonumber(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiple_to_single\n    lu.assertEquals(candidate({11, 33, 50}), 113350)\n    lu.assertEquals(candidate({-1, 2, 3, 4, 5, 6}), -123456)\n    lu.assertEquals(candidate({10, 15, 20, 25}), 10152025)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123703,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}