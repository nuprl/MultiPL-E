{
  "name": "mbpp_125_find_length",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eaztzi6.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp5eaztzi6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string.sub(string, i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 + count_1)\n        end\n    end\n    count_0 = 0\n    count_1 = 0\n    for i = #string, 1, -1 do\n        if string.sub(string, i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 + count_1)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38r8x4_5.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp38r8x4_5.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] then\n            max_length = math.max(max_length, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh9u8rm4.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkh9u8rm4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ctjojmi.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1ctjojmi.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_length = math.max(max_length, i - hash[count])\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wft07r6.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp7wft07r6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0gg8w3f.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpd0gg8w3f.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count + 1\n        else\n            count = count - 1\n        end\n        if count > max_count then\n            max_count = count\n        end\n    end\n    return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhaimdi_.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpfhaimdi_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  local len = string.len(string)\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a9n2nix.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp6a9n2nix.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i=1, #string do\n    if string:sub(i,i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sxyqh49.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp2sxyqh49.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    count = count_0 - count_1\n    if count == 0 then\n      max_length = math.max(max_length, i)\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9bk_eu4.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpm9bk_eu4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    max_diff = math.max(max_diff, count)\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfe9l4jt.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpyfe9l4jt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1fxh7qv.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpi1fxh7qv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 + count_1)\n        end\n    end\n    count_0 = 0\n    count_1 = 0\n    for i = #string, 1, -1 do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 + count_1)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tvm7gvh.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4tvm7gvh.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0mmrn0c.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmph0mmrn0c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_zero = 0\n    local count_one = 0\n    for i = 1, #string do\n        if string[i] == '0' then\n            count_zero = count_zero + 1\n        else\n            count_one = count_one + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_zero - count_one))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w83me97.lua:20: expected: 6, actual: 11\nstack traceback:\n\t/tmp/tmp7w83me97.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n    end\n    count = 0\n    for i = n, 1, -1 do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = math.max(max_length, n - i + 1)\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6fbgckd.lua:33: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpo6fbgckd.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_1 = 0\n  local count_0 = 0\n  local i = 1\n  while i <= #string do\n    if string:sub(i, i) == \"1\" then\n      count_1 = count_1 + 1\n    else\n      count_0 = count_0 + 1\n    end\n    if count_1 == count_0 then\n      max_diff = math.max(max_diff, count_1 * 2)\n    end\n    i = i + 1\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo80dz6cm.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpo80dz6cm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    count_0 = 0\n    count_1 = 0\n    for i = #string, 1, -1 do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh1aw15s.lua:34: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpsh1aw15s.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_length = 0\n\tlocal count = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tif string[i] == '0' then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == 0 then\n\t\t\tmax_length = i\n\t\tend\n\t\tif hash[count] then\n\t\t\tmax_length = math.max(max_length, i - hash[count])\n\t\telse\n\t\t\thash[count] = i\n\t\tend\n\tend\n\treturn max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpki55xiae.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpki55xiae.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = string:len()\n  for i = 1, n do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    max_diff = math.max(max_diff, count)\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdcgz8npz.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpdcgz8npz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  local length = string.len(string)\n  for i = 1, length do\n    if string.sub(string, i, i) == '0' then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero * 2)\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i = length, 1, -1 do\n    if string.sub(string, i, i) == '0' then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero * 2)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r9hd2l6.lua:35: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp8r9hd2l6.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local len = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count + 1\n        else\n            count = count - 1\n        end\n        if count == 0 then\n            len = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            len = i - hash[count]\n        end\n        if len > max_len then\n            max_len = len\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq3xmiiwa.lua:31: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpq3xmiiwa.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn751jml.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpqn751jml.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4djg6hgk.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4djg6hgk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count_0 = 0\n\tlocal count_1 = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount_0 = count_0 + 1\n\t\telse\n\t\t\tcount_1 = count_1 + 1\n\t\tend\n\t\tmax_diff = math.max(max_diff, math.abs(count_0 - count_1))\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v5s3cxo.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4v5s3cxo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    count = 0\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = math.max(max_len, n - i)\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaggvuuj.lua:33: expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmpvaggvuuj.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local zeros = 0\n    local ones = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            zeros = zeros + 1\n        else\n            ones = ones + 1\n        end\n        count = count + 1\n        if zeros == ones then\n            if count > max_diff then\n                max_diff = count\n            end\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f7ywong.lua:26: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp_f7ywong.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        max_diff = math.max(max_diff, count)\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipthywz8.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpipthywz8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_length = math.max(max_length, i - hash[count])\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wft07r6.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp7wft07r6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero + count_one)\n    end\n  end\n  count_zero = 0\n  count_one = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == '0' then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    if count_zero == count_one then\n      max_diff = math.max(max_diff, count_zero + count_one)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp829ncxfs.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp829ncxfs.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    local zero_count = 0\n    local one_count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            zero_count = zero_count + 1\n        else\n            one_count = one_count + 1\n        end\n        if zero_count == one_count then\n            count = zero_count + one_count\n            if count > max_count then\n                max_count = count\n            end\n        end\n    end\n    return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdilq808h.lua:26: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdilq808h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgvdzozn.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmppgvdzozn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_g5ckgp.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp7_g5ckgp.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 0, 1 do\n        hash[i] = -1\n    end\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if hash[count] == -1 then\n            hash[count] = i\n        else\n            max_len = math.max(max_len, i - hash[count])\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwev0ef.lua:18: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmphwwev0ef.lua:18: in local 'candidate'\n\t/tmp/tmphwwev0ef.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count = 0\n\tlocal i = 1\n\twhile i <= #string do\n\t\tif string:sub(i, i) == '0' then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max_diff then\n\t\t\tmax_diff = count\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppow49sx.lua:26: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpppow49sx.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n    if hash[count] == nil then\n      hash[count] = i\n    else\n      max_length = math.max(max_length, i - hash[count])\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bqog6d0.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp8bqog6d0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 0, 1 do\n        hash[i] = -1\n    end\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if hash[count] == -1 then\n            hash[count] = i\n        else\n            max_len = math.max(max_len, i - hash[count])\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwev0ef.lua:18: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmphwwev0ef.lua:18: in local 'candidate'\n\t/tmp/tmphwwev0ef.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local len = string.len(string)\n    for i = 1, len do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw18yaurd.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpw18yaurd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i=1,#string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4znkueq4.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp4znkueq4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__c1ex3u.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp__c1ex3u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max_count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count > max_count then\n      max_count = count\n    end\n  end\n  return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd63r9rhv.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpd63r9rhv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7mtehgp.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpx7mtehgp.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_length = 0\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == 0 then\n\t\t\tmax_length = math.max(max_length, i)\n\t\tend\n\tend\n\treturn max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbrg1k7w.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgbrg1k7w.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        count = count_0 - count_1\n        if count == 0 then\n            max_length = math.max(max_length, i)\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyap_38a.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmyap_38a.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlrysknz.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpxlrysknz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2amz8rr.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpa2amz8rr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1hqt_qg.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpr1hqt_qg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"1\" then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    max_diff = math.max(max_diff, count)\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4adc3cf6.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp4adc3cf6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01kjv5xq.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp01kjv5xq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4djg6hgk.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4djg6hgk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local len = string.len(string)\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwipdrbal.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpwipdrbal.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n    if hash[count] then\n      max_length = math.max(max_length, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg400q316.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpg400q316.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbrx1s5l.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmplbrx1s5l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ctjojmi.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1ctjojmi.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            count = count_0 + count_1\n            if count > max_length then\n                max_length = count\n            end\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyarts4uz.lua:26: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpyarts4uz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_len = math.max(max_len, i - hash[count])\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1zvxk06.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpd1zvxk06.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local len = 0\n  local count = 0\n  local i = 0\n  while i < #string do\n    if string[i] == '0' then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count == 0 then\n      len = i + 1\n    else\n      local j = i - 1\n      while j >= 0 do\n        if string[j] == '0' then\n          count = count + 1\n        else\n          count = count - 1\n        end\n        if count == 0 then\n          len = i - j\n          break\n        end\n        j = j - 1\n      end\n    end\n    if len > max_len then\n      max_len = len\n    end\n    i = i + 1\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i2udm26.lua:41: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp4i2udm26.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count_zero = 0\n\tlocal count_one = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount_zero = count_zero + 1\n\t\telse\n\t\t\tcount_one = count_one + 1\n\t\tend\n\t\tmax_diff = math.max(max_diff, math.abs(count_zero - count_one))\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzmjnxnr.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdzmjnxnr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputcd1uj_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmputcd1uj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        max_diff = math.max(max_diff, count)\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpauhzor.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqpauhzor.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgvdzozn.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmppgvdzozn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4djg6hgk.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4djg6hgk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      count = count_0 + count_1\n      if count > max_len then\n        max_len = count\n      end\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghdrn2bt.lua:26: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpghdrn2bt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoih31ncv.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpoih31ncv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    local diff = math.abs(count_0 - count_1)\n    if diff > max_diff then\n      max_diff = diff\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjuwree_.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdjuwree_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkykgb4uc.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpkykgb4uc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1fxh7qv.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpi1fxh7qv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputcd1uj_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmputcd1uj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq276jgi.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmptq276jgi.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n    end\n    count = 0\n    for i = n, 1, -1 do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = math.max(max_length, n - i + 1)\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6fbgckd.lua:33: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpo6fbgckd.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            count = count_0 + count_1\n            if count > max_len then\n                max_len = count\n            end\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3wagmg8.lua:26: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpm3wagmg8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1fxh7qv.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpi1fxh7qv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0gg8w3f.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpd0gg8w3f.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 * 2)\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i = #string, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 * 2)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b11b7bs.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1b11b7bs.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nf8a_e5.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp8nf8a_e5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprded4fm_.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmprded4fm_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    local length = string.len(string)\n    for i = 1, length do\n        if string.sub(string, i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 * 2)\n        end\n    end\n    count_0 = 0\n    count_1 = 0\n    for i = length, 1, -1 do\n        if string.sub(string, i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0 * 2)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6b3qtqg.lua:35: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpo6b3qtqg.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    local i = 1\n    while i <= #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_count then\n            max_count = count\n        end\n        i = i + 1\n    end\n    return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie2lqe3z.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpie2lqe3z.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszwkmtut.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpszwkmtut.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_zero - count_one))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc_q_1vn.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdc_q_1vn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01kjv5xq.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp01kjv5xq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] then\n            max_length = math.max(max_length, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh9u8rm4.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkh9u8rm4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"1\" then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9swwz7xs.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp9swwz7xs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local hash = {}\n  hash[0] = -1\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if hash[count] then\n      max_length = math.max(max_length, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppiyllq0i.lua:25: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmppiyllq0i.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_len = math.max(max_len, i - hash[count])\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1zvxk06.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpd1zvxk06.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_count then\n            max_count = count\n        end\n    end\n    return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpri0rlyp1.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpri0rlyp1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1029wf7_.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp1029wf7_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgvdzozn.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmppgvdzozn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul829q8b.lua:25: expected: 6, actual: 11\nstack traceback:\n\t/tmp/tmpul829q8b.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local zero_count = 0\n  local one_count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      zero_count = zero_count + 1\n    else\n      one_count = one_count + 1\n    end\n    count = zero_count - one_count\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6w0lq2_.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpr6w0lq2_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    local hash = {}\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_len = math.max(max_len, i - hash[count])\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1e51bd9.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpc1e51bd9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"1\" then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5et4t01w.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp5et4t01w.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    local length = string.len(string)\n    for i = 1, length do\n        if string.sub(string, i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp132o8weg.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp132o8weg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x0qj1uh.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp_x0qj1uh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        local char = string:sub(i, i)\n        if char == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1gb7neu.lua:28: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpq1gb7neu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszwkmtut.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpszwkmtut.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max then\n            max = count\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp83np72v0.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp83np72v0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count + 1\n    else\n      count = count - 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i=1,n do\n        if string.sub(string,i,i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_rg4att.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp9_rg4att.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsutyvp8.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpnsutyvp8.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local zeros = 0\n  local ones = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      zeros = zeros + 1\n    else\n      ones = ones + 1\n    end\n    count = count + 1\n    if zeros == ones then\n      max_diff = math.max(max_diff, count)\n      count = 0\n      zeros = 0\n      ones = 0\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvocyych2.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpvocyych2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0w7lbrd.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpl0w7lbrd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_len = math.max(max_len, count_0 * 2)\n        end\n    end\n    count_0 = 0\n    count_1 = 0\n    for i = #string, 1, -1 do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_len = math.max(max_len, count_0 * 2)\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasoj0w5a.lua:34: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpasoj0w5a.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    local hash = {}\n    for i = 0, n do\n        hash[i] = 0\n    end\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] ~= nil then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdeq7qzwn.lua:31: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdeq7qzwn.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_length = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_length = i\n    end\n    if hash[count] then\n      max_length = math.max(max_length, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7hsdj3f.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpy7hsdj3f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18x4n9sy.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp18x4n9sy.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm3rgt1k.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpxm3rgt1k.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_zero - count_one))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc_q_1vn.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdc_q_1vn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eaztzi6.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp5eaztzi6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max then\n            max = count\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jyaqups.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp5jyaqups.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxv8topd.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpqxv8topd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96cwebj_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp96cwebj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  local len = string.len(string)\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a9n2nix.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp6a9n2nix.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2amz8rr.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpa2amz8rr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegf5xe2l.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpegf5xe2l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max_diff then\n\t\t\tmax_diff = count\n\t\tend\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ngvz6qr.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp2ngvz6qr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm3rgt1k.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpxm3rgt1k.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_count then\n            max_count = count\n        end\n    end\n    return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf8k8_8y.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmplf8k8_8y.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiw9lnxoc.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpiw9lnxoc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1fxh7qv.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpi1fxh7qv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = string.len(string)\n  for i = 1, n do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    max_diff = math.max(max_diff, count)\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pctwgmg.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp7pctwgmg.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count = 0\n\tlocal n = string.len(string)\n\tfor i = 1, n do\n\t\tif string.sub(string, i, i) == \"0\" then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max_diff then\n\t\t\tmax_diff = count\n\t\tend\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstrfei0f.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpstrfei0f.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max = 0\n  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo04c6zgo.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpo04c6zgo.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max_count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_count then\n      max_count = count\n    end\n  end\n  return max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp868pws_0.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp868pws_0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  hash[0] = -1\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1shrtr9s.lua:25: expected: 6, actual: 5\nstack traceback:\n\t/tmp/tmp1shrtr9s.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max = 0\n    local n = string.len(string)\n    local i = 1\n    while i <= n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count + 1\n        else\n            count = count - 1\n        end\n        if count > max then\n            max = count\n        end\n        i = i + 1\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp113u2p4h.lua:24: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp113u2p4h.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local n = #string\n  local i = 1\n  while i <= n do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = math.max(max_len, i)\n    end\n    i = i + 1\n  end\n  count = 0\n  i = 1\n  while i <= n do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = math.max(max_len, n - i + 1)\n    end\n    i = i + 1\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__o786bq.lua:37: expected: 6, actual: 8\nstack traceback:\n\t/tmp/tmp__o786bq.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbrx1s5l.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmplbrx1s5l.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local zeros = 0\n  local ones = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      zeros = zeros + 1\n    else\n      ones = ones + 1\n    end\n    count = count + 1\n    if zeros == ones then\n      if count > max_diff then\n        max_diff = count\n      end\n      count = 0\n      zeros = 0\n      ones = 0\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz1ifjse.lua:29: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpyz1ifjse.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96cwebj_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp96cwebj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01kjv5xq.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp01kjv5xq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"1\" then\n            count = count + 1\n        else\n            count = count - 1\n        end\n        if count > max then\n            max = count\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21ue6uii.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp21ue6uii.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] then\n            max_length = math.max(max_length, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkh9u8rm4.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkh9u8rm4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputcd1uj_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmputcd1uj_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count_0 = 0\n\tlocal count_1 = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount_0 = count_0 + 1\n\t\telse\n\t\t\tcount_1 = count_1 + 1\n\t\tend\n\t\tmax_diff = math.max(max_diff, math.abs(count_0 - count_1))\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v5s3cxo.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4v5s3cxo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  local len = string.len(string)\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a9n2nix.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp6a9n2nix.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count_0, count_1 = 0, 0\n    local max_diff = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrqb_xn8.lua:21: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpzrqb_xn8.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max_diff then\n      max_diff = count\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkykgb4uc.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpkykgb4uc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eaztzi6.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp5eaztzi6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x0qj1uh.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp_x0qj1uh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local map = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if map[count] then\n            max_len = math.max(max_len, i - map[count])\n        else\n            map[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky5p3919.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpky5p3919.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0mmrn0c.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmph0mmrn0c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_len = 0\n\tlocal count = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tif string[i] == '0' then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count == 0 then\n\t\t\tmax_len = i\n\t\tend\n\t\tif hash[count] then\n\t\t\tmax_len = math.max(max_len, i - hash[count])\n\t\telse\n\t\t\thash[count] = i\n\t\tend\n\tend\n\treturn max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoea9mbnb.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpoea9mbnb.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprupd59xy.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmprupd59xy.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlrysknz.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpxlrysknz.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string[i] == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] == nil then\n      hash[count] = i\n    else\n      max_len = math.max(max_len, i - hash[count])\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnyz17tj.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpcnyz17tj.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max_diff then\n\t\t\tmax_diff = count\n\t\tend\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ngvz6qr.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp2ngvz6qr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_length = math.max(max_length, i - hash[count])\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wft07r6.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp7wft07r6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_zero = 0\n  local count_one = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_zero = count_zero + 1\n    else\n      count_one = count_one + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_zero - count_one))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc_q_1vn.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpdc_q_1vn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n        if hash[count] == nil then\n            hash[count] = i\n        else\n            max_length = math.max(max_length, i - hash[count])\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wft07r6.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp7wft07r6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local count = 0\n    local max_count = 0\n    local zero_count = 0\n    local one_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwokipbu7.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xhy9ivx.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp4xhy9ivx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_length = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_length = i\n        end\n    end\n    return max_length\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt76olam9.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpt76olam9.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count_0 = 0\n    local count_1 = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count_0 = count_0 + 1\n        else\n            count_1 = count_1 + 1\n        end\n        if count_0 == count_1 then\n            max_diff = math.max(max_diff, count_0)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdy046tr.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpqdy046tr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal count = 0\n\tlocal max = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == \"0\" then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max then\n\t\t\tmax = count\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn751jml.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpqn751jml.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local hash = {}\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] then\n      max_len = math.max(max_len, i - hash[count])\n    else\n      hash[count] = i\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x0qj1uh.lua:27: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp_x0qj1uh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local hash = {}\n    for i = 1, #string do\n        if string[i] == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n        if hash[count] then\n            max_len = math.max(max_len, i - hash[count])\n        else\n            hash[count] = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafyzot1z.lua:27: expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpafyzot1z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count = 0\n  local zero_count = 0\n  local one_count = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      zero_count = zero_count + 1\n    else\n      one_count = one_count + 1\n    end\n    count = count + 1\n    if count == 1 then\n      max_diff = one_count - zero_count\n    else\n      if max_diff < one_count - zero_count then\n        max_diff = one_count - zero_count\n      end\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr567mmq6.lua:28: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpr567mmq6.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local len = string.len(string)\n  local hash = {}\n  for i = 1, len do\n    if string.sub(string, i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = i\n    end\n    if hash[count] == nil then\n      hash[count] = i\n    else\n      if max_len < i - hash[count] then\n        max_len = i - hash[count]\n      end\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm0gwp4l.lua:30: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbm0gwp4l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local count = 0\n  local max = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count < 0 then\n      count = 0\n    end\n    if count > max then\n      max = count\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2amz8rr.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpa2amz8rr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    for i = 1, #string do\n        if string:sub(i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp472i7h85.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp472i7h85.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0 + count_1)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafir0pk4.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpafir0pk4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        max_diff = math.max(max_diff, count)\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxgdu4n3.lua:23: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpcxgdu4n3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = #string\n    for i = 1, n do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_diff = math.max(max_diff, i)\n        end\n    end\n    count = 0\n    for i = n, 1, -1 do\n        if string:sub(i, i) == '0' then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_diff = math.max(max_diff, n - i + 1)\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxfezqm1.lua:33: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpjxfezqm1.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n\tlocal max_diff = 0\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i) == '0' then\n\t\t\tcount = count - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\tend\n\t\tif count < 0 then\n\t\t\tcount = 0\n\t\tend\n\t\tif count > max_diff then\n\t\t\tmax_diff = count\n\t\tend\n\tend\n\treturn max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj62v7_8v.lua:24: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmpj62v7_8v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01kjv5xq.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp01kjv5xq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i=1,n do\n        if string.sub(string,i,i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4zp4635.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpd4zp4635.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_1 + count_0)\n    end\n  end\n  count_0 = 0\n  count_1 = 0\n  for i = n, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_1 + count_0)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmwpdm83.lua:35: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgmwpdm83.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn751jml.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpqn751jml.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == '0' then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    if count_0 == count_1 then\n      max_diff = math.max(max_diff, count_0)\n    end\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k1un5wb.lua:22: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp1k1un5wb.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_len = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count == 0 then\n            max_len = i\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn751jml.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpqn751jml.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_len = 0\n  local count = 0\n  local n = #string\n  for i = 1, n do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = math.max(max_len, i)\n    end\n  end\n  count = 0\n  for i = n, 1, -1 do\n    if string:sub(i, i) == \"0\" then\n      count = count - 1\n    else\n      count = count + 1\n    end\n    if count == 0 then\n      max_len = math.max(max_len, n - i + 1)\n    end\n  end\n  return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122994,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b0trpkq.lua:33: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp2b0trpkq.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n  local max_diff = 0\n  local count_0 = 0\n  local count_1 = 0\n  for i = 1, #string do\n    if string:sub(i, i) == \"0\" then\n      count_0 = count_0 + 1\n    else\n      count_1 = count_1 + 1\n    end\n    max_diff = math.max(max_diff, math.abs(count_0 - count_1))\n  end\n  return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027842,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdp66s0_.lua:20: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbdp66s0_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nlocal function find_length(string)\n    local max_diff = 0\n    local count = 0\n    local n = string.len(string)\n    for i = 1, n do\n        if string.sub(string, i, i) == \"0\" then\n            count = count - 1\n        else\n            count = count + 1\n        end\n        if count < 0 then\n            count = 0\n        end\n        if count > max_diff then\n            max_diff = count\n        end\n    end\n    return max_diff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_length\n    lu.assertEquals(candidate('11000010001'), 6)\n    lu.assertEquals(candidate('10111'), 1)\n    lu.assertEquals(candidate('11011101100101'), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122993,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01kjv5xq.lua:25: expected: 6, actual: 2\nstack traceback:\n\t/tmp/tmp01kjv5xq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}