{
  "name": "mbpp_245_max_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i - 1] + max_sum_right[i + 1])\n  end\n  return max_sum\nend",
    "    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if sum < 0 then\n            sum = arr[i]\n        else\n            sum = sum + arr[i]\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  for i = 1, #arr do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}",
    "    local max_sum = 0\n    local sum = 0\n    local i = 1\n    while i <= #arr do\n        sum = sum + arr[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n        i = i + 1\n    end\n    return max_sum\nend",
    "  local max_sum = 0\n  local sum = 0\n  local i = 1\n  local j = 1\n  while i <= #arr do\n    while j <= #arr and arr[j] > arr[j+1] do\n      sum = sum + arr[j]\n      j = j + 1\n    end\n    sum = sum + arr[j]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    sum = 0\n    i = j + 1\n    j = i\n  end\n  return max_sum\nend",
    "    local n = #arr\n    local max_sum = 0\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_arr[i] then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend",
    "\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tsum = sum + arr[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\t\tmax_sum_left[i] = max_sum\n\tend\n\tsum = 0\n\tfor i = #arr, 1, -1 do\n\t\tsum = sum + arr[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\t\tmax_sum_right[i] = max_sum\n\tend\n\tfor i = 1, #arr - 1 do\n\t\tif max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i + 1]\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        sum = math.max(arr[i], sum + arr[i])\n        max_sum = math.max(max_sum, sum)\n    end\n    return max_sum\nend",
    "  local max_sum = 0\n  local len = #arr\n  local sum = {}\n  for i = 1, len do\n    sum[i] = {}\n    for j = 1, len do\n      sum[i][j] = 0\n    end\n  end",
    "  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend",
    "  local max = 0\n  local n = #arr\n  local l = {}\n  local r = {}",
    "  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend",
    "  local max_sum = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = i, #arr do\n      sum = sum + arr[j]\n      max_sum = math.max(max_sum, sum)\n    end\n  end\n  return max_sum\nend",
    "\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left_i = 0\n\tlocal max_sum_right_i = 0\n\tlocal max_sum_left_j = 0\n\tlocal max_sum_right_j = 0\n\tlocal sum = 0\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal n = 1\n\tlocal o = 1\n\tlocal p = 1\n\tlocal q = 1\n\tlocal r = 1\n\tlocal s = 1\n\tlocal t = 1\n\tlocal u = 1\n\tlocal v = 1\n\tlocal w = 1\n\tlocal x = 1\n\tlocal y = 1\n\tlocal z = 1\n\tlocal aa = 1\n\tlocal ab = 1\n\tlocal ac = 1\n\tlocal ad = 1\n\tlocal ae = 1\n\tlocal af = 1\n\tlocal ag = 1\n\tlocal ah = 1\n\tlocal ai = 1\n\tlocal aj = 1\n\tlocal ak = 1\n\tlocal al = 1\n\tlocal am = 1\n\tlocal an = 1\n\tlocal ao = 1\n\tlocal ap = 1\n\tlocal aq = 1\n\tlocal ar = 1\n\tlocal as = 1\n\tlocal at = 1\n\tlocal au = 1\n\tlocal av = 1\n\tlocal aw = 1\n\tlocal ax = 1\n\tlocal ay = 1\n\tlocal az = 1\n\tlocal ba = 1\n\tlocal bb = 1\n\tlocal bc = 1\n\tlocal bd = 1\n\tlocal be = 1\n\tlocal bf = 1\n\tlocal bg = 1\n\tlocal bh = 1\n\tlocal bi = 1\n\tlocal bj = 1\n\tlocal bk = 1\n\tlocal bl = 1\n\tlocal bm = 1\n\tlocal bn = 1\n\tlocal bo = 1\n\tlocal bp = 1\n\tlocal bq = 1\n\tlocal br = 1\n\tlocal bs = 1\n\tlocal bt = 1\n\tlocal bu = 1\n\tlocal bv = 1\n\tlocal bw = 1\n\tlocal bx = 1",
    "    local max = 0\n    local sum = 0\n    local max_sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n        else\n            max_sum = math.max(max_sum, sum)\n            sum = arr[i]\n        end\n    end\n    max_sum = math.max(max_sum, sum)\n    return max_sum\nend",
    "  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend",
    "  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[j] + arr[i] > max_sum_arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend"
  ]
}