{
  "name": "mbpp_450_extract_string",
  "language": "lua",
  "prompt": "-- Write a function to extract specified size of strings from a given table of string values.\nlocal function extract_string(str, l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_string\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 8), {'practice', 'solution'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 6), {'Python'})\n    lu.assertEquals(candidate({'Python', 'list', 'exercises', 'practice', 'solution'}, 9), {'exercises'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal s = {}\n\tfor i = 1, l do\n\t\ts[i] = str:sub(i, i)\n\tend\n\treturn s\nend",
    "    local t = {}\n    for i = 1, #str, l do\n        t[#t + 1] = str:sub(i, i + l - 1)\n    end\n    return t\nend",
    "\tlocal str_table = {}\n\tfor i = 1, #str do\n\t\tstr_table[i] = string.sub(str, i, i)\n\tend\n\tlocal str_table_l = {}\n\tfor i = 1, l do\n\t\tstr_table_l[i] = str_table[i]\n\tend\n\treturn str_table_l\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\ttable.insert(t, str:sub(i, i + l - 1))\n\tend\n\treturn t\nend",
    "  local str_t = {}\n  for i = 1, #str do\n    local s = str:sub(i, i)\n    if s ~= \" \" then\n      table.insert(str_t, s)\n    end\n  end\n  local str_t_l = #str_t\n  if str_t_l < l then\n    for i = 1, l - str_t_l do\n      table.insert(str_t, \" \")\n    end\n  end\n  return str_t\nend",
    "\tlocal s = {}\n\tfor i = 1, l do\n\t\ts[i] = str:sub(i, i)\n\tend\n\treturn s\nend",
    "    local t = {}\n    for i = 1, #str do\n        if #t == l then\n            break\n        end\n        t[#t + 1] = str[i]\n    end\n    return t\nend",
    "  if #str < l then\n    return str\n  else\n    return string.sub(str, 1, l)\n  end\nend",
    "\tlocal s = {}\n\tfor i = 1, l do\n\t\ts[i] = str:sub(i, i)\n\tend\n\treturn s\nend",
    "\tlocal s = {}\n\tfor i = 1, #str do\n\t\tif #str[i] == l then\n\t\t\ttable.insert(s, str[i])\n\t\tend\n\tend\n\treturn s\nend",
    "\tlocal s = {}\n\tfor i = 1, l do\n\t\ts[i] = str:sub(i, i)\n\tend\n\treturn s\nend",
    "    local result = {}\n    for i = 1, #str do\n        local word = str[i]\n        if #word == l then\n            result[#result + 1] = word\n        end\n    end\n    return result\nend",
    "    local s = {}\n    for i = 1, l do\n        s[i] = str:sub(i, i)\n    end\n    return s\nend",
    "    local t = {}\n    for i = 1, l do\n        t[i] = str:sub(i, i)\n    end\n    return t\nend",
    "\tlocal s = {}\n\tfor i = 1, l do\n\t\ts[i] = str:sub(i, i)\n\tend\n\treturn s\nend",
    "\tlocal t = {}\n\tfor i = 1, #str do\n\t\tif #t == l then\n\t\t\tbreak\n\t\tend\n\t\tt[#t + 1] = str:sub(i, i)\n\tend\n\treturn table.concat(t)\nend",
    "\tlocal t = {}\n\tfor i = 1, #str, l do\n\t\tt[#t + 1] = str:sub(i, i + l - 1)\n\tend\n\treturn t\nend",
    "  local s = {}\n  for i = 1, l do\n    s[i] = str:sub(i, i)\n  end\n  return s\nend",
    "    local s = {}\n    for i = 1, l do\n        s[i] = str:sub(i, i)\n    end\n    return s\nend",
    "\tlocal t = {}\n\tfor i = 1, l do\n\t\tt[i] = str:sub(i, i)\n\tend\n\treturn t\nend"
  ]
}