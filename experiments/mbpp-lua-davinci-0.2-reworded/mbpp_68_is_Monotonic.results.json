{
  "name": "mbpp_68_is_Monotonic",
  "language": "lua",
  "prompt": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    end\n    local flag = 0\n    for i = 2, #A do\n        if A[i] > A[i - 1] then\n            flag = 1\n        elseif A[i] < A[i - 1] then\n            flag = -1\n        end\n        if flag * (A[i] - A[i - 1]) < 0 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp008mqyys.lua:25: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp008mqyys.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 2, n do\n    if A[i] < A[i-1] then\n      increasing = false\n    end\n    if A[i] > A[i-1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local increasing = true\n  local decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i-1] then\n      increasing = false\n    end\n    if A[i] > A[i-1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i - 1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    local i = 1\n    local j = 2\n    while i < n and j < n do\n        if A[i] < A[j] then\n            i = i + 1\n            j = j + 1\n        else\n            flag = false\n            break\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayi_777u.lua:22: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpayi_777u.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A <= 1 then return true end\n    local direction = A[2] - A[1]\n    for i = 3, #A do\n        if direction == 0 then\n            direction = A[i] - A[i-1]\n            if direction == 0 then return false end\n        else\n            if (A[i] - A[i-1]) / direction < 0 then return false end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i - 1] then\n      is_increasing = false\n    end\n    if A[i] > A[i - 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i-1] then\n            increasing = false\n        end\n        if A[i] > A[i-1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 1, #A - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tis_increasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = 2\n        end\n    end\n    if flag == 1 then\n        return true\n    elseif flag == 2 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnijbgw5.lua:25: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvnijbgw5.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i-1] then\n      is_increasing = false\n    end\n    if A[i] > A[i-1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local flag = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            flag = false\n            break\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkpbm3lp.lua:17: expected: true, actual: false\nstack traceback:\n\t/tmp/tmppkpbm3lp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local flag = 0\n  local n = #A\n  for i = 1, n - 1 do\n    if A[i] > A[i + 1] then\n      flag = 1\n      break\n    end\n  end\n  if flag == 0 then\n    print(\"The table is monotonic\")\n  else\n    print(\"The table is not monotonic\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "The table is not monotonic\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthhu1y2h.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpthhu1y2h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 0 then\n        return true\n    end\n    local increasing = true\n    local decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A <= 1 then\n        return true\n    end\n    local increasing = true\n    local decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i-1] < A[i] then\n            is_decreasing = false\n        elseif A[i-1] > A[i] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = 2\n        else\n            flag = 0\n        end\n    end\n    if flag == 1 then\n        print(\"Monotonic Increasing\")\n    elseif flag == 2 then\n        print(\"Monotonic Decreasing\")\n    else\n        print(\"Not Monotonic\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "Not Monotonic\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8v93ykb.lua:25: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpc8v93ykb.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 0 then\n        return true\n    end\n    local direction = 0\n    local last = A[1]\n    for i = 2, #A do\n        if A[i] > last then\n            if direction == 0 then\n                direction = 1\n            elseif direction == -1 then\n                return false\n            end\n        elseif A[i] < last then\n            if direction == 0 then\n                direction = -1\n            elseif direction == 1 then\n                return false\n            end\n        end\n        last = A[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i - 1] then\n      is_increasing = false\n    end\n    if A[i] > A[i - 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal flag = true\n\tfor i = 1, #A - 1 do\n\t\tif A[i] > A[i + 1] then\n\t\t\tflag = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxonypbwc.lua:16: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxonypbwc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i-1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_Increasing = true\n    local is_Decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            is_Increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_Decreasing = false\n        end\n    end\n    return is_Increasing or is_Decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 1, n - 1 do\n    if A[i] > A[i + 1] then\n      is_increasing = false\n    end\n    if A[i] < A[i + 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local flag = 0\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            flag = 1\n            break\n        end\n    end\n    if flag == 1 then\n        for i = 1, n - 1 do\n            if A[i] < A[i + 1] then\n                return false\n            end\n        end\n        return true\n    else\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n-1 do\n\t\tif A[i] < A[i+1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i+1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    if n == 0 then\n        return true\n    end\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i - 1] then\n      is_increasing = false\n    end\n    if A[i] > A[i - 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    end\n    local direction = A[2] - A[1]\n    for i = 3, #A do\n        if direction == 0 then\n            direction = A[i] - A[i-1]\n            if direction == 0 then\n                return false\n            end\n        elseif (A[i] - A[i-1]) / direction < 0 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local flag1 = true\n    local flag2 = true\n    for i = 1, #A - 1 do\n        if A[i] > A[i + 1] then\n            flag1 = false\n        end\n        if A[i] < A[i + 1] then\n            flag2 = false\n        end\n    end\n    if flag1 == false and flag2 == false then\n        flag = false\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_monotonic = true\n    local n = #A\n    local direction = 0\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            if direction == 0 then\n                direction = 1\n            elseif direction == -1 then\n                is_monotonic = false\n                break\n            end\n        elseif A[i] > A[i + 1] then\n            if direction == 0 then\n                direction = -1\n            elseif direction == 1 then\n                is_monotonic = false\n                break\n            end\n        end\n    end\n    return is_monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal flag = 0\n\tif n == 1 then\n\t\treturn true\n\tend\n\tfor i = 1, n-1 do\n\t\tif A[i] < A[i+1] then\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tend\n\tend\n\tif flag == 1 then\n\t\tfor i = 1, n-1 do\n\t\t\tif A[i] > A[i+1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\telse\n\t\tfor i = 1, n-1 do\n\t\t\tif A[i] < A[i+1] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local i = 1\n    while i < #A do\n        if A[i] < A[i+1] then\n            flag = 1\n        elseif A[i] > A[i+1] then\n            flag = -1\n        end\n        i = i + 1\n    end\n    if flag == 1 then\n        print(\"The table is monotonic\")\n    elseif flag == -1 then\n        print(\"The table is monotonic\")\n    else\n        print(\"The table is not monotonic\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "The table is monotonic\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjluf_bv.lua:25: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcjluf_bv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n-1 do\n\t\tif A[i] > A[i+1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] < A[i+1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i-1] then\n            increasing = false\n        end\n        if A[i] > A[i-1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = 2\n        else\n            flag = 0\n            break\n        end\n    end\n    if flag == 1 then\n        print(\"The given table is monotonic increasing\")\n    elseif flag == 2 then\n        print(\"The given table is monotonic decreasing\")\n    else\n        print(\"The given table is not monotonic\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "The given table is not monotonic\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4t66n5f.lua:26: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_4t66n5f.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local n = #A\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = 2\n        end\n    end\n    if flag == 0 then\n        return true\n    elseif flag == 1 then\n        for i = 1, n - 1 do\n            if A[i] > A[i + 1] then\n                return false\n            end\n        end\n        return true\n    elseif flag == 2 then\n        for i = 1, n - 1 do\n            if A[i] < A[i + 1] then\n                return false\n            end\n        end\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  if n < 2 then return true end\n  local inc = A[2] - A[1] > 0\n  for i = 3, n do\n    if inc ~= (A[i] - A[i-1] > 0) then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiu7ehjzt.lua:16: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiu7ehjzt.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    if n < 2 then\n        return true\n    end\n    local is_increasing = A[1] < A[2]\n    for i = 2, n - 1 do\n        if is_increasing then\n            if A[i] > A[i + 1] then\n                return false\n            end\n        else\n            if A[i] < A[i + 1] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    local i = 1\n    while i < n do\n        if A[i] > A[i+1] then\n            flag = false\n            break\n        end\n        i = i + 1\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xun_77g.lua:19: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1xun_77g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 1, #A - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tis_increasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_non_decreasing = true\n    local is_non_increasing = true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsrs9st4t.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local flag1 = true\n    local flag2 = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag1 = true\n        else\n            flag1 = false\n            break\n        end\n    end\n    for i = 1, #A - 1 do\n        if A[i] > A[i + 1] then\n            flag2 = true\n        else\n            flag2 = false\n            break\n        end\n    end\n    if flag1 or flag2 then\n        flag = true\n    else\n        flag = false\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs5491vf.lua:33: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgs5491vf.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    if n == 1 then\n        return flag\n    end\n    if A[1] < A[2] then\n        for i = 2, n - 1 do\n            if A[i] > A[i + 1] then\n                flag = false\n                break\n            end\n        end\n    else\n        for i = 2, n - 1 do\n            if A[i] < A[i + 1] then\n                flag = false\n                break\n            end\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i=2,#A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    if n == 1 then\n        return true\n    else\n        for i = 1, n - 1 do\n            if A[i] > A[i + 1] then\n                flag = false\n                break\n            end\n        end\n        return flag\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39ta63c_.lua:21: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp39ta63c_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = -1\n        end\n    end\n    if flag == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmn8_ije6.lua:21: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmn8_ije6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    if n == 1 then\n        return true\n    end\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            flag = false\n            break\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp838r_474.lua:17: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp838r_474.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A <= 1 then return true end\n    local sign = 0\n    for i = 2, #A do\n        local diff = A[i] - A[i-1]\n        if diff == 0 then\n            -- do nothing\n        elseif diff > 0 then\n            if sign == 0 then\n                sign = 1\n            elseif sign == -1 then\n                return false\n            end\n        elseif diff < 0 then\n            if sign == 0 then\n                sign = -1\n            elseif sign == 1 then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] > A[i + 1] then\n            flag = 1\n            break\n        end\n    end\n    if flag == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukv7uzm3.lua:20: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpukv7uzm3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_non_decreasing = true\n    local is_non_increasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_non_decreasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_non_increasing = false\n        end\n    end\n    return is_non_decreasing or is_non_increasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 1, #A - 1 do\n\t\tif A[i] > A[i + 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] < A[i + 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal flag = 0\n\tfor i = 1, #A - 1 do\n\t\tif A[i] > A[i + 1] then\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tend\n\tend\n\tif flag == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg4h94do7.lua:20: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg4h94do7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal flag = true\n\tlocal n = #A\n\tfor i = 1, n - 1 do\n\t\tif A[i] > A[i + 1] then\n\t\t\tflag = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_9sukiw.lua:17: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp_9sukiw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local flag = 0\n  for i = 1, #A - 1 do\n    if A[i] < A[i + 1] then\n      flag = 1\n    elseif A[i] > A[i + 1] then\n      flag = -1\n    end\n  end\n  if flag == 1 then\n    return true\n  elseif flag == -1 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe48836ic.lua:25: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe48836ic.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i-1] < A[i] then\n\t\t\tis_decreasing = false\n\t\telseif A[i-1] > A[i] then\n\t\t\tis_increasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_mono = true\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i-1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\tif not increasing and not decreasing then\n\t\tis_mono = false\n\tend\n\treturn is_mono\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local flag1 = 0\n    local flag2 = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag1 = 1\n        elseif A[i] > A[i + 1] then\n            flag2 = 1\n        end\n    end\n    if flag1 == 1 and flag2 == 1 then\n        flag = 0\n    elseif flag1 == 1 and flag2 == 0 then\n        flag = 1\n    elseif flag1 == 0 and flag2 == 1 then\n        flag = 2\n    else\n        flag = 3\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf49xzvgf.lua:28: expected: true, actual: 2\nstack traceback:\n\t/tmp/tmpf49xzvgf.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 0 then\n        return true\n    end\n    local direction = 0\n    local last = A[1]\n    for i = 2, #A do\n        if A[i] > last then\n            if direction == 0 then\n                direction = 1\n            elseif direction == -1 then\n                return false\n            end\n        elseif A[i] < last then\n            if direction == 0 then\n                direction = -1\n            elseif direction == 1 then\n                return false\n            end\n        end\n        last = A[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 2, n do\n\t\tif A[i] < A[i-1] then\n\t\t\tincreasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tdecreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_monotonic = true\n\tlocal n = #A\n\tlocal direction\n\tif A[1] < A[2] then\n\t\tdirection = \"increasing\"\n\telseif A[1] > A[2] then\n\t\tdirection = \"decreasing\"\n\telse\n\t\tdirection = \"neither\"\n\tend\n\tfor i = 2, n - 1 do\n\t\tif direction == \"increasing\" then\n\t\t\tif A[i] > A[i + 1] then\n\t\t\t\tis_monotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\telseif direction == \"decreasing\" then\n\t\t\tif A[i] < A[i + 1] then\n\t\t\t\tis_monotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\tif A[i] ~= A[i + 1] then\n\t\t\t\tis_monotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn is_monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    local i = 1\n    while i < n do\n        if A[i] > A[i+1] then\n            flag = false\n            break\n        end\n        i = i + 1\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xun_77g.lua:19: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1xun_77g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_monotonic = true\n\tlocal is_increasing = nil\n\tfor i = 1, #A - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tif is_increasing == false then\n\t\t\t\tis_monotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tis_increasing = true\n\t\telseif A[i] > A[i + 1] then\n\t\t\tif is_increasing == true then\n\t\t\t\tis_monotonic = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tis_increasing = false\n\t\tend\n\tend\n\treturn is_monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_increasing = true\n  local is_decreasing = true\n  for i = 2, #A do\n    if A[i] < A[i - 1] then\n      is_increasing = false\n    end\n    if A[i] > A[i - 1] then\n      is_decreasing = false\n    end\n  end\n  return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    if n == 1 then\n        return true\n    end\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    end\n    local flag = true\n    local direction = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            if direction == 0 then\n                direction = 1\n            elseif direction == -1 then\n                flag = false\n                break\n            end\n        elseif A[i] > A[i + 1] then\n            if direction == 0 then\n                direction = -1\n            elseif direction == 1 then\n                flag = false\n                break\n            end\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    else\n        local flag = 0\n        for i = 1, #A - 1 do\n            if A[i] > A[i + 1] then\n                flag = flag + 1\n            elseif A[i] < A[i + 1] then\n                flag = flag - 1\n            end\n        end\n        if flag == 0 or flag == #A - 1 or flag == -(#A - 1) then\n            return true\n        else\n            return false\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l6_z9wy.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4l6_z9wy.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "lua: /tmp/tmp18jpvfff.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local is_non_decreasing = true\n  local is_non_increasing = true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzamf19n9.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    if n == 1 then\n        return true\n    end\n    if A[1] < A[2] then\n        for i = 2, n - 1 do\n            if A[i] > A[i + 1] then\n                flag = false\n                break\n            end\n        end\n    else\n        for i = 2, n - 1 do\n            if A[i] < A[i + 1] then\n                flag = false\n                break\n            end\n        end\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local n = #A\n    for i = 1, n - 1 do\n        if A[i] > A[i + 1] then\n            flag = 1\n        end\n    end\n    if flag == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4vfgkyh.lua:20: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4vfgkyh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_Increasing = true\n\tlocal is_Decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_Increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_Decreasing = false\n\t\tend\n\tend\n\treturn is_Increasing or is_Decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local increasing = true\n    local decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    if n == 1 then\n        return true\n    end\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local n = #A\n    for i = 1, n - 1 do\n        if A[i] <= A[i + 1] then\n            flag = 1\n        else\n            flag = 0\n            break\n        end\n    end\n    if flag == 1 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobxvhi8s.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobxvhi8s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6ci7_hif.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 1, #A - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\t\tif A[i] > A[i + 1] then\n\t\t\tis_increasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    end\n    local direction = A[2] - A[1]\n    for i = 3, #A do\n        if direction == 0 then\n            direction = A[i] - A[i-1]\n            if direction == 0 then\n                return false\n            end\n        else\n            if math.abs(A[i] - A[i-1]) ~= 1 then\n                return false\n            end\n            if A[i] - A[i-1] ~= direction then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvrxkqpj.lua:28: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplvrxkqpj.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    local flag1 = 0\n    local flag2 = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag1 = 1\n        elseif A[i] > A[i + 1] then\n            flag2 = 1\n        end\n    end\n    if flag1 == 1 and flag2 == 0 then\n        flag = 1\n    elseif flag1 == 0 and flag2 == 1 then\n        flag = 2\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj84qiwj5.lua:24: expected: true, actual: 2\nstack traceback:\n\t/tmp/tmpj84qiwj5.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local is_Increasing = true\n    local is_Decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            is_Increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_Decreasing = false\n        end\n    end\n    return is_Increasing or is_Decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = true\n    local n = #A\n    if n == 1 then\n        return true\n    end\n    local i = 1\n    while i < n do\n        if A[i] > A[i+1] then\n            flag = false\n            break\n        end\n        i = i + 1\n    end\n    return flag\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgzbewf5.lua:22: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvgzbewf5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i - 1] then\n            is_increasing = false\n        end\n        if A[i] > A[i - 1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_monotonic = true\n\tlocal n = #A\n\tlocal i = 1\n\twhile i < n do\n\t\tif A[i] > A[i+1] then\n\t\t\tis_monotonic = false\n\t\t\tbreak\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn is_monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9aqajypn.lua:19: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9aqajypn.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i - 1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i - 1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            is_decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            is_increasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i=2,#A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n-1 do\n\t\tif A[i] < A[i+1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i+1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 1, n - 1 do\n        if A[i] < A[i + 1] then\n            decreasing = false\n        end\n        if A[i] > A[i + 1] then\n            increasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n  local n = #A\n  local increasing = true\n  local decreasing = true\n  for i = 1, n - 1 do\n    if A[i] < A[i + 1] then\n      decreasing = false\n    end\n    if A[i] > A[i + 1] then\n      increasing = false\n    end\n  end\n  return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local flag = 0\n    for i = 1, #A - 1 do\n        if A[i] < A[i + 1] then\n            flag = 1\n        elseif A[i] > A[i + 1] then\n            flag = -1\n        end\n    end\n    if flag == 0 then\n        return 0\n    elseif flag == 1 then\n        return 1\n    else\n        return -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbla49gm.lua:23: expected: true, actual: -1\nstack traceback:\n\t/tmp/tmpkbla49gm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local n = #A\n    local increasing = true\n    local decreasing = true\n    for i = 2, n do\n        if A[i] < A[i - 1] then\n            increasing = false\n        end\n        if A[i] > A[i - 1] then\n            decreasing = false\n        end\n    end\n    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal is_increasing = true\n\tlocal is_decreasing = true\n\tfor i = 2, #A do\n\t\tif A[i] < A[i-1] then\n\t\t\tis_increasing = false\n\t\tend\n\t\tif A[i] > A[i-1] then\n\t\t\tis_decreasing = false\n\t\tend\n\tend\n\treturn is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    if #A == 1 then\n        return true\n    end\n    local sign = A[2] - A[1]\n    for i = 3, #A do\n        if sign * (A[i] - A[i - 1]) < 0 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122900,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n\tlocal n = #A\n\tlocal increasing = true\n\tlocal decreasing = true\n\tfor i = 1, n - 1 do\n\t\tif A[i] < A[i + 1] then\n\t\t\tdecreasing = false\n\t\telseif A[i] > A[i + 1] then\n\t\t\tincreasing = false\n\t\tend\n\tend\n\treturn increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to check whether the given table is monotonic or not.\nlocal function is_Monotonic(A)\n    local is_increasing = true\n    local is_decreasing = true\n    for i = 2, #A do\n        if A[i] < A[i-1] then\n            is_increasing = false\n        end\n        if A[i] > A[i-1] then\n            is_decreasing = false\n        end\n    end\n    return is_increasing or is_decreasing\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_Monotonic\n    lu.assertEquals(candidate({6, 5, 4, 4}), true)\n    lu.assertEquals(candidate({1, 2, 2, 3}), true)\n    lu.assertEquals(candidate({1, 3, 2}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027768,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}