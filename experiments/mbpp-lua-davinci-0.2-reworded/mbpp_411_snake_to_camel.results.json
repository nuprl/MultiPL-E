{
  "name": "mbpp_411_snake_to_camel",
  "language": "lua",
  "prompt": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n\treturn word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx84tjyh.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpjx84tjyh.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%l)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrukto5n.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmprrukto5n.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n\treturn word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfz3npuc.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmprfz3npuc.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl4c9yvr.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpjl4c9yvr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub('_%l', string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxy10c5w.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpbxy10c5w.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbj4ns35.lua:3: bad argument #2 to 'gsub' (string/function/table expected, got nil)\nstack traceback:\n\t/tmp/tmpkbj4ns35.lua:3: in local 'candidate'\n\t/tmp/tmpkbj4ns35.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dqfjhhh.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmp0dqfjhhh.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  -- TODO: Implement the function\n  return word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg23_4et.lua:10: expected: \"AndroidTv\"\nactual: \"android_tv\"\nstack traceback:\n\t/tmp/tmpyg23_4et.lua:10: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  for w in word:gmatch(\"[^_]+\") do\n    result = result .. w:sub(1,1):upper() .. w:sub(2)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(w) return w:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmhxdzgp.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmplmhxdzgp.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        c = c:upper()\n        upper = false\n      end\n      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpte1dnon0.lua:23: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmpte1dnon0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(.)\", function(x) return x:upper() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf0xghpv.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmpkf0xghpv.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local capitalize = true\n  for char in word:gmatch(\".\") do\n    if char == \"_\" then\n      capitalize = true\n    else\n      if capitalize then\n        result = result .. char:upper()\n      else\n        result = result .. char\n      end\n      capitalize = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%a)\", function(letter)\n    return letter:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34saolfb.lua:11: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp34saolfb.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl4c9yvr.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpjl4c9yvr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqa48_tn.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpqqa48_tn.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%l)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrukto5n.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmprrukto5n.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl4c9yvr.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpjl4c9yvr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqa48_tn.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpqqa48_tn.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. c:upper()\n        upper = false\n      else\n        result = result .. c\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5mk9bx8.lua:24: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmpm5mk9bx8.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    local result = word:gsub(\"_(%w)\", function(w)\n        return w:upper()\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzyld29i.lua:12: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmppzyld29i.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper = false\n  for i = 1, #word do\n    local char = word:sub(i, i)\n    if char == \"_\" then\n      upper = true\n    else\n      if upper then\n        result = result .. char:upper()\n        upper = false\n      else\n        result = result .. char\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mf_xv12.lua:24: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp0mf_xv12.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local capitalize = false\n  for i = 1, #word do\n    local char = word:sub(i, i)\n    if char == \"_\" then\n      capitalize = true\n    else\n      if capitalize then\n        result = result .. char:upper()\n        capitalize = false\n      else\n        result = result .. char\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r3y411w.lua:24: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp9r3y411w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%a)\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp255vhsjy.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp255vhsjy.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c7j5328.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmp5c7j5328.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuizbaggu.lua:3: bad argument #2 to 'gsub' (string/function/table expected, got nil)\nstack traceback:\n\t/tmp/tmpuizbaggu.lua:3: in local 'candidate'\n\t/tmp/tmpuizbaggu.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%w\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl4c9yvr.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpjl4c9yvr.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkkx4_6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmpjzkkx4_6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_(%w)\", function(letter)\n    return letter:upper()\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy7gqml8.lua:11: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmpxy7gqml8.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    local result = \"\"\n    local upper = false\n    for i = 1, #word do\n        local c = word:sub(i, i)\n        if c == \"_\" then\n            upper = true\n        else\n            if upper then\n                result = result .. c:upper()\n                upper = false\n            else\n                result = result .. c\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wtwt3ya.lua:24: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp_wtwt3ya.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local upper_next = false\n  for i = 1, #word do\n    local char = word:sub(i, i)\n    if char == \"_\" then\n      upper_next = true\n    else\n      if upper_next then\n        char = char:upper()\n        upper_next = false\n      end\n      result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2v9k_y7.lua:23: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmpi2v9k_y7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"_\", \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fymkh2x.lua:9: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp9fymkh2x.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return (word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqa48_tn.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpqqa48_tn.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f3sf_sj.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp7f3sf_sj.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kf030h6.lua:9: expected: \"AndroidTv\"\nactual: \"android_Tv\"\nstack traceback:\n\t/tmp/tmp3kf030h6.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  local result = \"\"\n  local capitalize = false\n  for i = 1, #word do\n    local char = word:sub(i, i)\n    if char == \"_\" then\n      capitalize = true\n    else\n      if capitalize then\n        result = result .. char:upper()\n        capitalize = false\n      else\n        result = result .. char\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122719,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r3y411w.lua:24: expected: \"AndroidTv\"\nactual: \"androidTv\"\nstack traceback:\n\t/tmp/tmp9r3y411w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n    return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk85v7921.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpk85v7921.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to convert the given snake case string to camel case string.\nlocal function snake_to_camel(word)\n  return word:gsub(\"_%l\", string.upper):gsub(\"^%l\", string.upper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = snake_to_camel\n    lu.assertEquals(candidate('android_tv'), 'AndroidTv')\n    lu.assertEquals(candidate('google_pixel'), 'GooglePixel')\n    lu.assertEquals(candidate('apple_watch'), 'AppleWatch')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027833,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawkqj5ll.lua:9: expected: \"AndroidTv\"\nactual: \"Android_Tv\"\nstack traceback:\n\t/tmp/tmpawkqj5ll.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}