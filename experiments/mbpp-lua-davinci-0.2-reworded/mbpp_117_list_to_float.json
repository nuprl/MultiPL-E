{
  "name": "mbpp_117_list_to_float",
  "language": "lua",
  "prompt": "-- Write a function to convert all possible convertible elements in a table of tables to floats.\nlocal function list_to_float(test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = list_to_float\n    lu.assertEquals(candidate({{'3', '4'}, {'1', '26.45'}, {'7.32', '8'}, {'4', '8'}}), {{3.0, 4.0}, {1.0, 26.45}, {7.32, 8.0}, {4.0, 8.0}})\n    lu.assertEquals(candidate({{'4', '4'}, {'2', '27'}, {'4.12', '9'}, {'7', '11'}}), {{4.0, 4.0}, {2.0, 27.0}, {4.12, 9.0}, {7.0, 11.0}})\n    lu.assertEquals(candidate({{'6', '78'}, {'5', '26.45'}, {'1.33', '4'}, {'82', '13'}}), {{6.0, 78.0}, {5.0, 26.45}, {1.33, 4.0}, {82.0, 13.0}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local new_list = {}\n    for k, v in pairs(test_list) do\n        if type(v) == 'table' then\n            new_list[k] = list_to_float(v)\n        else\n            new_list[k] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    for i = 1, #test_list do\n        if type(test_list[i]) == \"table\" then\n            list_to_float(test_list[i])\n        else\n            test_list[i] = tonumber(test_list[i])\n        end\n    end\nend",
    "    local new_list = {}\n    for k, v in pairs(test_list) do\n        if type(v) == 'table' then\n            new_list[k] = list_to_float(v)\n        else\n            new_list[k] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == 'table' then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            list_to_float(v)\n        else\n            test_list[i] = tonumber(v)\n        end\n    end\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v)\n        end\n    end\n    return new_list\nend",
    "\tfor i,v in ipairs(test_list) do\n\t\tif type(v) == \"table\" then\n\t\t\tlist_to_float(v)\n\t\telse\n\t\t\ttest_list[i] = tonumber(v)\n\t\tend\n\tend\nend",
    "    for i,v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            list_to_float(v)\n        else\n            test_list[i] = tonumber(v)\n        end\n    end\nend",
    "    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            list_to_float(v)\n        elseif type(v) == \"string\" then\n            test_list[i] = tonumber(v)\n        end\n    end\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for k, v in pairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[k] = list_to_float(v)\n        else\n            new_list[k] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for k, v in pairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[k] = list_to_float(v)\n        elseif type(v) == \"string\" then\n            local num = tonumber(v)\n            if num then\n                new_list[k] = num\n            else\n                new_list[k] = v\n            end\n        else\n            new_list[k] = v\n        end\n    end\n    return new_list\nend",
    "\tfor i,v in pairs(test_list) do\n\t\tif type(v) == \"table\" then\n\t\t\tlist_to_float(v)\n\t\telseif type(v) == \"string\" then\n\t\t\tlocal num = tonumber(v)\n\t\t\tif num then\n\t\t\t\ttest_list[i] = num\n\t\t\tend\n\t\tend\n\tend\nend",
    "    for i, v in pairs(test_list) do\n        if type(v) == \"table\" then\n            list_to_float(v)\n        else\n            test_list[i] = tonumber(v)\n        end\n    end\nend",
    "    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            list_to_float(v)\n        elseif type(v) == \"string\" then\n            test_list[i] = tonumber(v)\n        end\n    end\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            local status, num = pcall(tonumber, v)\n            if status then\n                new_list[i] = num\n            else\n                new_list[i] = v\n            end\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend",
    "    local new_list = {}\n    for i, v in ipairs(test_list) do\n        if type(v) == \"table\" then\n            new_list[i] = list_to_float(v)\n        else\n            new_list[i] = tonumber(v) or v\n        end\n    end\n    return new_list\nend"
  ]
}