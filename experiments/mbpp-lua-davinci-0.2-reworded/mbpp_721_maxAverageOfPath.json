{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "lua",
  "prompt": "-- Given a square matrix of size N*N given as a table of tables, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1] = {cost[1][1], 1}\n\tfor i = 2, n do\n\t\tdp[1][i] = {dp[1][i - 1][1] + cost[1][i], dp[1][i - 1][2] + 1}\n\t\tdp[i][1] = {dp[i - 1][1][1] + cost[i][1], dp[i - 1][1][2] + 1}\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tmath.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j],\n\t\t\t\tmath.max(dp[i - 1][j][2], dp[i][j - 1][2]) + 1\n\t\t\t}\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local N = #cost\n    local dp = {}\n    for i = 1, N do\n        dp[i] = {}\n        for j = 1, N do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, N do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, N do\n        for j = 2, N do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    for k = 2, N do\n        for i = 1, N do\n            for j = 1, N do\n                if i == 1 and j == 1 then\n                    dp[i][j][k] = dp[i][j][k - 1]\n                elseif i == 1 then\n                    dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n                elseif j == 1 then\n                    dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n                else\n                    dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n                end\n            end\n        end\n    end\n    local maxAverage = -math.huge\n    for k = 1, N do\n        maxAverage = math.max(maxAverage, dp[N][N][k] / k)\n    end\n    return maxAverage\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    local sum = 0\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            sum = sum + cost[i][j]\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (n * n)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n                dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + dp[i][j].cost\n            dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\t-- do nothing\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\telse\n\t\t\t\tlocal a = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tlocal b = dp[i - 1][j][2] + 1\n\t\t\t\tlocal c = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tlocal d = dp[i][j - 1][2] + 1\n\t\t\t\tif a / b > c / d then\n\t\t\t\t\tdp[i][j][1] = a\n\t\t\t\t\tdp[i][j][2] = b\n\t\t\t\telse\n\t\t\t\t\tdp[i][j][1] = c\n\t\t\t\t\tdp[i][j][2] = d\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[1][i] = dp[1][i] + dp[1][i - 1]\n    dp[i][1] = dp[i][1] + dp[i - 1][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend"
  ]
}