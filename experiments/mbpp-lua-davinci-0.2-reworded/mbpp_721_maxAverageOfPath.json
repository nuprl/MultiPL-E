{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "lua",
  "prompt": "-- Given a square matrix of size N*N given as a table of tables, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nlocal function maxAverageOfPath(cost)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maxAverageOfPath\n    lu.assertEquals(candidate({{1, 2, 3}, {6, 5, 4}, {7, 3, 9}}), 5.2)\n    lu.assertEquals(candidate({{2, 3, 4}, {7, 6, 5}, {8, 4, 10}}), 6.2)\n    lu.assertEquals(candidate({{3, 4, 5}, {8, 7, 6}, {9, 5, 11}}), 7.2)\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}), 5.8)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1] = {cost[1][1], 1}\n\tfor i = 2, n do\n\t\tdp[1][i] = {dp[1][i - 1][1] + cost[1][i], dp[1][i - 1][2] + 1}\n\t\tdp[i][1] = {dp[i - 1][1][1] + cost[i][1], dp[i - 1][1][2] + 1}\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tmath.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j],\n\t\t\t\tmath.max(dp[i - 1][j][2], dp[i][j - 1][2]) + 1\n\t\t\t}\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local N = #cost\n    local dp = {}\n    for i = 1, N do\n        dp[i] = {}\n        for j = 1, N do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, N do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, N do\n        for j = 2, N do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    for k = 2, N do\n        for i = 1, N do\n            for j = 1, N do\n                if i == 1 and j == 1 then\n                    dp[i][j][k] = dp[i][j][k - 1]\n                elseif i == 1 then\n                    dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n                elseif j == 1 then\n                    dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n                else\n                    dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n                end\n            end\n        end\n    end\n    local maxAverage = -math.huge\n    for k = 1, N do\n        maxAverage = math.max(maxAverage, dp[N][N][k] / k)\n    end\n    return maxAverage\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    local sum = 0\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            sum = sum + cost[i][j]\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (n * n)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n                dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + dp[i][j].cost\n            dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\t-- do nothing\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\telse\n\t\t\t\tlocal a = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tlocal b = dp[i - 1][j][2] + 1\n\t\t\t\tlocal c = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tlocal d = dp[i][j - 1][2] + 1\n\t\t\t\tif a / b > c / d then\n\t\t\t\t\tdp[i][j][1] = a\n\t\t\t\t\tdp[i][j][2] = b\n\t\t\t\telse\n\t\t\t\t\tdp[i][j][1] = c\n\t\t\t\t\tdp[i][j][2] = d\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[1][i] = dp[1][i] + dp[1][i - 1]\n    dp[i][1] = dp[i][1] + dp[i - 1][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                -- do nothing\n            elseif i == 1 then\n                dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                dp[i][j].count = dp[i][j - 1].count + 1\n            elseif j == 1 then\n                dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                local avg1 = dp[i - 1][j].cost / dp[i - 1][j].count\n                local avg2 = dp[i][j - 1].cost / dp[i][j - 1].count\n                if avg1 > avg2 then\n                    dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                    dp[i][j].count = dp[i - 1][j].count + 1\n                else\n                    dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                    dp[i][j].count = dp[i][j - 1].count + 1\n                end\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    return dp[n][n][2] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tcost = 0,\n\t\t\t\tcount = 0\n\t\t\t}\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j] = {dp[i][j - 1][1] + cost[i][j], dp[i][j - 1][2] + 1}\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j] = {dp[i - 1][j][1] + cost[i][j], dp[i - 1][j][2] + 1}\n\t\t\telse\n\t\t\t\tlocal a = dp[i - 1][j]\n\t\t\t\tlocal b = dp[i][j - 1]\n\t\t\t\tif a[1] / a[2] > b[1] / b[2] then\n\t\t\t\t\tdp[i][j] = {a[1] + cost[i][j], a[2] + 1}\n\t\t\t\telse\n\t\t\t\t\tdp[i][j] = {b[1] + cost[i][j], b[2] + 1}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i] = dp[1][i] + dp[1][i - 1]\n        dp[i][1] = dp[i][1] + dp[i - 1][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = dp[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    for k = 2, n do\n        for i = 1, n do\n            for j = 1, n do\n                dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n            end\n        end\n    end\n    local max = 0\n    for k = 1, n do\n        max = math.max(max, dp[n][n][k] / k)\n    end\n    return max\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {0, 0}\n\t\tend\n\tend\n\tdp[1][1] = {cost[1][1], 1}\n\tfor i = 2, n do\n\t\tdp[1][i] = {dp[1][i - 1][1] + cost[1][i], dp[1][i - 1][2] + 1}\n\t\tdp[i][1] = {dp[i - 1][1][1] + cost[i][1], dp[i - 1][1][2] + 1}\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tmath.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j],\n\t\t\t\tmath.max(dp[i - 1][j][2], dp[i][j - 1][2]) + 1\n\t\t\t}\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tdp[1] = {}\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i-1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tdp[i] = {}\n\t\tdp[i][1] = dp[i-1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2*n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tlocal cost1 = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\tlocal count1 = dp[i - 1][j].count + 1\n\t\t\tlocal cost2 = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\tlocal count2 = dp[i][j - 1].count + 1\n\t\t\tif cost1 * count2 > cost2 * count1 then\n\t\t\t\tdp[i][j].cost = cost1\n\t\t\t\tdp[i][j].count = count1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = cost2\n\t\t\t\tdp[i][j].count = count2\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n    dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      local a = dp[i - 1][j].cost + cost[i][j]\n      local b = dp[i][j - 1].cost + cost[i][j]\n      if a > b then\n        dp[i][j].cost = a\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = b\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\tend\n\tend\n\tdp[1][1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n\t\tend\n\tend\n\tlocal max = dp[n][n][1]\n\tlocal max_i = n\n\tlocal max_j = n\n\tfor i = n, 2, -1 do\n\t\tfor j = n, 2, -1 do\n\t\t\tif dp[i][j][1] > max then\n\t\t\t\tmax = dp[i][j][1]\n\t\t\t\tmax_i = i\n\t\t\t\tmax_j = j\n\t\t\tend\n\t\tend\n\tend\n\tlocal path = {}\n\tlocal i = max_i\n\tlocal j = max_j\n\twhile i > 1 or j > 1 do\n\t\ttable.insert(path, {i, j})\n\t\tif i > 1 and j > 1 then\n\t\t\tif dp[i - 1][j][1] > dp[i][j - 1][1] then\n\t\t\t\ti = i - 1\n\t\t\telse\n\t\t\t\tj = j - 1\n\t\t\tend\n\t\telseif i > 1 then\n\t\t\ti = i - 1\n\t\telse\n\t\t\tj = j - 1\n\t\tend\n\tend\n\ttable.insert(path, {1, 1})\n\t",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = cost[i][j] + dp[i][j - 1]\n            elseif j == 1 then\n                dp[i][j] = cost[i][j] + dp[i - 1][j]\n            else\n                dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].path = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].path = dp[1][i - 1].path + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].path = dp[i - 1][1].path + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].path > dp[i][j - 1].cost / dp[i][j - 1].path then\n                dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n                dp[i][j].path = dp[i - 1][j].path + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n                dp[i][j].path = dp[i][j - 1].path + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].path\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (n * n)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j][1] = cost[i][j]\n    end\n  end\n  for i = 2, n do\n    dp[1][i][2] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][2] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][2] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  return dp[n][n][2] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j][1] / dp[i - 1][j][2] > dp[i][j - 1][1] / dp[i][j - 1][2] then\n                dp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n                dp[i][j][2] = dp[i - 1][j][2] + 1\n            else\n                dp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n                dp[i][j][2] = dp[i][j - 1][2] + 1\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n    dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      local cost1 = dp[i - 1][j].cost + cost[i][j]\n      local count1 = dp[i - 1][j].count + 1\n      local cost2 = dp[i][j - 1].cost + cost[i][j]\n      local count2 = dp[i][j - 1].count + 1\n      if cost1 / count1 > cost2 / count2 then\n        dp[i][j].cost = cost1\n        dp[i][j].count = count1\n      else\n        dp[i][j].cost = cost2\n        dp[i][j].count = count2\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {\n        cost = 0,\n        count = 0\n      }\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 1, n do\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        -- do nothing\n      elseif i == 1 then\n        dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n        dp[i][j].count = dp[i][j - 1].count + 1\n      elseif j == 1 then\n        dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        local left = dp[i][j - 1]\n        local up = dp[i - 1][j]\n        if left.cost * up.count > up.cost * left.count then\n          dp[i][j].cost = left.cost + cost[i][j]\n          dp[i][j].count = left.count + 1\n        else\n          dp[i][j].cost = up.cost + cost[i][j]\n          dp[i][j].count = up.count + 1\n        end\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n      if i > 1 and j > 1 then\n        dp[i][j] = math.max(dp[i][j] + dp[i - 1][j], dp[i][j] + dp[i][j - 1])\n      elseif i > 1 then\n        dp[i][j] = dp[i][j] + dp[i - 1][j]\n      elseif j > 1 then\n        dp[i][j] = dp[i][j] + dp[i][j - 1]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i-1][1] + cost[i][1]\n        dp[1][i] = dp[1][i-1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2*n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for j = 2, n do\n    dp[1][j].cost = dp[1][j - 1].cost + cost[1][j]\n    dp[1][j].count = dp[1][j - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n                dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    local maxAvg = dp[n][n] / (2 * n - 1)\n    return maxAvg\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for j = 2, n do\n        dp[1][j].cost = dp[1][j - 1].cost + cost[1][j]\n        dp[1][j].count = dp[1][j - 1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n                dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = cost[i][j]\n      dp[i][j].count = 1\n    end\n  end\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n    dp[1][i].count = dp[1][i - 1].count + 1\n  end\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {cost[i][j], 1}\n        end\n    end\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + dp[1][i][1]\n        dp[1][i][2] = dp[1][i - 1][2] + 1\n        dp[i][1][1] = dp[i - 1][1][1] + dp[i][1][1]\n        dp[i][1][2] = dp[i - 1][1][2] + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local a = dp[i - 1][j][1] + dp[i][j][1]\n            local b = dp[i - 1][j][2] + 1\n            local c = dp[i][j - 1][1] + dp[i][j][1]\n            local d = dp[i][j - 1][2] + 1\n            if a / b > c / d then\n                dp[i][j][1] = a\n                dp[i][j][2] = b\n            else\n                dp[i][j][1] = c\n                dp[i][j][2] = d\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {cost = cost[i][j], count = 1}\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tlocal avg1 = dp[i][j - 1].cost / dp[i][j - 1].count\n\t\t\t\tlocal avg2 = dp[i - 1][j].cost / dp[i - 1][j].count\n\t\t\t\tif avg1 > avg2 then\n\t\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n\t\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\t\telse\n\t\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n\t\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + dp[1][i][1]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + dp[1][i][2]\n\t\tdp[i][1][1] = dp[i - 1][1][1] + dp[i][1][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + dp[i][1][2]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + dp[i][j][1]\n\t\t\tdp[i][j][2] = math.max(dp[i - 1][j][2], dp[i][j - 1][2]) + dp[i][j][2]\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n    end\n  end\n  dp[1][1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  local max = dp[n][n][1]\n  for k = 2, n do\n    for i = 1, n do\n      for j = 1, n do\n        if i == 1 and j == 1 then\n          dp[i][j][k] = max\n        elseif i == 1 then\n          dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n        elseif j == 1 then\n          dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n        else\n          dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n        end\n      end\n    end\n    max = math.max(max, dp[n][n][k])\n  end\n  return max / n\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tlocal a = dp[i - 1][j]\n\t\t\tlocal b = dp[i][j - 1]\n\t\t\tif a.cost * b.count > b.cost * a.count then\n\t\t\t\tdp[i][j].cost = a.cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = a.count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = b.cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = b.count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local maxAvg = 0\n    local maxPath = {}\n    local function findPath(i, j, path, sum)\n        if i == n and j == n then\n            local avg = sum / (#path - 1)\n            if avg > maxAvg then\n                maxAvg = avg\n                maxPath = path\n            end\n            return\n        end\n        if i < n then\n            table.insert(path, {i + 1, j})\n            findPath(i + 1, j, path, sum + cost[i + 1][j])\n            table.remove(path)\n        end\n        if j < n then\n            table.insert(path, {i, j + 1})\n            findPath(i, j + 1, path, sum + cost[i][j + 1])\n            table.remove(path)\n        end\n    end\n    findPath(1, 1, {{1, 1}}, cost[1][1])\n    return maxAvg, maxPath\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local c1 = dp[i - 1][j].cost + cost[i][j]\n            local c2 = dp[i][j - 1].cost + cost[i][j]\n            if c1 > c2 then\n                dp[i][j].cost = c1\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = c2\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + dp[i][1]\n        dp[1][i] = dp[1][i - 1] + dp[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = dp[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    local sum = dp[n][n]\n    local count = n + n - 1\n    return sum / count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            local left = dp[i][j - 1]\n            local up = dp[i - 1][j]\n            if left.cost * up.count > up.cost * left.count then\n                dp[i][j].cost = left.cost + cost[i][j]\n                dp[i][j].count = left.count + 1\n            else\n                dp[i][j].cost = up.cost + cost[i][j]\n                dp[i][j].count = up.count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i-1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i-1].count + dp[1][i].count\n\t\tdp[i][1].cost = dp[i-1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i-1][1].count + dp[i][1].count\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i-1][j].cost/dp[i-1][j].count > dp[i][j-1].cost/dp[i][j-1].count then\n\t\t\t\tdp[i][j].cost = dp[i-1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i-1][j].count + dp[i][j].count\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j-1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j-1].count + dp[i][j].count\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost/dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j].cost = cost[i][j]\n                dp[i][j].count = 1\n            elseif i == 1 then\n                dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                dp[i][j].count = dp[i][j - 1].count + 1\n            elseif j == 1 then\n                dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                local cost1 = dp[i - 1][j].cost + cost[i][j]\n                local count1 = dp[i - 1][j].count + 1\n                local cost2 = dp[i][j - 1].cost + cost[i][j]\n                local count2 = dp[i][j - 1].count + 1\n                if cost1 / count1 > cost2 / count2 then\n                    dp[i][j].cost = cost1\n                    dp[i][j].count = count1\n                else\n                    dp[i][j].cost = cost2\n                    dp[i][j].count = count2\n                end\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + dp[1][i][1]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + dp[1][i][2]\n\t\tdp[i][1][1] = dp[i - 1][1][1] + dp[i][1][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + dp[i][1][2]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + dp[i][j][1]\n\t\t\tdp[i][j][2] = math.max(dp[i - 1][j][2], dp[i][j - 1][2]) + dp[i][j][2]\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + dp[1][i][1]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + 1\n\t\tdp[i][1][1] = dp[i - 1][1][1] + dp[i][1][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + dp[i][j][1]\n\t\t\tdp[i][j][2] = math.max(dp[i - 1][j][2], dp[i][j - 1][2]) + 1\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {cost[i][j], 1}\n    end\n  end\n  for i = 2, n do\n    dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n    dp[1][i][2] = dp[1][i - 1][2] + 1\n    dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    dp[i][1][2] = dp[i - 1][1][2] + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      local a = dp[i - 1][j][1] + cost[i][j]\n      local b = dp[i - 1][j][2] + 1\n      local c = dp[i][j - 1][1] + cost[i][j]\n      local d = dp[i][j - 1][2] + 1\n      if a * d > c * b then\n        dp[i][j][1] = a\n        dp[i][j][2] = b\n      else\n        dp[i][j][1] = c\n        dp[i][j][2] = d\n      end\n    end\n  end\n  return dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = cost[i][j]\n        end\n    end\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + dp[1][i]\n        dp[i][1] = dp[i - 1][1] + dp[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = dp[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    local maxAvg = dp[n][n][1] / (2 * n - 1)\n    for k = 2, n do\n        for i = 1, n do\n            for j = 1, n do\n                dp[i][j][k] = 0\n            end\n        end\n        dp[1][1][k] = dp[1][1][k - 1] + cost[1][1]\n        for i = 2, n do\n            dp[i][1][k] = dp[i - 1][1][k] + cost[i][1]\n            dp[1][i][k] = dp[1][i - 1][k] + cost[1][i]\n        end\n        for i = 2, n do\n            for j = 2, n do\n                dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n            end\n        end\n        maxAvg = math.max(maxAvg, dp[n][n][k] / (2 * n - k))\n    end\n    return maxAvg\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {\n        cost = cost[i][j],\n        count = 1\n      }\n    end\n  end",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tdp[1] = {}\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tdp[i] = {}\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n    end\n  end\n  dp[1][1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  local maxAvg = dp[n][n][1] / (2 * n - 1)\n  for k = 2, n do\n    dp[1][1][k] = dp[1][1][k - 1] + cost[1][1]\n    for i = 2, n do\n      dp[1][i][k] = math.max(dp[1][i - 1][k], dp[1][i][k - 1]) + cost[1][i]\n      dp[i][1][k] = math.max(dp[i - 1][1][k], dp[i][1][k - 1]) + cost[i][1]\n    end\n    for i = 2, n do\n      for j = 2, n do\n        dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n      end\n    end\n    maxAvg = math.max(maxAvg, dp[n][n][k] / (k + n - 1))\n  end\n  return maxAvg\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for j = 2, n do\n    dp[1][j].cost = dp[1][j - 1].cost + cost[1][j]\n    dp[1][j].count = dp[1][j - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n      dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j][1] = cost[i][j]\n            dp[i][j][2] = 1\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i > 1 then\n                local sum = dp[i - 1][j][1] + dp[i][j][1]\n                local count = dp[i - 1][j][2] + dp[i][j][2]\n                if sum / count > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = sum\n                    dp[i][j][2] = count\n                end\n            end\n            if j > 1 then\n                local sum = dp[i][j - 1][1] + dp[i][j][1]\n                local count = dp[i][j - 1][2] + dp[i][j][2]\n                if sum / count > dp[i][j][1] / dp[i][j][2] then\n                    dp[i][j][1] = sum\n                    dp[i][j][2] = count\n                end\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor j = 2, n do\n\t\tdp[1][j].cost = dp[1][j - 1].cost + dp[1][j].cost\n\t\tdp[1][j].count = dp[1][j - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost * dp[i][j].count > dp[i][j - 1].cost * dp[i - 1][j].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i-1] + cost[1][i]\n  end\n  for i = 2, n do\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i-1][j], dp[i][j-1])\n    end\n  end\n  return dp[n][n] / (2*n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + dp[i][j].cost\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  local sum = 0\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      sum = sum + cost[i][j]\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (n * n)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = cost[i][j]\n      if i > 1 then\n        dp[i][j] = dp[i][j] + dp[i - 1][j]\n      end\n      if j > 1 then\n        dp[i][j] = dp[i][j] + dp[i][j - 1]\n      end\n      if i > 1 and j > 1 then\n        dp[i][j] = dp[i][j] - dp[i - 1][j - 1]\n      end\n    end\n  end\n  local maxAvg = 0\n  for i = 1, n do\n    for j = 1, n do\n      for k = i, n do\n        for l = j, n do\n          local sum = dp[k][l]\n          if i > 1 then\n            sum = sum - dp[i - 1][l]\n          end\n          if j > 1 then\n            sum = sum - dp[k][j - 1]\n          end\n          if i > 1 and j > 1 then\n            sum = sum + dp[i - 1][j - 1]\n          end\n          local avg = sum / ((k - i + 1) * (l - j + 1))\n          if avg > maxAvg then\n            maxAvg = avg\n          end\n        end\n      end\n    end\n  end\n  return maxAvg\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j] = cost[i][j]\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j] = dp[i][j - 1] + cost[i][j]\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j] = dp[i - 1][j] + cost[i][j]\n\t\t\telse\n\t\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j] = {cost[i][j], 1}\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j] = {dp[i][j - 1][1] + cost[i][j], dp[i][j - 1][2] + 1}\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j] = {dp[i - 1][j][1] + cost[i][j], dp[i - 1][j][2] + 1}\n\t\t\telse\n\t\t\t\tlocal a = dp[i - 1][j]\n\t\t\t\tlocal b = dp[i][j - 1]\n\t\t\t\tif a[1] / a[2] > b[1] / b[2] then\n\t\t\t\t\tdp[i][j] = {a[1] + cost[i][j], a[2] + 1}\n\t\t\t\telse\n\t\t\t\t\tdp[i][j] = {b[1] + cost[i][j], b[2] + 1}\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tlocal c1 = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\tlocal c2 = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\tif c1 > c2 then\n\t\t\t\tdp[i][j].cost = c1\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = c2\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {\n\t\t\t\tcost = cost[i][j],\n\t\t\t\tcount = 1\n\t\t\t}\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n\t\tdp[i][1].count = dp[i - 1][1].count + dp[i][1].count\n\tend\n\tfor j = 2, n do\n\t\tdp[1][j].cost = dp[1][j - 1].cost + dp[1][j].cost\n\t\tdp[1][j].count = dp[1][j - 1].count + dp[1][j].count\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + dp[i][j].count\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + dp[i][j].count\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].avg = 0\n\t\t\tdp[i][j].cost = 0\n\t\tend\n\tend\n\tdp[1][1].avg = cost[1][1]\n\tdp[1][1].cost = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i].avg = dp[1][i-1].avg + cost[1][i]\n\t\tdp[1][i].cost = dp[1][i-1].cost + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].avg = dp[i-1][1].avg + cost[i][1]\n\t\tdp[i][1].cost = dp[i-1][1].cost + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].avg = math.max(dp[i-1][j].avg, dp[i][j-1].avg) + cost[i][j]\n\t\t\tdp[i][j].cost = math.max(dp[i-1][j].cost, dp[i][j-1].cost) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n].avg / (n*n)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n    dp[1][i].count = dp[1][i - 1].count + 1\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n      dp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].value = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].value = cost[1][1]\n    dp[1][1].count = 1\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                goto continue\n            end\n            if i > 1 then\n                dp[i][j].value = dp[i][j].value + dp[i - 1][j].value\n                dp[i][j].count = dp[i][j].count + dp[i - 1][j].count\n            end\n            if j > 1 then\n                dp[i][j].value = dp[i][j].value + dp[i][j - 1].value\n                dp[i][j].count = dp[i][j].count + dp[i][j - 1].count\n            end\n            dp[i][j].value = dp[i][j].value + cost[i][j]\n            dp[i][j].count = dp[i][j].count + 1\n            ::continue::\n        end\n    end\n    return dp[n][n].value / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n    end\n  end\n  dp[1][1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  for k = 2, n do\n    for i = 1, n do\n      for j = 1, n do\n        dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n      end\n    end\n  end\n  local maxAverage = dp[n][n][1] / n\n  for k = 2, n do\n    maxAverage = math.max(maxAverage, dp[n][n][k] / k)\n  end\n  return maxAverage\nend",
    "    local n = #cost\n    local dp = {}\n    dp[1] = {}\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        dp[i] = {}\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    local maxAvg = dp[n][n][1] / (2 * n - 1)\n    for k = 2, n do\n        for i = 1, n do\n            for j = 1, n do\n                if i == 1 and j == 1 then\n                    dp[i][j][k] = maxAvg * k\n                elseif i == 1 then\n                    dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n                elseif j == 1 then\n                    dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n                else\n                    dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n                end\n            end\n        end\n        maxAvg = math.max(maxAvg, dp[n][n][k] / (k * n))\n    end\n    return maxAvg\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j][1] = cost[i][j]\n\t\t\tdp[i][j][2] = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + 1\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j][1] / dp[i - 1][j][2] > dp[i][j - 1][1] / dp[i][j - 1][2] then\n\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\telse\n\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {cost[i][j], 1}\n        end\n    end\n    for i = 1, n do\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = {cost[i][j], 1}\n            elseif i == 1 then\n                dp[i][j] = {dp[i][j - 1][1] + cost[i][j], dp[i][j - 1][2] + 1}\n            elseif j == 1 then\n                dp[i][j] = {dp[i - 1][j][1] + cost[i][j], dp[i - 1][j][2] + 1}\n            else\n                local a = dp[i - 1][j]\n                local b = dp[i][j - 1]\n                if a[1] / a[2] > b[1] / b[2] then\n                    dp[i][j] = {a[1] + cost[i][j], a[2] + 1}\n                else\n                    dp[i][j] = {b[1] + cost[i][j], b[2] + 1}\n                end\n            end\n        end\n    end\n    return dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n    end\n  end\n  dp[1][1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n    dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n    end\n  end\n  local max = dp[n][n][1]\n  for i = 2, n do\n    dp[n][n][i] = max\n  end\n  for i = n - 1, 1, -1 do\n    for j = n - 1, 1, -1 do\n      dp[i][j][1] = math.max(dp[i + 1][j][1], dp[i][j + 1][1]) + cost[i][j]\n      for k = 2, n - math.max(i, j) + 1 do\n        dp[i][j][k] = math.max(dp[i + 1][j][k - 1], dp[i][j + 1][k - 1]) + cost[i][j]\n      end\n      max = math.max(max, dp[i][j][n - math.max(i, j) + 1])\n    end\n  end\n  return max / n\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\t\tdp[i][j].count = 1\n\t\t\telseif i == 1 then\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\telseif j == 1 then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tlocal left = dp[i][j - 1]\n\t\t\t\tlocal up = dp[i - 1][j]\n\t\t\t\tif left.cost * up.count > up.cost * left.count then\n\t\t\t\t\tdp[i][j].cost = left.cost + cost[i][j]\n\t\t\t\t\tdp[i][j].count = left.count + 1\n\t\t\t\telse\n\t\t\t\t\tdp[i][j].cost = up.cost + cost[i][j]\n\t\t\t\t\tdp[i][j].count = up.count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      if i == 1 and j == 1 then\n        dp[i][j] = cost[i][j]\n      elseif i == 1 then\n        dp[i][j] = dp[i][j - 1] + cost[i][j]\n      elseif j == 1 then\n        dp[i][j] = dp[i - 1][j] + cost[i][j]\n      else\n        dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n      end\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end",
    "    local n = #cost\n    local maxAvg = 0\n    local maxAvgPath = {}\n    local path = {}\n    local function traverse(i, j, total, count)\n        table.insert(path, cost[i][j])\n        if i == n and j == n then\n            local avg = total / count\n            if avg > maxAvg then\n                maxAvg = avg\n                maxAvgPath = table.copy(path)\n            end\n        else\n            if i < n then\n                traverse(i + 1, j, total + cost[i][j], count + 1)\n            end\n            if j < n then\n                traverse(i, j + 1, total + cost[i][j], count + 1)\n            end\n        end\n        table.remove(path)\n    end\n    traverse(1, 1, 0, 0)\n    return maxAvg, maxAvgPath\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j][1] = cost[i][j]\n\t\t\tdp[i][j][2] = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + 1\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tlocal a = dp[i - 1][j][1] + cost[i][j]\n\t\t\tlocal b = dp[i - 1][j][2] + 1\n\t\t\tlocal c = dp[i][j - 1][1] + cost[i][j]\n\t\t\tlocal d = dp[i][j - 1][2] + 1\n\t\t\tif a * d > b * c then\n\t\t\t\tdp[i][j][1] = a\n\t\t\t\tdp[i][j][2] = b\n\t\t\telse\n\t\t\t\tdp[i][j][1] = c\n\t\t\t\tdp[i][j][2] = d\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[i][1] = dp[i - 1][1] + cost[i][1]\n    dp[1][i] = dp[1][i - 1] + cost[1][i]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost * dp[i][j - 1].count > dp[i][j - 1].cost * dp[i - 1][j].count then\n                dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                dp[i][j].count = dp[i - 1][j].count\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                dp[i][j].count = dp[i][j - 1].count\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = cost[i][j] + math.max(dp[i - 1][j], dp[i][j - 1])\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = 0\n    end\n  end\n  dp[1][1] = cost[1][1]\n  for i = 2, n do\n    dp[1][i] = dp[1][i-1] + cost[1][i]\n    dp[i][1] = dp[i-1][1] + cost[i][1]\n  end\n  for i = 2, n do\n    for j = 2, n do\n      dp[i][j] = math.max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    end\n  end\n  return dp[n][n] / (2*n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = 0\n\t\t\tdp[i][j].count = 0\n\t\tend\n\tend\n\tdp[1][1].cost = cost[1][1]\n\tdp[1][1].count = 1\n\tfor i = 2, n do\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\t\tdp[1][i].count = dp[1][i - 1].count + 1\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[i][1].count = dp[i - 1][1].count + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j].cost = math.max(dp[i - 1][j].cost, dp[i][j - 1].cost) + cost[i][j]\n\t\t\tdp[i][j].count = math.max(dp[i - 1][j].count, dp[i][j - 1].count) + 1\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = 0\n            dp[i][j].count = 0\n        end\n    end\n    dp[1][1].cost = cost[1][1]\n    dp[1][1].count = 1\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n        dp[1][i].count = dp[1][i - 1].count + 1\n        dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n                dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n            dp[i][j].cost = cost[i][j]\n            dp[i][j].count = 1\n        end\n    end\n    for i = 2, n do\n        dp[1][i].cost = dp[1][i - 1].cost + dp[1][i].cost\n        dp[1][i].count = dp[1][i - 1].count + 1\n    end\n    for i = 2, n do\n        dp[i][1].cost = dp[i - 1][1].cost + dp[i][1].cost\n        dp[i][1].count = dp[i - 1][1].count + 1\n    end\n    for i = 2, n do\n        for j = 2, n do\n            if dp[i - 1][j].cost > dp[i][j - 1].cost then\n                dp[i][j].cost = dp[i - 1][j].cost + dp[i][j].cost\n                dp[i][j].count = dp[i - 1][j].count + 1\n            else\n                dp[i][j].cost = dp[i][j - 1].cost + dp[i][j].cost\n                dp[i][j].count = dp[i][j - 1].count + 1\n            end\n        end\n    end\n    return dp[n][n].cost / dp[n][n].count\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = 0\n\t\tend\n\tend\n\tdp[1][1] = cost[1][1]\n\tfor i = 2, n do\n\t\tdp[1][i] = dp[1][i - 1] + cost[1][i]\n\t\tdp[i][1] = dp[i - 1][1] + cost[i][1]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tdp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\t\tend\n\tend\n\treturn dp[n][n] / (2 * n - 1)\nend",
    "    -- Write your code here\n    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = {}\n        end\n    end\n    dp[1][1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n        dp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j][1] = math.max(dp[i - 1][j][1], dp[i][j - 1][1]) + cost[i][j]\n        end\n    end\n    local max = dp[n][n][1]\n    for k = 2, n do\n        for i = 1, n do\n            for j = 1, n do\n                if i == 1 and j == 1 then\n                    dp[i][j][k] = max\n                elseif i == 1 then\n                    dp[i][j][k] = dp[i][j - 1][k] + cost[i][j]\n                elseif j == 1 then\n                    dp[i][j][k] = dp[i - 1][j][k] + cost[i][j]\n                else\n                    dp[i][j][k] = math.max(dp[i - 1][j][k], dp[i][j - 1][k]) + cost[i][j]\n                end\n                max = math.max(max, dp[i][j][k])\n            end\n        end\n    end\n    return max / n\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j].cost = cost[i][j]\n\t\t\tdp[i][j].count = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n\t\tdp[1][i].cost = dp[1][i - 1].cost + cost[1][i]\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n\t\t\t\tdp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i - 1][j].count + 1\n\t\t\telse\n\t\t\t\tdp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n\t\t\t\tdp[i][j].count = dp[i][j - 1].count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "  local n = #cost\n  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, n do\n      dp[i][j] = {}\n      dp[i][j].cost = 0\n      dp[i][j].count = 0\n    end\n  end\n  dp[1][1].cost = cost[1][1]\n  dp[1][1].count = 1\n  for i = 2, n do\n    dp[i][1].cost = dp[i - 1][1].cost + cost[i][1]\n    dp[i][1].count = dp[i - 1][1].count + 1\n  end\n  for j = 2, n do\n    dp[1][j].cost = dp[1][j - 1].cost + cost[1][j]\n    dp[1][j].count = dp[1][j - 1].count + 1\n  end\n  for i = 2, n do\n    for j = 2, n do\n      if dp[i - 1][j].cost / dp[i - 1][j].count > dp[i][j - 1].cost / dp[i][j - 1].count then\n        dp[i][j].cost = dp[i - 1][j].cost + cost[i][j]\n        dp[i][j].count = dp[i - 1][j].count + 1\n      else\n        dp[i][j].cost = dp[i][j - 1].cost + cost[i][j]\n        dp[i][j].count = dp[i][j - 1].count + 1\n      end\n    end\n  end\n  return dp[n][n].cost / dp[n][n].count\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            dp[i][j] = 0\n        end\n    end\n    dp[1][1] = cost[1][1]\n    for i = 2, n do\n        dp[i][1] = dp[i - 1][1] + cost[i][1]\n        dp[1][i] = dp[1][i - 1] + cost[1][i]\n    end\n    for i = 2, n do\n        for j = 2, n do\n            dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "    local n = #cost\n    local dp = {}\n    for i = 1, n do\n        dp[i] = {}\n        for j = 1, n do\n            if i == 1 and j == 1 then\n                dp[i][j] = cost[i][j]\n            elseif i == 1 then\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elseif j == 1 then\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else\n                dp[i][j] = math.max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n            end\n        end\n    end\n    return dp[n][n] / (2 * n - 1)\nend",
    "\tlocal n = #cost\n\tlocal dp = {}\n\tfor i = 1, n do\n\t\tdp[i] = {}\n\t\tfor j = 1, n do\n\t\t\tdp[i][j] = {}\n\t\t\tdp[i][j][1] = cost[i][j]\n\t\t\tdp[i][j][2] = 1\n\t\tend\n\tend\n\tfor i = 2, n do\n\t\tdp[1][i][1] = dp[1][i - 1][1] + cost[1][i]\n\t\tdp[1][i][2] = dp[1][i - 1][2] + 1\n\t\tdp[i][1][1] = dp[i - 1][1][1] + cost[i][1]\n\t\tdp[i][1][2] = dp[i - 1][1][2] + 1\n\tend\n\tfor i = 2, n do\n\t\tfor j = 2, n do\n\t\t\tif dp[i - 1][j][1] / dp[i - 1][j][2] > dp[i][j - 1][1] / dp[i][j - 1][2] then\n\t\t\t\tdp[i][j][1] = dp[i - 1][j][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i - 1][j][2] + 1\n\t\t\telse\n\t\t\t\tdp[i][j][1] = dp[i][j - 1][1] + cost[i][j]\n\t\t\t\tdp[i][j][2] = dp[i][j - 1][2] + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn dp[n][n][1] / dp[n][n][2]\nend"
  ]
}