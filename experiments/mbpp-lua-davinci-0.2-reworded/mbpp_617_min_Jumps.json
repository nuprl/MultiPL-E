{
  "name": "mbpp_617_min_Jumps",
  "language": "lua",
  "prompt": "-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tlocal step = steps[i]\n\t\tif step == 0 then\n\t\t\treturn -1\n\t\tend\n\t\tif pos + step >= d then\n\t\t\treturn jumps + 1\n\t\tend\n\t\tif pos + step < d then\n\t\t\tlocal max_step = 0\n\t\t\tfor j = i + 1, #steps do\n\t\t\t\tlocal step2 = steps[j]\n\t\t\t\tif step2 + pos > max_step then\n\t\t\t\t\tmax_step = step2 + pos\n\t\t\t\tend\n\t\t\tend\n\t\t\tif max_step == pos then\n\t\t\t\treturn -1\n\t\t\tend\n\t\t\tpos = max_step\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn -1\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile i < d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        jumps = jumps + 1\n        d = d - steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local i = 0\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  if d == 0 then\n    return 0\n  end\n  if steps[d] then\n    return steps[d]\n  end\n  local min = math.huge\n  for i = 1, d do\n    local jumps = 1 + min_Jumps(steps, d - i)\n    if jumps < min then\n      min = jumps\n    end\n  end\n  steps[d] = min\n  return min\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps <= d then\n            x = x + steps\n            jumps = jumps + 1\n        else\n            y = d - x\n            jumps = jumps + 1\n            x = x + y\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr_pos = 0\n\tfor i = 1, #steps do\n\t\tif curr_pos < d then\n\t\t\tcurr_pos = curr_pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\tif curr_pos < d then\n\t\treturn -1\n\telse\n\t\treturn jumps\n\tend\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d or y < d do\n\t\tif x < d then\n\t\t\tx = x + steps\n\t\t\tjumps = jumps + 1\n\t\tend\n\t\tif y < d then\n\t\t\ty = y + steps\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    y = y + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend"
  ]
}