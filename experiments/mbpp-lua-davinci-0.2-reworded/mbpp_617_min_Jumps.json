{
  "name": "mbpp_617_min_Jumps",
  "language": "lua",
  "prompt": "-- Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nlocal function min_Jumps(steps, d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Jumps\n    lu.assertEquals(candidate({3, 4}, 11), 3.5)\n    lu.assertEquals(candidate({3, 4}, 0), 0)\n    lu.assertEquals(candidate({11, 14}, 11), 1)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tlocal step = steps[i]\n\t\tif step == 0 then\n\t\t\treturn -1\n\t\tend\n\t\tif pos + step >= d then\n\t\t\treturn jumps + 1\n\t\tend\n\t\tif pos + step < d then\n\t\t\tlocal max_step = 0\n\t\t\tfor j = i + 1, #steps do\n\t\t\t\tlocal step2 = steps[j]\n\t\t\t\tif step2 + pos > max_step then\n\t\t\t\t\tmax_step = step2 + pos\n\t\t\t\tend\n\t\t\tend\n\t\t\tif max_step == pos then\n\t\t\t\treturn -1\n\t\t\tend\n\t\t\tpos = max_step\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn -1\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile i < d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        jumps = jumps + 1\n        d = d - steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local i = 0\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  if d == 0 then\n    return 0\n  end\n  if steps[d] then\n    return steps[d]\n  end\n  local min = math.huge\n  for i = 1, d do\n    local jumps = 1 + min_Jumps(steps, d - i)\n    if jumps < min then\n      min = jumps\n    end\n  end\n  steps[d] = min\n  return min\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps <= d then\n            x = x + steps\n            jumps = jumps + 1\n        else\n            y = d - x\n            jumps = jumps + 1\n            x = x + y\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr_pos = 0\n\tfor i = 1, #steps do\n\t\tif curr_pos < d then\n\t\t\tcurr_pos = curr_pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\tif curr_pos < d then\n\t\treturn -1\n\telse\n\t\treturn jumps\n\tend\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d or y < d do\n\t\tif x < d then\n\t\t\tx = x + steps\n\t\t\tjumps = jumps + 1\n\t\tend\n\t\tif y < d then\n\t\t\ty = y + steps\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    y = y + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        jumps = jumps + 1\n        curr_pos = curr_pos + steps[jumps]\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d or y < d do\n        if x < d then\n            x = x + steps\n            jumps = jumps + 1\n        end\n        if y < d then\n            y = y + steps\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        x = x + steps\n        y = y + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    for i = 1, #steps do\n        if steps[i] == \"U\" then\n            y = y + 1\n        elseif steps[i] == \"D\" then\n            y = y - 1\n        elseif steps[i] == \"L\" then\n            x = x - 1\n        elseif steps[i] == \"R\" then\n            x = x + 1\n        end\n        if x == d and y == 0 then\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile i < d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d or y < d do\n        if x < d then\n            x = x + steps\n            jumps = jumps + 1\n        end\n        if y < d then\n            y = y + steps\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        x = x + steps\n        y = y + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        jumps = jumps + 1\n        curr = curr + steps\n        if curr == d then\n            return jumps\n        end\n    end\n    return -1\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile i < d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        jumps = jumps + 1\n        curr_pos = curr_pos + steps[jumps]\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile (i < d) do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\twhile pos < d do\n\t\tjumps = jumps + 1\n\t\tpos = pos + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr_pos = 0\n\tlocal i = 1\n\twhile curr_pos < d do\n\t\tcurr_pos = curr_pos + steps[i]\n\t\ti = i + 1\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    for i = 1, #steps do\n        pos = pos + steps[i]\n        if pos >= d then\n            return jumps + 1\n        end\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d or y < d do\n        if x < d then\n            x = x + steps\n            jumps = jumps + 1\n        end\n        if y < d then\n            y = y + steps\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= steps do\n\t\tif i == steps then\n\t\t\tjumps = jumps + 1\n\t\t\tbreak\n\t\tend\n\t\ti = i + d\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    if d <= steps then\n        return 1\n    end\n    return 1 + min_Jumps(steps, d-steps)\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d do\n\t\tjumps = jumps + 1\n\t\tx = x + steps\n\t\ty = y + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        if i + steps[i] >= d then\n            jumps = jumps + 1\n            break\n        end\n        local max_steps = 0\n        local max_steps_index = 0\n        for j = 1, steps[i] do\n            if i + j + steps[i + j] > max_steps then\n                max_steps = i + j + steps[i + j]\n                max_steps_index = i + j\n            end\n        end\n        i = max_steps_index\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps[jumps]\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  if d == 0 then\n    return 0\n  end\n  if steps[d] then\n    return steps[d]\n  end\n  local min = math.huge\n  for i = 1, d do\n    local jumps = 1 + min_Jumps(steps, d - i)\n    if jumps < min then\n      min = jumps\n    end\n  end\n  steps[d] = min\n  return min\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal steps_left = steps\n\twhile steps_left > 0 do\n\t\tjumps = jumps + 1\n\t\tsteps_left = steps_left - d\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local i = 0\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local steps_remaining = d\n    while steps_remaining > 0 do\n        if steps_remaining >= steps then\n            steps_remaining = steps_remaining - steps\n            jumps = jumps + 1\n        else\n            steps = steps - 1\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < d do\n\t\ti = i + steps[i]\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    if steps == 0 then\n        return math.huge\n    end\n    local min_jumps = math.huge\n    for i = 1, steps do\n        local jumps = 1 + min_Jumps(steps - i, d - i)\n        if jumps < min_jumps then\n            min_jumps = jumps\n        end\n    end\n    return min_jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps < d then\n            x = x + steps\n            jumps = jumps + 1\n        else\n            x = d\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        jumps = jumps + 1\n        d = d - steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  local jumps = 0\n  local curr_pos = 0\n  while curr_pos < d do\n    curr_pos = curr_pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    y = y + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  local jumps = 0\n  local i = 1\n  while i <= d do\n    jumps = jumps + 1\n    i = i + steps\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d or y < d do\n\t\tif x == d then\n\t\t\ty = y + steps\n\t\telseif y == d then\n\t\t\tx = x + steps\n\t\telse\n\t\t\tx = x + steps\n\t\t\ty = y + steps\n\t\tend\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "  local jumps = 0\n  local i = 0\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps > d then\n            jumps = jumps + 1\n            break\n        end\n        x = x + steps\n        y = y + steps\n        jumps = jumps + 1\n        if y > d then\n            y = y - d\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tif d == 0 then\n\t\treturn 0\n\telseif d <= steps then\n\t\treturn 1\n\telse\n\t\tlocal min = math.huge\n\t\tfor i = 1, steps do\n\t\t\tlocal jumps = min_Jumps(steps, d - i)\n\t\t\tif jumps < min then\n\t\t\t\tmin = jumps\n\t\t\tend\n\t\tend\n\t\treturn min + 1\n\tend\nend",
    "    if d == 0 then\n        return 0\n    end\n    local min = math.huge\n    for i = 1, #steps do\n        if steps[i] <= d then\n            local jumps = min_Jumps(steps, d - steps[i])\n            if jumps + 1 < min then\n                min = jumps + 1\n            end\n        end\n    end\n    return min\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d or y < d do\n    if x < d then\n      x = x + steps\n      jumps = jumps + 1\n    end\n    if y < d then\n      y = y + steps\n      jumps = jumps + 1\n    end\n  end\n  return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    y = y + steps\n    jumps = jumps + 1\n  end\n  while y > 0 do\n    x = x - 1\n    y = y - 1\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    if x + steps > d then\n      jumps = jumps + 1\n      x = d\n    else\n      jumps = jumps + 1\n      x = x + steps\n    end\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        if i + steps[i] >= d then\n            jumps = jumps + 1\n            break\n        end\n        local max = 0\n        local max_i = 0\n        for j = 1, steps[i] do\n            if i + j + steps[i + j] > max then\n                max = i + j + steps[i + j]\n                max_i = i + j\n            end\n        end\n        i = max_i\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    if steps == 0 then\n        return math.huge\n    end\n    local min = math.huge\n    for i = 1, steps do\n        local jumps = min_Jumps(steps, d - i)\n        if jumps ~= math.huge and jumps + 1 < min then\n            min = jumps + 1\n        end\n    end\n    return min\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tif pos + steps[i] < d then\n\t\t\tpos = pos + steps[i]\n\t\telseif pos + steps[i] == d then\n\t\t\tpos = pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\t\tbreak\n\t\telse\n\t\t\tjumps = jumps + 1\n\t\t\tpos = pos - steps[i]\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        x = x + steps\n        y = y + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        jumps = jumps + 1\n        d = d - steps\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tif pos + steps[i] < d then\n\t\t\tpos = pos + steps[i]\n\t\telseif pos + steps[i] == d then\n\t\t\tpos = pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\t\tbreak\n\t\telse\n\t\t\tjumps = jumps + 1\n\t\t\tpos = pos - steps[i]\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        if i + steps[i] > d then\n            jumps = jumps + 1\n            i = i + steps[i]\n        else\n            jumps = jumps + 1\n            i = d\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps <= d then\n            x = x + steps\n            jumps = jumps + 1\n        else\n            x = x + 1\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\twhile pos < d do\n\t\tpos = pos + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "  local jumps = 0\n  local i = 1\n  while i <= d do\n    jumps = jumps + 1\n    i = i + steps\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps[jumps]\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local i = 1\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr_pos = 0\n\tfor i = 1, #steps do\n\t\tif curr_pos < d then\n\t\t\tcurr_pos = curr_pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        if d >= steps then\n            d = d - steps\n            jumps = jumps + 1\n        else\n            steps = steps - 1\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local current_pos = 0\n    while current_pos < d do\n        current_pos = current_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d do\n\t\tif x + steps <= d then\n\t\t\tx = x + steps\n\t\t\tjumps = jumps + 1\n\t\telse\n\t\t\tx = x + 1\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    local min = math.huge\n    for i = 1, #steps do\n        if steps[i] <= d then\n            local jumps = min_Jumps(steps, d - steps[i])\n            if jumps ~= math.huge and jumps + 1 < min then\n                min = jumps + 1\n            end\n        end\n    end\n    return min\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        if i + steps[i] > d then\n            jumps = jumps + 1\n            i = i + steps[i]\n        else\n            jumps = jumps + 1\n            i = d\n        end\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr_pos = 0\n\tfor i = 1, #steps do\n\t\tlocal step = steps[i]\n\t\tif step + curr_pos == d then\n\t\t\tjumps = jumps + 1\n\t\t\tbreak\n\t\telseif step + curr_pos > d then\n\t\t\tjumps = jumps + 1\n\t\t\tcurr_pos = curr_pos - step\n\t\telse\n\t\t\tcurr_pos = curr_pos + step\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    for i = 1, #steps do\n        if curr < d then\n            curr = curr + steps[i]\n            jumps = jumps + 1\n        else\n            break\n        end\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        jumps = jumps + 1\n        pos = pos + steps[jumps]\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps[jumps + 1]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d or y < d do\n        if x < d then\n            x = x + steps\n            jumps = jumps + 1\n        end\n        if y < d then\n            y = y + steps\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local i = 0\n  while i < d do\n    i = i + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    if x + steps <= d then\n      x = x + steps\n      jumps = jumps + 1\n    else\n      x = x + 1\n      jumps = jumps + 1\n    end\n  end\n  return jumps\nend",
    "    if steps == 0 then\n        return 0\n    end\n    if d == 0 then\n        return 0\n    end\n    if steps == 1 then\n        return 1\n    end\n    if steps == 2 then\n        return 2\n    end\n    if steps == 3 then\n        return 3\n    end\n    local x = math.floor(steps / 2)\n    local y = steps - x\n    return min_Jumps(x, d) + min_Jumps(y, d)\nend",
    "\tlocal jumps = 0\n\tlocal curr = 0\n\twhile curr < d do\n\t\tjumps = jumps + 1\n\t\tcurr = curr + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps[jumps]\n\tend\n\treturn jumps\nend",
    "    if steps == 0 then\n        return 0\n    elseif steps == 1 then\n        return 1\n    elseif steps == 2 then\n        return 2\n    elseif steps == 3 then\n        return 3\n    elseif steps == 4 then\n        return 4\n    elseif steps == 5 then\n        return 5\n    elseif steps == 6 then\n        return 6\n    elseif steps == 7 then\n        return 7\n    elseif steps == 8 then\n        return 8\n    elseif steps == 9 then\n        return 9\n    elseif steps == 10 then\n        return 10\n    elseif steps == 11 then\n        return 11\n    elseif steps == 12 then\n        return 12\n    elseif steps == 13 then\n        return 13\n    elseif steps == 14 then\n        return 14\n    elseif steps == 15 then\n        return 15\n    elseif steps == 16 then\n        return 16\n    elseif steps == 17 then\n        return 17\n    elseif steps == 18 then\n        return 18\n    elseif steps == 19 then\n        return 19\n    elseif steps == 20 then\n        return 20\n    elseif steps == 21 then\n        return 21\n    elseif steps == 22 then\n        return 22\n    elseif steps == 23 then\n        return 23\n    elseif steps == 24 then\n        return 24\n    elseif steps == 25 then\n        return 25\n    elseif steps == 26 then\n        return 26\n    elseif steps == 27 then\n        return 27\n    elseif steps == 28 then\n        return 28\n    elseif steps == 29 then\n        return 29\n    elseif steps == 30 then\n        return 30\n    elseif steps == 31 then\n        return 31\n    elseif steps == 32 then\n        return 32\n    elseif steps == 33 then\n        return 33\n    elseif steps == 34 then\n        return 34\n    elseif steps == 35 then\n        return 35\n    elseif steps == 36 then\n        return 36\n    elseif steps == 37 then\n        return 37\n    elseif steps == 38 then\n        return 38\n    elseif steps == 39 then\n        return 39\n    elseif steps == 40 then\n        return 40\n    elseif steps == 41 then\n        return 41\n    elseif steps == 42 then\n",
    "  local jumps = 0\n  local curr = 0\n  while curr < d do\n    jumps = jumps + 1\n    curr = curr + steps\n  end\n  return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps[jumps]\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\twhile pos < d do\n\t\tjumps = jumps + 1\n\t\tpos = pos + steps\n\tend\n\treturn jumps\nend",
    "\tif d == 0 then\n\t\treturn 0\n\tend\n\tif steps[d] ~= nil then\n\t\treturn steps[d]\n\tend\n\tlocal min = math.huge\n\tfor i = 1, d - 1 do\n\t\tlocal jumps = min_Jumps(steps, i) + min_Jumps(steps, d - i)\n\t\tif jumps < min then\n\t\t\tmin = jumps\n\t\tend\n\tend\n\tsteps[d] = min + 1\n\treturn min + 1\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tif pos < d then\n\t\t\tpos = pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        if steps[i] == 0 then\n            return -1\n        end\n        if i + steps[i] >= d then\n            jumps = jumps + 1\n            break\n        end\n        local max_jump = 0\n        local max_jump_index = 0\n        for j = i + 1, i + steps[i] do\n            if j + steps[j] > max_jump then\n                max_jump = j + steps[j]\n                max_jump_index = j\n            end\n        end\n        i = max_jump_index\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        jumps = jumps + 1\n        d = d - steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 0\n\twhile i < d do\n\t\ti = i + steps\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        curr = curr + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal curr = 0\n\twhile curr < d do\n\t\tjumps = jumps + 1\n\t\tcurr = curr + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d do\n        if x + steps < d then\n            x = x + steps\n            jumps = jumps + 1\n        else\n            x = x + (d - x)\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local pos = 0\n  while pos < d do\n    pos = pos + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local x = 0\n    local y = 0\n    while x < d or y < d do\n        if x < d then\n            x = x + steps\n            jumps = jumps + 1\n        end\n        if y < d then\n            y = y + steps\n            jumps = jumps + 1\n        end\n    end\n    return jumps\nend",
    "  local jumps = 0\n  local x = 0\n  local y = 0\n  while x < d do\n    x = x + steps\n    y = y + steps\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local current_pos = 0\n    while current_pos < d do\n        local max_jump = 0\n        local max_jump_index = 0\n        for i = 1, #steps do\n            if steps[i] + current_pos > max_jump then\n                max_jump = steps[i] + current_pos\n                max_jump_index = i\n            end\n        end\n        current_pos = max_jump\n        jumps = jumps + 1\n        table.remove(steps, max_jump_index)\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal pos = 0\n\tfor i = 1, #steps do\n\t\tif pos < d then\n\t\t\tif steps[i] + pos >= d then\n\t\t\t\tjumps = jumps + 1\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tpos = pos + steps[i]\n\t\t\tjumps = jumps + 1\n\t\tend\n\tend\n\treturn jumps\nend",
    "  local jumps = 0\n  local i = 1\n  while i <= d do\n    if i == d then\n      jumps = jumps + 1\n      break\n    end\n    if i + steps[i] >= d then\n      jumps = jumps + 1\n      break\n    end\n    i = i + steps[i]\n    jumps = jumps + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr = 0\n    while curr < d do\n        jumps = jumps + 1\n        curr = curr + steps[jumps]\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal i = 1\n\twhile i <= #steps do\n\t\tif x == d and y == 0 then\n\t\t\treturn jumps\n\t\tend\n\t\tif steps[i] == 'U' then\n\t\t\ty = y + 1\n\t\telseif steps[i] == 'D' then\n\t\t\ty = y - 1\n\t\telseif steps[i] == 'L' then\n\t\t\tx = x - 1\n\t\telseif steps[i] == 'R' then\n\t\t\tx = x + 1\n\t\tend\n\t\tjumps = jumps + 1\n\t\ti = i + 1\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < steps do\n\t\tjumps = jumps + 1\n\t\ti = i + d\n\tend\n\treturn jumps\nend",
    "\tif d == 0 then\n\t\treturn 0\n\telseif d <= steps then\n\t\treturn 1\n\tend\n\tlocal min = d\n\tfor i = 1, steps do\n\t\tlocal jumps = 1 + min_Jumps(steps, d - i)\n\t\tif jumps < min then\n\t\t\tmin = jumps\n\t\tend\n\tend\n\treturn min\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        if steps[i] == 0 then\n            return -1\n        end\n        jumps = jumps + 1\n        i = i + steps[i]\n    end\n    return jumps\nend",
    "\tif d == 0 then\n\t\treturn 0\n\tend\n\tif steps[d] then\n\t\treturn steps[d]\n\tend\n\tlocal min = math.huge\n\tfor i = 1, d do\n\t\tlocal jumps = 1 + min_Jumps(steps, d - i)\n\t\tif jumps < min then\n\t\t\tmin = jumps\n\t\tend\n\tend\n\tsteps[d] = min\n\treturn min\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < d do\n\t\ti = i + steps[i]\n\t\tjumps = jumps + 1\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        if i + steps[i] >= d then\n            jumps = jumps + 1\n            break\n        end\n        local max = 0\n        local max_i = 0\n        for j = i + 1, i + steps[i] do\n            if j + steps[j] > max then\n                max = j + steps[j]\n                max_i = j\n            end\n        end\n        i = max_i\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "  local jumps = 0\n  local curr = 0\n  local i = 1\n  while curr < d do\n    curr = curr + steps[i]\n    jumps = jumps + 1\n    i = i + 1\n  end\n  return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i < d do\n        i = i + steps[i]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 1\n    while i <= d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        jumps = jumps + 1\n        i = i + steps\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    if steps[d] then\n        return steps[d]\n    end\n    local min = math.huge\n    for i = 1, d do\n        local jumps = 1 + min_Jumps(steps, d - i)\n        if jumps < min then\n            min = jumps\n        end\n    end\n    steps[d] = min\n    return min\nend",
    "    local jumps = 0\n    local i = 0\n    while i < d do\n        i = i + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    while d > 0 do\n        if d >= steps then\n            d = d - steps\n            jumps = jumps + 1\n        else\n            steps = d\n            d = 0\n        end\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i <= d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < d do\n\t\tjumps = jumps + 1\n\t\ti = i + steps[jumps]\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        if curr_pos + steps >= d then\n            jumps = jumps + 1\n            break\n        end\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n        steps = steps - 1\n    end\n    return jumps\nend",
    "    local jumps = 0\n    local pos = 0\n    while pos < d do\n        pos = pos + steps[jumps + 1]\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "\tlocal jumps = 0\n\tlocal i = 1\n\twhile i < steps do\n\t\tjumps = jumps + 1\n\t\ti = i + d\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal x = 0\n\tlocal y = 0\n\twhile x < d do\n\t\tjumps = jumps + 1\n\t\tx = x + steps\n\t\ty = y + steps\n\t\tif x > d then\n\t\t\tjumps = jumps + 1\n\t\t\tx = x - d\n\t\t\ty = y - d\n\t\tend\n\tend\n\treturn jumps\nend",
    "\tlocal jumps = 0\n\tlocal current = 0\n\twhile current < d do\n\t\tjumps = jumps + 1\n\t\tcurrent = current + steps[jumps]\n\tend\n\treturn jumps\nend",
    "    local jumps = 0\n    local curr_pos = 0\n    while curr_pos < d do\n        curr_pos = curr_pos + steps\n        jumps = jumps + 1\n    end\n    return jumps\nend",
    "    if d == 0 then\n        return 0\n    end\n    if d <= steps[1] then\n        return 1\n    end\n    local jumps = {0}\n    local i = 1\n    local j = 1\n    while i < #steps do\n        if steps[i] + jumps[i] >= d then\n            return jumps[i] + 1\n        end\n        while j <= steps[i] + jumps[i] do\n            table.insert(jumps, jumps[i] + 1)\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return jumps[#jumps]\nend"
  ]
}