{
  "name": "mbpp_442_positive_count",
  "language": "lua",
  "prompt": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pb65gfq.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp9pb65gfq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd68hasm.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpwd68hasm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then count = count + 1 end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnja4pvr.lua:13: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpxnja4pvr.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pb65gfq.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp9pb65gfq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqi0ar6h.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfqi0ar6h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4cfn1ti.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpm4cfn1ti.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zxdip9b.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp8zxdip9b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then count = count + 1 end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnja4pvr.lua:13: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpxnja4pvr.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqi0ar6h.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfqi0ar6h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98bsfse.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpg98bsfse.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in pairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4xbkw9i.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpx4xbkw9i.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqi0ar6h.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfqi0ar6h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i = 1, #nums do\n        if nums[i] > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqi0ar6h.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpfqi0ar6h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pyif_hg.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp3pyif_hg.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98bsfse.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpg98bsfse.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd68hasm.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpwd68hasm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98bsfse.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpg98bsfse.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4cfn1ti.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpm4cfn1ti.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i, v in ipairs(nums) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmafv0mke.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpmafv0mke.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tif nums[i] > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdm0eel1.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpsdm0eel1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd68hasm.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpwd68hasm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvs8uq4h.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpnvs8uq4h.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd68hasm.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpwd68hasm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98bsfse.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpg98bsfse.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i6cuqih.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp_i6cuqih.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, n in ipairs(nums) do\n    if n > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg98bsfse.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpg98bsfse.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, v in ipairs(nums) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pb65gfq.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp9pb65gfq.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4cfn1ti.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpm4cfn1ti.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif num > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123868,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zxdip9b.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp8zxdip9b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4cfn1ti.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpm4cfn1ti.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4cfn1ti.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpm4cfn1ti.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for i = 1, #nums do\n    if nums[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f8zto_9.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmp6f8zto_9.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n  local count = 0\n  for _, num in ipairs(nums) do\n    if num > 0 then\n      count = count + 1\n    end\n  end\n  return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv7jxgxy.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpkv7jxgxy.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for i, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd68hasm.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmpwd68hasm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the ration of positive numbers in a table of integers.\nlocal function positive_count(nums)\n    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 0 then\n            count = count + 1\n        end\n    end\n    return count / #nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = positive_count\n    lu.assertEquals(candidate({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), 0.54)\n    lu.assertEquals(candidate({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), 0.69)\n    lu.assertEquals(candidate({2, 4, -6, -9, 11, -12, 14, -5, 17}), 0.56)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027732,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiwdxba4.lua:15: expected: 0.54, actual: 0.53846153846154\nstack traceback:\n\t/tmp/tmphiwdxba4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}