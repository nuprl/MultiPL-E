{
  "name": "mbpp_401_add_nested_tuples",
  "language": "lua",
  "prompt": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local res_tup = {}\n    for i = 1, #test_tup1 do\n        res_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            res_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return res_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local tup_result = {}\n    for i = 1, #test_tup1 do\n        tup_result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return tup_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv3s9guf.lua:5: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpnv3s9guf.lua:5: in local 'candidate'\n\t/tmp/tmpnv3s9guf.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i, v in ipairs(test_tup1) do\n        result_tup[i] = v + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l939w24.lua:5: attempt to perform arithmetic on a table value (local 'v')\nstack traceback:\n\t/tmp/tmp2l939w24.lua:5: in local 'candidate'\n\t/tmp/tmp2l939w24.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i, v in ipairs(test_tup1) do\n        result_tup[i] = v + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l939w24.lua:5: attempt to perform arithmetic on a table value (local 'v')\nstack traceback:\n\t/tmp/tmp2l939w24.lua:5: in local 'candidate'\n\t/tmp/tmp2l939w24.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal res_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tres_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tres_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn res_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = test_tup1[i] + test_tup2[i]\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptqao7o3q.lua:5: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmptqao7o3q.lua:5: in local 'candidate'\n\t/tmp/tmptqao7o3q.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal tup_res = {}\n\tfor i = 1, #test_tup1 do\n\t\ttup_res[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\ttup_res[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn tup_res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i, v in ipairs(test_tup1) do\n        result_tup[i] = v + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l939w24.lua:5: attempt to perform arithmetic on a table value (local 'v')\nstack traceback:\n\t/tmp/tmp2l939w24.lua:5: in local 'candidate'\n\t/tmp/tmp2l939w24.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = {}\n    for j = 1, #test_tup1[i] do\n      result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n  local tup1 = test_tup1\n  local tup2 = test_tup2\n  local tup3 = {}\n  for i = 1, #tup1 do\n    tup3[i] = tup1[i] + tup2[i]\n  end\n  return tup3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprupahskl.lua:7: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmprupahskl.lua:7: in local 'candidate'\n\t/tmp/tmprupahskl.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local tup_len = #test_tup1\n    local result_tup = {}\n    for i = 1, tup_len do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvy_17kuf.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpvy_17kuf.lua:6: in local 'candidate'\n\t/tmp/tmpvy_17kuf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local res_tup = {}\n    for k, v in pairs(test_tup1) do\n        res_tup[k] = v + test_tup2[k]\n    end\n    return res_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0stmdnc.lua:5: attempt to perform arithmetic on a table value (local 'v')\nstack traceback:\n\t/tmp/tmpq0stmdnc.lua:5: in local 'candidate'\n\t/tmp/tmpq0stmdnc.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        local tup1 = test_tup1[i]\n        local tup2 = test_tup2[i]\n        local temp = {}\n        for j = 1, #tup1 do\n            temp[j] = tup1[j] + tup2[j]\n        end\n        result[i] = temp\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i, v in ipairs(test_tup1) do\n        result[i] = v + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyi35tm8_.lua:5: attempt to perform arithmetic on local 'v' (a table value)\nstack traceback:\n\t/tmp/tmpyi35tm8_.lua:5: in function 'candidate'\n\t/tmp/tmpyi35tm8_.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n  local result = {}\n  for i = 1, #test_tup1 do\n    result[i] = {}\n    for j = 1, #test_tup1[i] do\n      result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local res_tup = {}\n    for i = 1, #test_tup1 do\n        res_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return res_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplaw0rwee.lua:5: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmplaw0rwee.lua:5: in local 'candidate'\n\t/tmp/tmplaw0rwee.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local tup_len = #test_tup1\n    local result_tup = {}\n    for i = 1, tup_len do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvy_17kuf.lua:6: attempt to perform arithmetic on a table value (field '?')\nstack traceback:\n\t/tmp/tmpvy_17kuf.lua:6: in local 'candidate'\n\t/tmp/tmpvy_17kuf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpzt4i2l.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpdpzt4i2l.lua:5: in function 'candidate'\n\t/tmp/tmpdpzt4i2l.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal result_tup = {}\n\tfor i = 1, #test_tup1 do\n\t\tresult_tup[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\tresult_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = {}\n        for j = 1, #test_tup1[i] do\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n\tlocal tup_sum = {}\n\tfor i = 1, #test_tup1 do\n\t\ttup_sum[i] = {}\n\t\tfor j = 1, #test_tup1[i] do\n\t\t\ttup_sum[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\t\tend\n\tend\n\treturn tup_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122806,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result_tup = {}\n    for i = 1, #test_tup1 do\n        result_tup[i] = {}\n        for j = 1, #test_tup1[i] do\n            result_tup[i][j] = test_tup1[i][j] + test_tup2[i][j]\n        end\n    end\n    return result_tup\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to perform index wise addition of table elements in the given two nested tables.\nlocal function add_nested_tuples(test_tup1, test_tup2)\n    local result = {}\n    for i = 1, #test_tup1 do\n        result[i] = test_tup1[i] + test_tup2[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_nested_tuples\n    lu.assertEquals(candidate({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}), {{7, 10}, {7, 14}, {3, 10}, {8, 13}})\n    lu.assertEquals(candidate({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}), {{9, 12}, {9, 16}, {5, 12}, {10, 15}})\n    lu.assertEquals(candidate({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}), {{11, 14}, {11, 18}, {7, 14}, {12, 17}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4xyjgx0.lua:5: attempt to perform arithmetic on field '?' (a table value)\nstack traceback:\n\t/tmp/tmpl4xyjgx0.lua:5: in function 'candidate'\n\t/tmp/tmpl4xyjgx0.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}