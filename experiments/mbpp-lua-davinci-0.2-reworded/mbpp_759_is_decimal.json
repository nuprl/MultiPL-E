{
  "name": "mbpp_759_is_decimal",
  "language": "lua",
  "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, '^[0-9]+%.[0-9][0-9]$')\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  if num:match(\"^[0-9]+[.][0-9]{2}$\") then\n    return true\n  else\n    return false\n  end\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n            if dot_count > 1 then\n                return false\n            end\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    return true\nend",
    "    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal == 2 then\n        return true\n    end\n    return false\nend",
    "    local num_pattern = \"^%d+%.%d%d$\"\n    return string.match(num, num_pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend",
    "  local pattern = \"^[0-9]+[.][0-9]{2}$\"\n  return string.match(num, pattern)\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, '^%d+%.%d%d$')\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, '^[0-9]+.[0-9]{2}$') ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, fract = math.modf(num)\n    if fract == 0 then\n        return true\n    end\n    fract = math.abs(fract)\n    fract = fract * 100\n    local _, fract = math.modf(fract)\n    if fract == 0 then\n        return true\n    end\n    return false\nend"
  ]
}