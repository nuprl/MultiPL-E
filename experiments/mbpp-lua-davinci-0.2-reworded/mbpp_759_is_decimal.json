{
  "name": "mbpp_759_is_decimal",
  "language": "lua",
  "prompt": "-- Write a function to check whether a given string is a decimal number with a precision of 2.\nlocal function is_decimal(num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_decimal\n    lu.assertEquals(candidate('123.11'), true)\n    lu.assertEquals(candidate('e666.86'), false)\n    lu.assertEquals(candidate('3.124587'), false)\n    lu.assertEquals(candidate('1.11'), true)\n    lu.assertEquals(candidate('1.1.11'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, '^[0-9]+%.[0-9][0-9]$')\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  if num:match(\"^[0-9]+[.][0-9]{2}$\") then\n    return true\n  else\n    return false\n  end\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n            if dot_count > 1 then\n                return false\n            end\n        elseif not tonumber(c) then\n            return false\n        end\n    end\n    return true\nend",
    "    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal == 2 then\n        return true\n    end\n    return false\nend",
    "    local num_pattern = \"^%d+%.%d%d$\"\n    return string.match(num, num_pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend",
    "  local pattern = \"^[0-9]+[.][0-9]{2}$\"\n  return string.match(num, pattern)\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, '^%d+%.%d%d$')\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, '^[0-9]+.[0-9]{2}$') ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, fract = math.modf(num)\n    if fract == 0 then\n        return true\n    end\n    fract = math.abs(fract)\n    fract = fract * 100\n    local _, fract = math.modf(fract)\n    if fract == 0 then\n        return true\n    end\n    return false\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "\tlocal num_str = tostring(num)\n\tlocal dot_pos = string.find(num_str, '.')\n\tif dot_pos then\n\t\tlocal decimal_part = string.sub(num_str, dot_pos + 1)\n\t\tif #decimal_part > 2 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
    "    local pattern = '^[0-9]+%.?[0-9]?[0-9]?$'\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i and j and i == 1 and j == #num then\n    return true\n  end\n  return false\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "\tlocal pattern = \"^[0-9]*[.]?[0-9]{0,2}$\"\n\treturn string.match(num, pattern)\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    local num = tonumber(num)\n    if num then\n        return string.format(\"%.2f\", num) == num\n    end\n    return false\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index then\n        local decimal = string.sub(num_str, dot_index + 1)\n        if #decimal > 2 then\n            return false\n        end\n    end\n    return true\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return n == num\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return num:match(\"^%d+%.%d%d$\") ~= nil\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "\tif not num then return false end\n\tlocal n = tonumber(num)\n\tif not n then return false end\n\treturn num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local decimal_pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return ngx.re.match(num, decimal_pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return num:match(\"^%d+%.%d%d$\")\nend",
    "    return num:match(\"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "\tif type(num) ~= \"string\" then\n\t\treturn false\n\tend\n\tlocal n = tonumber(num)\n\tif n == nil then\n\t\treturn false\n\tend\n\tlocal s = string.format(\"%.2f\", n)\n\treturn s == num\nend",
    "    return string.match(num, \"^-?%d+%.%d%d$\")\nend",
    "  local _, _, int, dec = string.find(num, \"^(%d+)%.(%d+)$\")\n  if int and dec and string.len(dec) == 2 then\n    return true\n  end\n  return false\nend",
    "    return num:match(\"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    local function is_decimal_helper(num, i)\n        if i == 3 then\n            return true\n        elseif i == 2 and num:sub(i, i) == '.' then\n            return true\n        elseif i == 1 and num:sub(i, i) == '-' then\n            return true\n        elseif num:sub(i, i) == '.' or num:sub(i, i) == '-' then\n            return false\n        elseif tonumber(num:sub(i, i)) then\n            return is_decimal_helper(num, i + 1)\n        else\n            return false\n        end\n    end\n    return is_decimal_helper(num, 1)\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, frac = math.modf(num)\n    if frac == 0 then\n        return true\n    end\n    local str = tostring(frac)\n    if #str <= 3 then\n        return true\n    end\n    return false\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local s, e = string.find(num, \"^%d+%.%d%d$\")\n    if s and e then\n        return true\n    end\n    return false\nend",
    "    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if not dot_index then\n        return false\n    end\n    local decimal = string.sub(str, dot_index + 1)\n    if #decimal > 2 then\n        return false\n    end\n    return true\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d*%.?%d+$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  return false\nend",
    "  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return string.format(\"%.2f\", n) == num\nend",
    "    local pattern = \"^[0-9]+[.][0-9]{2}$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, '^%d+%.%d%d$') ~= nil\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\") ~= nil\nend",
    "    local pattern = \"^[0-9]*%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "\treturn string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local function is_decimal_helper(num, i)\n        if i == 0 then\n            return true\n        elseif string.sub(num, i, i) == \".\" then\n            return is_decimal_helper(num, i - 1)\n        elseif tonumber(string.sub(num, i, i)) == nil then\n            return false\n        else\n            return is_decimal_helper(num, i - 1)\n        end\n    end\n    return is_decimal_helper(num, #num)\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if not dot_index then\n        return false\n    end\n    local decimal_part = string.sub(num_str, dot_index + 1)\n    return #decimal_part == 2\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return true\n    end\n    return #s - j <= 2\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, '^%d+%.%d%d$')\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    if not num then return false end\n    local n = tonumber(num)\n    if not n then return false end\n    return string.format(\"%.2f\", n) == num\nend",
    "    local match = num:match(\"^[+-]?%d+%.?%d?%d?$\")\n    if match then\n        return true\n    else\n        return false\n    end\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^%d+%.?%d*$\")\n    if i == 1 and j == #num then\n        return true\n    end\n    return false\nend",
    "    if not num then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if not i then\n        return true\n    end\n    local decimal = s:sub(j + 1)\n    if #decimal > 2 then\n        return false\n    end\n    return true\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local int, frac = math.modf(num)\n    if frac == 0 then\n        return true\n    end\n    local str = tostring(frac)\n    return string.len(str) == 3\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local n = tonumber(num)\n    if not n then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find(\"%.\")\n    if not i then\n        return false\n    end\n    if #s - j > 2 then\n        return false\n    end\n    return true\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend",
    "    return num:match(\"^[%d]+%.?[%d]?[%d]?$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "  return num:match(\"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "\treturn num:match(\"^%d+%.%d%d$\")\nend",
    "    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if dot_index == nil then\n        return false\n    end\n    local dot_index_after = dot_index + 1\n    if dot_index_after > #num_str then\n        return false\n    end\n    local decimal_str = string.sub(num_str, dot_index_after)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "\treturn string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\") ~= nil\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local function is_decimal_helper(num, count)\n        if count > 2 then\n            return false\n        elseif num == '' then\n            return true\n        elseif num:sub(1, 1) == '.' then\n            return is_decimal_helper(num:sub(2), count + 1)\n        elseif num:sub(1, 1) == '-' then\n            return is_decimal_helper(num:sub(2), count)\n        else\n            return is_decimal_helper(num:sub(2), count)\n        end\n    end",
    "    local n = tonumber(num)\n    if n then\n        return n == math.floor(n)\n    end\n    return false\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local i, j = string.find(num, \"^[%d]+%.?[%d]?[%d]?$\")\n    return i ~= nil and j == #num\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return type(num) == \"string\" and num:match(\"^[+-]?%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "\tif not num then return false end\n\tlocal n = tonumber(num)\n\tif not n then return false end\n\treturn string.format(\"%.2f\", n) == num\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "  return num:match(\"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "  local pattern = \"^%d+%.%d%d$\"\n  return string.match(num, pattern)\nend",
    "  return string.match(num, \"^[0-9]+[.][0-9]{2}$\")\nend",
    "  local pattern = \"^[0-9]+[.][0-9]{2}$\"\n  return string.match(num, pattern)\nend",
    "  local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n  return string.match(num, pattern)\nend",
    "  return num:match(\"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local num_str = tostring(num)\n    local dot_index = string.find(num_str, \"%.\")\n    if dot_index == nil then\n        return true\n    else\n        return #num_str - dot_index == 3\n    end\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local num_str = tostring(num)\n    local dot_index = string.find(num_str, '.')\n    if dot_index == nil then\n        return true\n    end\n    local decimal_str = string.sub(num_str, dot_index + 1)\n    if #decimal_str > 2 then\n        return false\n    end\n    return true\nend",
    "  local num_str = tostring(num)\n  local dot_index = string.find(num_str, '%.')\n  if dot_index == nil then\n    return false\n  end\n  local decimal_part = string.sub(num_str, dot_index + 1)\n  if #decimal_part > 2 then\n    return false\n  end\n  return true\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return string.match(num, \"^%d+%.%d%d$\") ~= nil\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "  local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n  return string.match(num, pattern)\nend",
    "    local str = tostring(num)\n    local dot_pos = string.find(str, \".\")\n    if dot_pos then\n        return #str - dot_pos == 3\n    else\n        return true\n    end\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_index = string.find(num, \"%.\")\n    if not dot_index then\n        return false\n    end\n    local before_dot = string.sub(num, 1, dot_index - 1)\n    local after_dot = string.sub(num, dot_index + 1)\n    if #before_dot == 0 or #after_dot > 2 then\n        return false\n    end\n    return true\nend",
    "  if type(num) ~= \"string\" then\n    return false\n  end\n  local i, j = string.find(num, \"^[%+%-]?%d+%.?%d*$\")\n  if i == 1 and j == #num then\n    return true\n  end\n  return false\nend",
    "    if type(num) ~= 'string' then\n        return false\n    end",
    "\treturn string.match(num, \"^[0-9]+%.[0-9][0-9]$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  local s = tostring(num)\n  local i, j = s:find('%.')\n  if i then\n    return #s - j <= 2\n  end\n  return true\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "  if not num then return false end\n  if type(num) ~= 'string' then return false end\n  if not num:match('^[0-9]+%.?[0-9]*$') then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  if n < 0 then return false end\n  if n > 100 then return false end\n  return true\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local pattern = \"^[0-9]+.[0-9]{2}$\"\n    return string.match(num, pattern)\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]?[0-9]?$\"\n    return string.match(num, pattern)\nend",
    "  local num = tonumber(num)\n  if num == nil then\n    return false\n  end\n  local num_str = tostring(num)\n  local dot_pos = string.find(num_str, \"%.\")\n  if dot_pos == nil then\n    return false\n  end\n  local decimal_part = string.sub(num_str, dot_pos + 1)\n  if #decimal_part ~= 2 then\n    return false\n  end\n  return true\nend",
    "    local pattern = \"^[0-9]+%.?[0-9]{0,2}$\"\n    return string.match(num, pattern)\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "\treturn string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    if s:find(\"%.\") then\n        local p = s:sub(s:find(\"%.\") + 1)\n        if #p == 2 then\n            return true\n        end\n    end\n    return false\nend",
    "  if not num then return false end\n  local n = tonumber(num)\n  if not n then return false end\n  return n == num and string.match(num, \"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "  return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot_index = string.find(str, '.')\n    if dot_index == nil then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #str do\n        if string.sub(str, i, i) == '.' then\n            dot_count = dot_count + 1\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_index = string.find(str, '.')\n    if dot_index == #str then\n        return false\n    end\n    local dot_index = string.find(str, '.')\n    local decimal_part = string.sub(str, dot_index + 1)\n    if #decimal_part > 2 then\n        return false\n    end\n    return true\nend",
    "    local pattern = '^[0-9]+%.?[0-9]{0,2}$'\n    return string.match(num, pattern)\nend",
    "  if type(num) ~= 'string' then\n    return false\n  end\n  local i, j = string.find(num, '^%d+%.%d%d$')\n  return i ~= nil and i == 1 and j == string.len(num)\nend",
    "    return string.match(num, \"^[0-9]+%.?[0-9]{0,2}$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = tostring(num)\n    local dot = string.find(str, \"%.\")\n    if dot == nil then\n        return false\n    end\n    local len = string.len(str)\n    local precision = len - dot - 1\n    if precision == 2 then\n        return true\n    end\n    return false\nend",
    "    if type(num) ~= \"string\" then\n        return false\n    end\n    local dot_count = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n        if c == \".\" then\n            dot_count = dot_count + 1\n        elseif c < \"0\" or c > \"9\" then\n            return false\n        end\n    end\n    if dot_count > 1 then\n        return false\n    end\n    local dot_pos = num:find(\".\", 1, true)\n    if dot_pos then\n        local after_dot = #num - dot_pos\n        if after_dot > 2 then\n            return false\n        end\n    end\n    return true\nend",
    "    return num:match(\"^[0-9]+%.?[0-9]?[0-9]?$\")\nend",
    "    return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = s:find('%.')\n    if i == nil then\n        return false\n    end\n    local decimal = s:sub(j + 1)\n    if #decimal ~= 2 then\n        return false\n    end\n    return true\nend",
    "    local n = tonumber(num)\n    if n == nil then\n        return false\n    end\n    local s = tostring(n)\n    local i, j = string.find(s, \"%.\")\n    if i == nil then\n        return true\n    end\n    local len = string.len(s)\n    if len - j > 2 then\n        return false\n    end\n    return true\nend",
    "  return string.match(num, \"^%d+%.%d%d$\")\nend",
    "    local pattern = \"^%d+%.%d%d$\"\n    return string.match(num, pattern)\nend",
    "    local num = tonumber(num)\n    if num == nil then\n        return false\n    end\n    local str = string.format(\"%.2f\", num)\n    return str == num\nend"
  ]
}