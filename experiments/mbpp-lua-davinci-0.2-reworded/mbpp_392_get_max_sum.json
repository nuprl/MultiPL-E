{
  "name": "mbpp_392_get_max_sum",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  if n <= 0 then\n    return 0\n  end",
    "    if n < 12 then\n        return n\n    end\n    local a, b, c, d = get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)\n    return math.max(a + b + c + d, n)\nend",
    "    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "  if n < 12 then\n    return n\n  end\n  local max_sum = 0\n  local max_sum_1 = get_max_sum(math.floor(n / 2))\n  local max_sum_2 = get_max_sum(math.floor(n / 3))\n  local max_sum_3 = get_max_sum(math.floor(n / 4))\n  local max_sum_4 = get_max_sum(math.floor(n / 5))\n  local max_sum_5 = get_max_sum(math.floor(n / 6))\n  max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5\n  if max_sum < n then\n    max_sum = n\n  end\n  return max_sum\nend",
    "  local memo = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if memo[n] then return memo[n] end\n    local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    memo[n] = max\n    return max\n  end\n  return f(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum2 = get_max_sum(math.floor(n / 2))\n    local sum3 = get_max_sum(math.floor(n / 3))\n    local sum4 = get_max_sum(math.floor(n / 4))\n    local sum5 = get_max_sum(math.floor(n / 5))\n    if sum2 + sum3 + sum4 + sum5 > sum then\n        sum = sum2 + sum3 + sum4 + sum5\n    end\n    return sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max = n\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    if n >= 2 then\n        sum = sum + get_max_sum(n/2)\n    end\n    if n >= 3 then\n        sum = sum + get_max_sum(n/3)\n    end\n    if n >= 4 then\n        sum = sum + get_max_sum(n/4)\n    end\n    if n >= 5 then\n        sum = sum + get_max_sum(n/5)\n    end\n    return sum\nend",
    "    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend",
    "\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tfor i = 2, 5 do\n\t\tlocal sum = get_max_sum(n / i)\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend",
    "    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend",
    "    local cache = {}\n    local function _get_max_sum(n)\n        if n < 12 then\n            return n\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(_get_max_sum(n/2) + _get_max_sum(n/3) + _get_max_sum(n/4) + _get_max_sum(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return _get_max_sum(n)\nend",
    "    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum2 = get_max_sum(math.floor(n / 2))\n    local sum3 = get_max_sum(math.floor(n / 3))\n    local sum4 = get_max_sum(math.floor(n / 4))\n    local sum5 = get_max_sum(math.floor(n / 5))\n    if sum2 + sum3 + sum4 + sum5 > n then\n        sum = sum2 + sum3 + sum4 + sum5\n    end\n    return sum\nend",
    "  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n < 0 then\n      return -math.huge\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend",
    "    local cache = {}\n    local function f(n)\n        if n == 0 then return 0 end\n        if cache[n] then return cache[n] end\n        local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = sum\n        return sum\n    end\n    return f(n)\nend",
    "  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    local res = get_max_sum(math.floor(n / i))\n    if res > sum then\n      sum = res\n    end\n  end\n  max_sum = math.max(max_sum, sum)\n  return max_sum\nend",
    "    local memo = {}\n    local function max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max = n\n        for i = 2, 5 do\n            local sum = max_sum(n / i)\n            if sum > max then\n                max = sum\n            end\n        end\n        memo[n] = max\n        return max\n    end\n    return max_sum(n)\nend"
  ]
}