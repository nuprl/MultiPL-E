{
  "name": "mbpp_106_add_lists",
  "language": "lua",
  "prompt": "-- Write a function to append the given table to the given tables.\nlocal function add_lists(test_list, test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_lists\n    lu.assertEquals(candidate({5, 6, 7}, {9, 10}), {9, 10, 5, 6, 7})\n    lu.assertEquals(candidate({6, 7, 8}, {10, 11}), {10, 11, 6, 7, 8})\n    lu.assertEquals(candidate({7, 8, 9}, {11, 12}), {11, 12, 7, 8, 9})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  for i, tup in ipairs(test_tup) do\n    table.insert(test_list, tup)\n  end\nend",
    "    for i, v in ipairs(test_tup) do\n        table.insert(test_list, v)\n    end\n    return test_list\nend",
    "    for i, v in ipairs(test_tup) do\n        table.insert(test_list, v)\n    end\nend",
    "    for _, t in ipairs(test_tup) do\n        table.insert(test_list, t)\n    end\nend",
    "    for _, t in ipairs(test_tup) do\n        table.insert(test_list, t)\n    end\nend",
    "    if test_tup then\n        for _, tup in ipairs(test_tup) do\n            table.insert(test_list, tup)\n        end\n    end\nend",
    "    local new_list = {}\n    for _, t in ipairs(test_list) do\n        table.insert(new_list, t)\n    end\n    for _, t in ipairs(test_tup) do\n        table.insert(new_list, t)\n    end\n    return new_list\nend",
    "  for _, t in ipairs(test_tup) do\n    table.insert(test_list, t)\n  end\nend",
    "    for _, t in ipairs(test_tup) do\n        table.insert(test_list, t)\n    end\nend",
    "  for i, v in ipairs(test_tup) do\n    table.insert(test_list, v)\n  end\nend",
    "  local new_list = {}\n  for _, t in ipairs(test_list) do\n    table.insert(new_list, t)\n  end\n  for _, t in ipairs(test_tup) do\n    table.insert(new_list, t)\n  end\n  return new_list\nend",
    "  for _, tup in ipairs(test_tup) do\n    table.insert(test_list, tup)\n  end\nend",
    "  for i,v in ipairs(test_tup) do\n    table.insert(test_list, v)\n  end\nend",
    "\tlocal test_tup_len = #test_tup\n\tfor i = 1, test_tup_len do\n\t\ttable.insert(test_list, test_tup[i])\n\tend\nend",
    "    for _, v in ipairs(test_tup) do\n        table.insert(test_list, v)\n    end\nend",
    "  for _, t in ipairs(test_tup) do\n    table.insert(test_list, t)\n  end\nend",
    "    for i, v in ipairs(test_tup) do\n        table.insert(test_list, v)\n    end\nend",
    "  if test_tup then\n    for _, tup in ipairs(test_tup) do\n      table.insert(test_list, tup)\n    end\n  end\nend",
    "    for _, t in ipairs(test_tup) do\n        table.insert(test_list, t)\n    end\nend",
    "    for _, t in ipairs(test_tup) do\n        table.insert(test_list, t)\n    end\nend"
  ]
}