{
  "name": "mbpp_595_min_Swaps",
  "language": "lua",
  "prompt": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i=1,#str1 do\n\t\tif str1:sub(i,i) ~= str2:sub(i,i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijuv3h5z.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpijuv3h5z.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local len = #str1\n  local count = 0\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w79uvw9.lua:17: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp_w79uvw9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local str1_len = #str1\n  local str2_len = #str2\n  if str1_len ~= str2_len then\n    return -1\n  end\n  for i = 1, str1_len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5if9b24k.lua:21: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp5if9b24k.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg73trrnl.lua:17: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpg73trrnl.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = #str1\n    local len2 = #str2\n    local count = 0\n    for i = 1, len1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgn3fv3f.lua:17: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphgn3fv3f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i=1, #str1 do\n        if str1:sub(i,i) ~= str2:sub(i,i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln32le0j.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpln32le0j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i=1, #str1 do\n        if str1:sub(i,i) ~= str2:sub(i,i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln32le0j.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpln32le0j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local len1 = #str1\n  local len2 = #str2\n  if len1 ~= len2 then\n    return -1\n  end\n  local count = 0\n  for i = 1, len1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr7q2lye.lua:21: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpqr7q2lye.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local len1, len2 = #str1, #str2\n  local count = 0\n  if len1 ~= len2 then\n    return -1\n  end\n  for i = 1, len1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55fl_o55.lua:20: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp55fl_o55.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i,i) ~= str2:sub(i,i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmygpswpr.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmygpswpr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = #str1\n    local len2 = #str2\n    local count = 0\n    for i = 1, len1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgn3fv3f.lua:17: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphgn3fv3f.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = #str1\n    local len2 = #str2\n    if len1 ~= len2 then\n        return -1\n    end\n    local count = 0\n    for i = 1, len1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fvpyc5f.lua:21: expected: \"Not Possible\"\nactual: 1\nstack traceback:\n\t/tmp/tmp_fvpyc5f.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local swaps = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      swaps = swaps + 1\n    end\n  end\n  return swaps\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm6gn1kc.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpfm6gn1kc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local i = 1\n    while i <= #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n        i = i + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ufmu6a.lua:17: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp71ufmu6a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local i = 1\n  while i <= #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n    i = i + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpozscpuvo.lua:17: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpozscpuvo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4woom7d.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpn4woom7d.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal len1, len2 = #str1, #str2\n\tif len1 ~= len2 then\n\t\treturn -1\n\tend\n\tlocal count = 0\n\tfor i = 1, len1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta64_ef3.lua:20: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpta64_ef3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1, len2 = #str1, #str2\n    if len1 ~= len2 then return -1 end\n    local count = 0\n    for i = 1, len1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then count = count + 1 end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg0lq7y7.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpzg0lq7y7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u8jz7z7.lua:17: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp3u8jz7z7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal len1, len2 = #str1, #str2\n\tlocal count = 0\n\tfor i = 1, len1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyral16k.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpxyral16k.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal swaps = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i,i) ~= str2:sub(i,i) then\n\t\t\tswaps = swaps + 1\n\t\tend\n\tend\n\treturn swaps\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptan9xf5_.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptan9xf5_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i,i) ~= str2:sub(i,i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubfw6zji.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpubfw6zji.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, str1:len() do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5mawygb.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpg5mawygb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4woom7d.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpn4woom7d.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = #str1\n    local len2 = #str2\n    if len1 ~= len2 then\n        return -1\n    end\n    local count = 0\n    for i = 1, len1 do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return math.floor(count / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uurmh4p.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2uurmh4p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len = #str1\n    local count = 0\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l0kjlk8.lua:17: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp4l0kjlk8.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i=1, #str1 do\n        if str1:sub(i,i) ~= str2:sub(i,i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln32le0j.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpln32le0j.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1[i] ~= str2[i] then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdiadvcs8.lua:16: expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpdiadvcs8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4woom7d.lua:16: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmpn4woom7d.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i,i) ~= str2:sub(i,i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uurmh4p.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp2uurmh4p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local len1 = string.len(str1)\n    local len2 = string.len(str2)\n    local count = 0\n    if len1 ~= len2 then\n        return -1\n    end\n    for i = 1, len1 do\n        if str1[i] ~= str2[i] then\n            count = count + 1\n        end\n    end\n    return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122553,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd6qhzer.lua:20: expected: 1, actual: 0.0\nstack traceback:\n\t/tmp/tmpkd6qhzer.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tfor i = 1, #str1 do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hfgnhnc.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4hfgnhnc.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  local len = #str1\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122552,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ynwklp.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr8ynwklp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n\tlocal count = 0\n\tlocal len = #str1\n\tfor i = 1, len do\n\t\tif str1:sub(i, i) ~= str2:sub(i, i) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphckm44s3.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphckm44s3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local count = 0\n  for i = 1, #str1 do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdf5aw42.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpsdf5aw42.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    local len = #str1\n    for i = 1, len do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8kw1j10.lua:16: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx8kw1j10.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n    local count = 0\n    for i = 1, #str1 do\n        if str1:sub(i, i) ~= str2:sub(i, i) then\n            count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5qv90ql.lua:15: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv5qv90ql.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nlocal function min_Swaps(str1, str2)\n  local len = #str1\n  local count = 0\n  for i = 1, len do\n    if str1:sub(i, i) ~= str2:sub(i, i) then\n      count = count + 1\n    end\n  end\n  return count / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_Swaps\n    lu.assertEquals(candidate('1101', '1110'), 1)\n    lu.assertEquals(candidate('111', '000'), 'Not Possible')\n    lu.assertEquals(candidate('111', '110'), 'Not Possible')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027863,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w79uvw9.lua:17: expected: \"Not Possible\"\nactual: 1.5\nstack traceback:\n\t/tmp/tmp_w79uvw9.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}