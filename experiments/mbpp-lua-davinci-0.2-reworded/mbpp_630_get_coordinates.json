{
  "name": "mbpp_630_get_coordinates",
  "language": "lua",
  "prompt": "-- Write a function to extract all the adjacent coordinates of the given coordinate table.\nlocal function get_coordinates(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_coordinates\n    lu.assertEquals(candidate({3, 4}), {{2, 3}, {2, 4}, {2, 5}, {3, 3}, {3, 4}, {3, 5}, {4, 3}, {4, 4}, {4, 5}})\n    lu.assertEquals(candidate({4, 5}), {{3, 4}, {3, 5}, {3, 6}, {4, 4}, {4, 5}, {4, 6}, {5, 4}, {5, 5}, {5, 6}})\n    lu.assertEquals(candidate({5, 6}), {{4, 5}, {4, 6}, {4, 7}, {5, 5}, {5, 6}, {5, 7}, {6, 5}, {6, 6}, {6, 7}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {}\n    for i = -1, 1 do\n        for j = -1, 1 do\n            if i ~= 0 or j ~= 0 then\n                table.insert(coords, {x + i, y + j})\n            end\n        end\n    end\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coords = {\n        {x, y},\n        {x, y + 1},\n        {x, y - 1},\n        {x + 1, y},\n        {x + 1, y + 1},\n        {x + 1, y - 1},\n        {x - 1, y},\n        {x - 1, y + 1},\n        {x - 1, y - 1},\n    }\n    return coords\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coords = {\n        {x+1, y},\n        {x-1, y},\n        {x, y+1},\n        {x, y-1}\n    }\n    return adj_coords\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        table.insert(coordinates, {x, y})\n        table.insert(coordinates, {x, y + 1})\n        table.insert(coordinates, {x, y - 1})\n        table.insert(coordinates, {x + 1, y})\n        table.insert(coordinates, {x - 1, y})\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        local z = test_tup[i][3]\n        local t = test_tup[i][4]\n        local coord = {x, y, z, t}\n        table.insert(coordinates, coord)\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        local z = test_tup[i][3]\n        local x_coordinates = {x - 1, x, x + 1}\n        local y_coordinates = {y - 1, y, y + 1}\n        local z_coordinates = {z - 1, z, z + 1}\n        for j = 1, #x_coordinates do\n            for k = 1, #y_coordinates do\n                for l = 1, #z_coordinates do\n                    local coordinate = {x_coordinates[j], y_coordinates[k], z_coordinates[l]}\n                    table.insert(coordinates, coordinate)\n                end\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        local z = test_tup[i][3]\n        local coord = {x, y, z}\n        table.insert(coordinates, coord)\n    end\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local coordinates = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1},\n    }\n    return coordinates\nend",
    "    local x, y = test_tup[1], test_tup[2]\n    local adj_coordinates = {\n        {x-1, y},\n        {x+1, y},\n        {x, y-1},\n        {x, y+1}\n    }\n    return adj_coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x, y = test_tup[i][1], test_tup[i][2]\n        local adj_coordinates = {\n            {x - 1, y},\n            {x + 1, y},\n            {x, y - 1},\n            {x, y + 1}\n        }\n        for j = 1, #adj_coordinates do\n            table.insert(coordinates, adj_coordinates[j])\n        end\n    end\n    return coordinates\nend",
    "\tlocal coordinates = {}\n\tfor i = 1, #test_tup do\n\t\tlocal x = test_tup[i][1]\n\t\tlocal y = test_tup[i][2]\n\t\ttable.insert(coordinates, {x, y})\n\t\ttable.insert(coordinates, {x, y + 1})\n\t\ttable.insert(coordinates, {x, y - 1})\n\t\ttable.insert(coordinates, {x + 1, y})\n\t\ttable.insert(coordinates, {x + 1, y + 1})\n\t\ttable.insert(coordinates, {x + 1, y - 1})\n\t\ttable.insert(coordinates, {x - 1, y})\n\t\ttable.insert(coordinates, {x - 1, y + 1})\n\t\ttable.insert(coordinates, {x - 1, y - 1})\n\tend\n\treturn coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        local z = test_tup[i][3]\n        local x_coordinates = {x - 1, x, x + 1}\n        local y_coordinates = {y - 1, y, y + 1}\n        local z_coordinates = {z - 1, z, z + 1}\n        for _, x_coordinate in ipairs(x_coordinates) do\n            for _, y_coordinate in ipairs(y_coordinates) do\n                for _, z_coordinate in ipairs(z_coordinates) do\n                    table.insert(coordinates, {x_coordinate, y_coordinate, z_coordinate})\n                end\n            end\n        end\n    end\n    return coordinates\nend",
    "  local coordinates = {}\n  local x, y = test_tup[1], test_tup[2]\n  for i = -1, 1 do\n    for j = -1, 1 do\n      if i ~= 0 or j ~= 0 then\n        table.insert(coordinates, {x + i, y + j})\n      end\n    end\n  end\n  return coordinates\nend",
    "    local coordinates = {}\n    for i, v in ipairs(test_tup) do\n        local x, y = v[1], v[2]\n        local x_1, y_1 = x - 1, y - 1\n        local x_2, y_2 = x, y - 1\n        local x_3, y_3 = x + 1, y - 1\n        local x_4, y_4 = x - 1, y\n        local x_5, y_5 = x + 1, y\n        local x_6, y_6 = x - 1, y + 1\n        local x_7, y_7 = x, y + 1\n        local x_8, y_8 = x + 1, y + 1\n        table.insert(coordinates, {x_1, y_1})\n        table.insert(coordinates, {x_2, y_2})\n        table.insert(coordinates, {x_3, y_3})\n        table.insert(coordinates, {x_4, y_4})\n        table.insert(coordinates, {x_5, y_5})\n        table.insert(coordinates, {x_6, y_6})\n        table.insert(coordinates, {x_7, y_7})\n        table.insert(coordinates, {x_8, y_8})\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x, y = test_tup[i][1], test_tup[i][2]\n        local adj_coordinates = {\n            {x, y + 1},\n            {x, y - 1},\n            {x + 1, y},\n            {x - 1, y},\n        }\n        for j = 1, #adj_coordinates do\n            table.insert(coordinates, adj_coordinates[j])\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        for j = 1, #test_tup[i] do\n            if test_tup[i][j] == 1 then\n                table.insert(coordinates, {i, j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        for j = 1, #test_tup[i] do\n            if test_tup[i][j] == 1 then\n                table.insert(coordinates, {i, j})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        for j = 1, #test_tup do\n            local x1 = test_tup[j][1]\n            local y1 = test_tup[j][2]\n            if (x1 == x and y1 == y + 1) or (x1 == x and y1 == y - 1) or (x1 == x + 1 and y1 == y) or (x1 == x - 1 and y1 == y) then\n                table.insert(coordinates, {x1, y1})\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local test_coord = test_tup[i]\n        local x, y = test_coord[1], test_coord[2]\n        local adj_coords = {\n            {x + 1, y},\n            {x - 1, y},\n            {x, y + 1},\n            {x, y - 1},\n            {x + 1, y + 1},\n            {x - 1, y - 1},\n            {x + 1, y - 1},\n            {x - 1, y + 1}\n        }\n        for j = 1, #adj_coords do\n            local adj_coord = adj_coords[j]\n            if not contains(coordinates, adj_coord) then\n                table.insert(coordinates, adj_coord)\n            end\n        end\n    end\n    return coordinates\nend",
    "    local coordinates = {}\n    for i = 1, #test_tup do\n        local x = test_tup[i][1]\n        local y = test_tup[i][2]\n        local z = test_tup[i][3]\n        local t = test_tup[i][4]\n        local x_coordinates = {x-1, x, x+1}\n        local y_coordinates = {y-1, y, y+1}\n        local z_coordinates = {z-1, z, z+1}\n        local t_coordinates = {t-1, t, t+1}\n        for j = 1, #x_coordinates do\n            for k = 1, #y_coordinates do\n                for l = 1, #z_coordinates do\n                    for m = 1, #t_coordinates do\n                        local x_coord = x_coordinates[j]\n                        local y_coord = y_coordinates[k]\n                        local z_coord = z_coordinates[l]\n                        local t_coord = t_coordinates[m]\n                        if (x_coord ~= x or y_coord ~= y or z_coord ~= z or t_coord ~= t) then\n                            table.insert(coordinates, {x_coord, y_coord, z_coord, t_coord})\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return coordinates\nend"
  ]
}