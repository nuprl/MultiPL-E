{
  "name": "mbpp_255_combinations_colors",
  "language": "lua",
  "prompt": "-- Write a function that takes in a table and length n, and generates all combinations (with repetition) of the elements of the table and returns a table with a table for each combination.\nlocal function combinations_colors(l, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = combinations_colors\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 1), {{'Red'}, {'Green'}, {'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 2), {{'Red', 'Red'}, {'Red', 'Green'}, {'Red', 'Blue'}, {'Green', 'Green'}, {'Green', 'Blue'}, {'Blue', 'Blue'}})\n    lu.assertEquals(candidate({'Red', 'Green', 'Blue'}, 3), {{'Red', 'Red', 'Red'}, {'Red', 'Red', 'Green'}, {'Red', 'Red', 'Blue'}, {'Red', 'Green', 'Green'}, {'Red', 'Green', 'Blue'}, {'Red', 'Blue', 'Blue'}, {'Green', 'Green', 'Green'}, {'Green', 'Green', 'Blue'}, {'Green', 'Blue', 'Blue'}, {'Blue', 'Blue', 'Blue'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    for i = 1, #l do\n        local first = l[i]\n        if n == 1 then\n            table.insert(result, {first})\n        else\n            local rest = combinations_colors(l, n - 1)\n            for j = 1, #rest do\n                table.insert(result, {first, unpack(rest[j])})\n            end\n        end\n    end\n    return result\nend",
    "  local t = {}\n  for i = 1, #l do\n    t[i] = {l[i]}\n  end\n  for i = 2, n do\n    local tt = {}\n    for j = 1, #t do\n      for k = 1, #l do\n        tt[#tt + 1] = table_concat(t[j], l[k])\n      end\n    end\n    t = tt\n  end\n  return t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t .. l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, \"\")\n\treturn res\nend",
    "    local result = {}\n    for i = 1, #l do\n        local first = l[i]\n        if n == 1 then\n            table.insert(result, {first})\n        else\n            local rest = combinations_colors(l, n - 1)\n            for j = 1, #rest do\n                table.insert(result, {first, unpack(rest[j])})\n            end\n        end\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = table.copy(t[j])\n                tt[#tt][i] = l[k]\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            res[#res + 1] = t\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, t .. l[j])\n    end\n  end\n  helper(l, n, 1, \"\")\n  return result\nend",
    "\tlocal res = {}\n\tfor i = 1, #l do\n\t\tlocal c = l[i]\n\t\tif n == 1 then\n\t\t\tres[#res + 1] = {c}\n\t\telse\n\t\t\tlocal sub = combinations_colors(l, n - 1)\n\t\t\tfor j = 1, #sub do\n\t\t\t\tres[#res + 1] = {c}\n\t\t\t\tfor k = 1, #sub[j] do\n\t\t\t\t\tres[#res][#res[#res] + 1] = sub[j][k]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn res\nend",
    "    local result = {}\n    local function helper(l, n, start)\n        if n == 0 then\n            table.insert(result, {})\n            return\n        end\n        for i = start, #l do\n            local new_entry = {table.unpack(l[i])}\n            local last = result[#result]\n            if last then\n                table.insert(last, table.unpack(new_entry))\n            else\n                result[#result+1] = new_entry\n            end\n            helper(l, n - 1, i)\n            last = result[#result]\n            table.remove(last)\n        end\n    end\n    helper(l, n, 1)\n    return result\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = {unpack(t[j])}\n                tt[#tt][i] = l[k]\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return result\nend",
    "  local combinations = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(combinations, t)\n    else\n      for j = i, #l do\n        helper(l, n - 1, j, {l[j], unpack(t)})\n      end\n    end\n  end\n  helper(l, n, 1, {})\n  return combinations\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    local i = 1\n    while i <= n do\n        if t[i] == l[#l] then\n            t[i] = l[1]\n            i = i + 1\n        else\n            t[i] = l[l[t[i]] + 1]\n            break\n        end\n    end\n    if i > n then\n        return nil\n    end\n    return t\nend",
    "    if n == 0 then return {{}} end\n    local res = {}\n    for i = 1, #l do\n        for _, v in ipairs(combinations_colors(l, n - 1)) do\n            table.insert(res, {l[i], unpack(v)})\n        end\n    end\n    return res\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    return t\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {table.unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "\tlocal t = {}\n\tlocal function f(t, l, n)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\telse\n\t\t\tfor i = 1, #l do\n\t\t\t\tf(t, l, n - 1)\n\t\t\t\tfor j = #t, 1, -1 do\n\t\t\t\t\ttable.insert(t[j], l[i])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tf(t, l, n)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return res\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    return {t}\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[1]\n\tend\n\tlocal i = n\n\twhile i > 0 do\n\t\tlocal j = n\n\t\twhile j > 0 do\n\t\t\tif t[j] == l[#l] then\n\t\t\t\tt[j] = l[1]\n\t\t\t\tj = j - 1\n\t\t\telse\n\t\t\t\tt[j] = l[index_of(l, t[j]) + 1]\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif j == 0 then\n\t\t\tbreak\n\t\tend\n\t\ti = n\n\t\tlocal new_t = {}\n\t\tfor k = 1, n do\n\t\t\tnew_t[k] = t[k]\n\t\tend\n\t\ttable.insert(combinations, new_t)\n\tend\n\treturn combinations\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal r = {}\n\tlocal function f(t, i)\n\t\tif #t == n then\n\t\t\ttable.insert(r, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tf(table.join(t, l[j]), j)\n\t\tend\n\tend\n\tf({}, 1)\n\treturn r\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\thelper(l, n - 1, j)\n\t\t\t\ttable.insert(t[#t], l[j])\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1)\n\treturn t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    local i = 1\n    local function next_combination()\n        if i > n then\n            return nil\n        end\n        local r = {}\n        for j = 1, n do\n            r[j] = t[j]\n        end\n        i = n\n        while t[i] == l[#l] do\n            t[i] = l[1]\n            i = i - 1\n        end\n        if i < 1 then\n            return nil\n        end\n        t[i] = l[l[t[i]] + 1]\n        return r\n    end\n    return next_combination\nend",
    "\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[1]\n\tend\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal m = n\n\tlocal r = {}\n\tlocal function next_combination()\n\t\tif i > n then\n\t\t\treturn nil\n\t\tend\n\t\tif j > #l then\n\t\t\ti = i + 1\n\t\t\tj = 1\n\t\t\tif i > n then\n\t\t\t\treturn nil\n\t\t\tend\n\t\t\tt[i] = l[1]\n\t\t\tm = n\n\t\t\tk = 1\n\t\tend\n\t\tif k > m then\n\t\t\tj = j + 1\n\t\t\tk = 1\n\t\t\tt[i] = l[j]\n\t\t\tm = n\n\t\tend\n\t\tr[i] = t[i]\n\t\tk = k + 1\n\t\tm = m - 1\n\t\treturn r\n\tend\n\treturn next_combination\nend",
    "  local res = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(res, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t .. l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, \"\")\n\treturn result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, table.copy(l))\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\t\thelper(l, n - 1, j, t)\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {unpack(t), l[j]})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function recurse(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n    else\n      for j = i, #l do\n        recurse(l, n-1, j, {l[j], unpack(t)})\n      end\n    end\n  end\n  recurse(l, n, 1, {})\n  return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    for i = 1, #l do\n        local a = l[i]\n        if n == 1 then\n            table.insert(result, {a})\n        else\n            local sub_combinations = combinations_colors(l, n - 1)\n            for j = 1, #sub_combinations do\n                table.insert(result, {a, unpack(sub_combinations[j])})\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal t = {}\n\tlocal function f(t, i)\n\t\tif i == n then\n\t\t\ttable.insert(t, {})\n\t\telse\n\t\t\tf(t, i+1)\n\t\t\tlocal l = #t\n\t\t\tfor j = 1, l do\n\t\t\t\ttable.insert(t, {})\n\t\t\t\tfor k = 1, i do\n\t\t\t\t\ttable.insert(t[l+j], t[j][k])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tf(t, 1)\n\tfor i = 1, #t do\n\t\tfor j = 1, n do\n\t\t\ttable.insert(t[i], l[j])\n\t\tend\n\tend\n\treturn t\nend",
    "\tlocal t = {}\n\tlocal function f(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {unpack(l)})\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\t\tf(l, n-1, j, t)\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\tend\n\t\tend\n\tend\n\tf(l, n, 1, t)\n\treturn t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "\tlocal res = {}\n\tlocal function combinations(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tcombinations(l, n - 1, j, {l[j], unpack(t)})\n\t\tend\n\tend\n\tcombinations(l, n, 1, {})\n\treturn res\nend",
    "    local result = {}\n    for i = 1, #l do\n        local first = l[i]\n        if n == 1 then\n            table.insert(result, {first})\n        else\n            local rest = combinations_colors(l, n - 1)\n            for j = 1, #rest do\n                table.insert(result, {first, unpack(rest[j])})\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, start, current)\n        if n == 0 then\n            table.insert(result, current)\n            return\n        end\n        for i = start, #l do\n            helper(l, n - 1, i, {l[i], unpack(current)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if i == n then\n            table.insert(res, t)\n            return\n        end\n        for j = 1, #l do\n            helper(l, n, i + 1, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\ttable.insert(t[#t], l[j])\n\t\t\thelper(l, n - 1, j, t)\n\t\t\ttable.remove(t[#t])\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, l)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t)\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = table.copy(t[j])\n                tt[#tt][i] = l[k]\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n        else\n            for j = i, #l do\n                helper(l, n - 1, j, {l[j], unpack(t)})\n            end\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal ret = {}\n\tlocal function helper(l, n, i, t)\n\t\tif i == n then\n\t\t\ttable.insert(ret, t)\n\t\telse\n\t\t\tfor j = 1, #l do\n\t\t\t\thelper(l, n, i + 1, t .. l[j])\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, \"\")\n\treturn ret\nend",
    "    if n == 0 then\n        return {{}}\n    else\n        local result = {}\n        for i = 1, #l do\n            local sub_result = combinations_colors(l, n - 1)\n            for j = 1, #sub_result do\n                table.insert(sub_result[j], l[i])\n                table.insert(result, sub_result[j])\n            end\n        end\n        return result\n    end\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    if n == 0 then return {{}} end\n    local res = {}\n    for i = 1, #l do\n        for _, v in ipairs(combinations_colors(l, n - 1)) do\n            table.insert(res, {l[i], unpack(v)})\n        end\n    end\n    return res\nend",
    "    if n == 0 then\n        return {{}}\n    else\n        local res = {}\n        for i = 1, #l do\n            local rest = combinations_colors(l, n - 1)\n            for j = 1, #rest do\n                res[#res + 1] = {l[i], unpack(rest[j])}\n            end\n        end\n        return res\n    end\nend",
    "    local combinations = {}\n    local function helper(l, n, i, t)\n        if i == n then\n            table.insert(combinations, t)\n        else\n            for j = 1, #l do\n                helper(l, n, i + 1, t .. l[j])\n            end\n        end\n    end\n    helper(l, n, 1, \"\")\n    return combinations\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "\tlocal t = {}\n\tfor i = 1, #l do\n\t\tt[i] = {l[i]}\n\tend\n\tfor i = 2, n do\n\t\tlocal t2 = {}\n\t\tfor j = 1, #t do\n\t\t\tfor k = 1, #l do\n\t\t\t\tlocal t3 = {}\n\t\t\t\tfor m = 1, #t[j] do\n\t\t\t\t\ttable.insert(t3, t[j][m])\n\t\t\t\tend\n\t\t\t\ttable.insert(t3, l[k])\n\t\t\t\ttable.insert(t2, t3)\n\t\t\tend\n\t\tend\n\t\tt = t2\n\tend\n\treturn t\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {unpack(l)})\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\t\thelper(l, n - 1, j, t)\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local t = {}\n  for i = 1, #l do\n    t[i] = {l[i]}\n  end\n  for i = 2, n do\n    local tt = {}\n    for j = 1, #t do\n      for k = 1, #l do\n        tt[#tt + 1] = table.copy(t[j])\n        tt[#tt][i] = l[k]\n      end\n    end\n    t = tt\n  end\n  return t\nend",
    "\tlocal ret = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(ret, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn ret\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return res\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, table.join(t, l[j]))\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "  local res = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(res, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return res\nend",
    "    local result = {}\n    local function helper(l, n, start, curr)\n        if n == 0 then\n            table.insert(result, curr)\n            return\n        end\n        for i = start, #l do\n            helper(l, n - 1, i, {l[i], unpack(curr)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return ret\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t)\n\t\t\ttable.insert(t[#t], l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local a = {}\n    local r = {}\n    for i = 1, n do\n        a[i] = 1\n    end\n    while true do\n        local t = {}\n        for i = 1, n do\n            t[i] = l[a[i]]\n        end\n        table.insert(r, t)\n        local i = n\n        while a[i] == #l do\n            a[i] = 1\n            i = i - 1\n            if i == 0 then\n                return r\n            end\n        end\n        a[i] = a[i] + 1\n    end\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = table.join(t[j], l[k])\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "  local t = {}\n  local function f(t, l, n)\n    if n == 0 then\n      table.insert(t, {})\n    else\n      for i = 1, #l do\n        f(t, l, n - 1)\n        table.insert(t[#t], l[i])\n      end\n    end\n  end\n  f(t, l, n)\n  return t\nend",
    "    local r = {}\n    for i = 1, #l do\n        local c = l[i]\n        if n == 1 then\n            r[#r + 1] = {c}\n        else\n            local cn = combinations_colors(l, n - 1)\n            for j = 1, #cn do\n                r[#r + 1] = {c, unpack(cn[j])}\n            end\n        end\n    end\n    return r\nend",
    "\tlocal res = {}\n\tlocal function combinations(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tcombinations(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\tcombinations(l, n, 1, {})\n\treturn res\nend",
    "\tlocal t = {}\n\tlocal function f(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tf(l, n - 1, j, t)\n\t\t\ttable.insert(t[#t], l[j])\n\t\tend\n\tend\n\tf(l, n, 1, t)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, curr)\n        if n == 0 then\n            table.insert(res, curr)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(curr), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local ret = {}\n    local function helper(l, n, start, curr)\n        if #curr == n then\n            table.insert(ret, curr)\n            return\n        end\n        for i = start, #l do\n            helper(l, n, i, {unpack(curr), l[i]})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local res = {}\n    local function gen(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n        else\n            for j = i, #l do\n                gen(l, n - 1, j, {l[j], unpack(t)})\n            end\n        end\n    end\n    gen(l, n, 1, {})\n    return res\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {unpack(l)})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\thelper(l, n - 1, j, t)\n\t\t\tl[n], l[j] = l[j], l[n]\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[1]\n\tend\n\tlocal t2 = {}\n\tfor i = 1, #l^n do\n\t\tt2[i] = t\n\t\tfor j = n, 1, -1 do\n\t\t\tt[j] = l[(l[j] + 1) % #l]\n\t\t\tif t[j] ~= l[1] then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn t2\nend",
    "    if n == 0 then\n        return {{}}\n    else\n        local res = {}\n        for i = 1, #l do\n            local sub = combinations_colors(l, n - 1)\n            for j = 1, #sub do\n                table.insert(sub[j], l[i])\n                table.insert(res, sub[j])\n            end\n        end\n        return res\n    end\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {l[j], unpack(t)})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local i, j\n    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    local function inc(t, i)\n        if i == 0 then\n            return false\n        end\n        t[i] = t[i] + 1\n        if t[i] > #l then\n            t[i] = l[1]\n            return inc(t, i - 1)\n        end\n        return true\n    end\n    local function copy(t)\n        local t2 = {}\n        for i = 1, #t do\n            t2[i] = t[i]\n        end\n        return t2\n    end\n    local t2 = {}\n    local i = 1\n    while inc(t, n) do\n        t2[i] = copy(t)\n        i = i + 1\n    end\n    return t2\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "\tlocal ret = {}\n\tlocal function f(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(ret, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tf(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\tf(l, n, 1, {})\n\treturn ret\nend",
    "    local res = {}\n    for i = 1, #l do\n        res[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tmp = {}\n        for j = 1, #res do\n            for k = 1, #l do\n                tmp[#tmp + 1] = table.copy(res[j])\n                tmp[#tmp][i] = l[k]\n            end\n        end\n        res = tmp\n    end\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    if n == 0 then\n        return {{}}\n    end\n    local res = {}\n    for i = 1, #l do\n        local t = combinations_colors(l, n - 1)\n        for j = 1, #t do\n            table.insert(t[j], l[i])\n            table.insert(res, t[j])\n        end\n    end\n    return res\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, table.copy(l))\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\ttable.insert(l, j, l[j])\n\t\t\thelper(l, n - 1, j + 1, t)\n\t\t\ttable.remove(l, j + 1)\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = l[1]\n    end\n    local i = 1\n    while true do\n        if t[i] == l[#l] then\n            i = i - 1\n            if i == 0 then\n                break\n            end\n        else\n            t[i] = l[l[t[i]] + 1]\n            i = n\n        end\n    end\n    return t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local res = {}\n    local function _combinations(l, n, i, a)\n        if n == 0 then\n            table.insert(res, a)\n            return\n        end\n        for j = i, #l do\n            _combinations(l, n - 1, j, {l[j], unpack(a)})\n        end\n    end\n    _combinations(l, n, 1, {})\n    return res\nend",
    "  local combinations = {}\n  local function helper(l, n, i, c)\n    if n == 0 then\n      table.insert(combinations, c)\n    else\n      for j = i, #l do\n        helper(l, n - 1, j, {unpack(c), l[j]})\n      end\n    end\n  end\n  helper(l, n, 1, {})\n  return combinations\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn result\nend",
    "    local result = {}\n    local function helper(l, n, i, temp)\n        if n == 0 then\n            table.insert(result, temp)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(temp), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal ret = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(ret, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn ret\nend",
    "  local combinations = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(combinations, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, t .. l[j])\n    end\n  end\n  helper(l, n, 1, \"\")\n  return combinations\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local combinations = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(combinations, t)\n        else\n            for j = i, #l do\n                helper(l, n - 1, j, t .. l[j])\n            end\n        end\n    end\n    helper(l, n, 1, \"\")\n    return combinations\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "  local t = {}\n  local function f(t, l, n)\n    if n == 0 then\n      table.insert(t, {})\n      return\n    end\n    for i = 1, #l do\n      f(t, l, n - 1)\n      local c = table.remove(t)\n      table.insert(c, l[i])\n      table.insert(t, c)\n    end\n  end\n  f(t, l, n)\n  return t\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local result = {}\n    local function helper(l, n, start, curr)\n        if n == 0 then\n            table.insert(result, curr)\n            return\n        end\n        for i = start, #l do\n            helper(l, n - 1, i, {l[i], unpack(curr)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = table.copy(t[j])\n                tt[#tt][i] = l[k]\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "  local res = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(res, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, table.join(t, l[j]))\n    end\n  end\n  helper(l, n, 1, {})\n  return res\nend",
    "    local res = {}\n    for i = 1, #l do\n        local first = l[i]\n        if n == 1 then\n            res[#res + 1] = {first}\n        else\n            local rest = combinations_colors(l, n - 1)\n            for j = 1, #rest do\n                res[#res + 1] = {first, unpack(rest[j])}\n            end\n        end\n    end\n    return res\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local combinations = {}\n    local function combinations_rec(l, n, i, t, j)\n        if n == 0 then\n            combinations[#combinations + 1] = t\n        else\n            for i = i, #l do\n                t[j] = l[i]\n                combinations_rec(l, n - 1, i, t, j + 1)\n            end\n        end\n    end\n    combinations_rec(l, n, 1, {}, 1)\n    return combinations\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if i == n then\n            res[#res+1] = t\n        else\n            for j = 1, #l do\n                helper(l, n, i+1, t .. l[j])\n            end\n        end\n    end\n    helper(l, n, 1, \"\")\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, {l[j], unpack(t)})\n    end\n  end\n  helper(l, n, 1, {})\n  return result\nend",
    "\tlocal r = {}\n\tlocal function f(t, i)\n\t\tif i == n then\n\t\t\ttable.insert(r, t)\n\t\telse\n\t\t\tfor j = 1, #l do\n\t\t\t\tf(t .. l[j], i + 1)\n\t\t\tend\n\t\tend\n\tend\n\tf(\"\", 1)\n\treturn r\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, t, i)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, t, j)\n\t\t\ttable.insert(t[#t], l[j])\n\t\tend\n\tend\n\thelper(l, n, t, 1)\n\treturn t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, t .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "    local combinations = {}\n    local function helper(l, n, start, current)\n        if #current == n then\n            table.insert(combinations, current)\n            return\n        end\n        for i = start, #l do\n            helper(l, n, i, {unpack(current), l[i]})\n        end\n    end\n    helper(l, n, 1, {})\n    return combinations\nend",
    "    local res = {}\n    local function helper(l, n, i, tmp)\n        if n == 0 then\n            table.insert(res, tmp)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(tmp)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "  local result = {}\n  local function helper(l, n, i, t)\n    if n == 0 then\n      table.insert(result, t)\n      return\n    end\n    for j = i, #l do\n      helper(l, n - 1, j, t .. l[j])\n    end\n  end\n  helper(l, n, 1, \"\")\n  return result\nend",
    "    local result = {}\n    local function combinations(l, n, start)\n        if n == 0 then\n            table.insert(result, {})\n            return\n        end\n        for i = start, #l do\n            local new_result = {}\n            for _, v in ipairs(combinations(l, n - 1, i)) do\n                table.insert(new_result, l[i])\n                for _, v2 in ipairs(v) do\n                    table.insert(new_result, v2)\n                end\n                table.insert(result, new_result)\n                new_result = {}\n            end\n        end\n    end\n    combinations(l, n, 1)\n    return result\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    if n == 0 then return {{}} end\n    local res = {}\n    for i = 1, #l do\n        local t = combinations_colors(l, n - 1)\n        for j = 1, #t do\n            table.insert(t[j], l[i])\n            table.insert(res, t[j])\n        end\n    end\n    return res\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {table.unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local t = {}\n    for i = 1, #l do\n        if n == 1 then\n            t[#t + 1] = {l[i]}\n        else\n            local c = combinations_colors(l, n - 1)\n            for j = 1, #c do\n                t[#t + 1] = {l[i]}\n                for k = 1, #c[j] do\n                    t[#t][#t[#t] + 1] = c[j][k]\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    if n == 0 then\n        return {{}}\n    end\n    local res = {}\n    for i = 1, #l do\n        local l2 = combinations_colors(l, n - 1)\n        for j = 1, #l2 do\n            table.insert(l2[j], l[i])\n            table.insert(res, l2[j])\n        end\n    end\n    return res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n-1, j, t..l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, \"\")\n\treturn result\nend",
    "  local res = {}\n  for i = 1, #l do\n    if n == 1 then\n      res[#res + 1] = {l[i]}\n    else\n      for _, v in ipairs(combinations_colors(l, n - 1)) do\n        if v[1] ~= l[i] then\n          res[#res + 1] = {l[i]}\n          for j = 1, #v do\n            res[#res][#res[#res] + 1] = v[j]\n          end\n        end\n      end\n    end\n  end\n  return res\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\thelper(l, n - 1, j, t)\n\t\t\t\ttable.insert(t[#t], l[j])\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t .. l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, \"\")\n\treturn result\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n-1, j, {l[j], unpack(t)})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local ret = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(ret, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return ret\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local combinations = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(combinations, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return combinations\nend",
    "    local t = {}\n    for i = 1, #l do\n        t[i] = {l[i]}\n    end\n    for i = 2, n do\n        local tt = {}\n        for j = 1, #t do\n            for k = 1, #l do\n                tt[#tt + 1] = table.copy(t[j])\n                tt[#tt][i] = l[k]\n            end\n        end\n        t = tt\n    end\n    return t\nend",
    "    local t = {}\n    for i = 1, #l do\n        if n == 1 then\n            t[#t + 1] = {l[i]}\n        else\n            for _, v in ipairs(combinations_colors(l, n - 1)) do\n                if v[1] ~= l[i] then\n                    t[#t + 1] = {l[i], unpack(v)}\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local result = {}\n    local function helper(l, n, i, temp)\n        if i == n then\n            table.insert(result, temp)\n            return\n        end\n        for j = 1, #l do\n            helper(l, n, i + 1, temp .. l[j])\n        end\n    end\n    helper(l, n, 1, \"\")\n    return result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, t)\n\t\t\ttable.insert(t[#t], l[j])\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\ttable.insert(t[#t], l[j])\n\t\t\thelper(l, n - 1, j, t)\n\t\t\ttable.remove(t[#t])\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "\tlocal t = {}\n\tlocal function f(l, n, i)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {})\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\tf(l, n - 1, j)\n\t\t\ttable.insert(t[#t], l[j])\n\t\tend\n\tend\n\tf(l, n, 1)\n\treturn t\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal result = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(result, t)\n\t\t\treturn\n\t\tend\n\t\tfor j = i, #l do\n\t\t\thelper(l, n - 1, j, {unpack(t), l[j]})\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn result\nend",
    "\tlocal t = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(t, {unpack(l)})\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\t\thelper(l, n - 1, j, t)\n\t\t\t\tl[n], l[j] = l[j], l[n]\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, t)\n\treturn t\nend",
    "    if n == 0 then\n        return {{}}\n    else\n        local res = {}\n        for i = 1, #l do\n            local sub = combinations_colors(l, n - 1)\n            for j = 1, #sub do\n                table.insert(sub[j], l[i])\n                table.insert(res, sub[j])\n            end\n        end\n        return res\n    end\nend",
    "    local combinations = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            combinations[#combinations + 1] = t\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {unpack(t), l[j]})\n        end\n    end\n    helper(l, n, 1, {})\n    return combinations\nend",
    "    local result = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(result, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return result\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend",
    "\tlocal res = {}\n\tlocal function helper(l, n, i, t)\n\t\tif n == 0 then\n\t\t\ttable.insert(res, t)\n\t\telse\n\t\t\tfor j = i, #l do\n\t\t\t\thelper(l, n - 1, j, table.join(t, l[j]))\n\t\t\tend\n\t\tend\n\tend\n\thelper(l, n, 1, {})\n\treturn res\nend",
    "    local res = {}\n    local function helper(l, n, i, t)\n        if n == 0 then\n            table.insert(res, t)\n            return\n        end\n        for j = i, #l do\n            helper(l, n - 1, j, {l[j], unpack(t)})\n        end\n    end\n    helper(l, n, 1, {})\n    return res\nend"
  ]
}