{
  "name": "mbpp_88_freq_count",
  "language": "lua",
  "prompt": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in pairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal counts = {}\n\tfor _,v in ipairs(list1) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        if count[v] == nil then\n            count[v] = 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    freq_table[v] = (freq_table[v] or 0) + 1\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor i, v in ipairs(list1) do\n\t\tif freq[v] == nil then\n\t\t\tfreq[v] = 1\n\t\telse\n\t\t\tfreq[v] = freq[v] + 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] then\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\telse\n\t\t\tfreq_table[v] = 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for i = 1, #list1 do\n        count[list1[i]] = (count[list1[i]] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal counts = {}\n\tfor _, v in ipairs(list1) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        if count[v] == nil then\n            count[v] = 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor i = 1, #list1 do\n\t\tif count[list1[i]] == nil then\n\t\t\tcount[list1[i]] = 1\n\t\telse\n\t\t\tcount[list1[i]] = count[list1[i]] + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    if freq_table[v] == nil then\n      freq_table[v] = 1\n    else\n      freq_table[v] = freq_table[v] + 1\n    end\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tcount[v] = (count[v] or 0) + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _,v in ipairs(list1) do\n\t\tif freq_table[v] then\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\telse\n\t\t\tfreq_table[v] = 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq_table[v] = (freq_table[v] or 0) + 1\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for i = 1, #list1 do\n        count[list1[i]] = (count[list1[i]] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    if freq[v] == nil then\n      freq[v] = 1\n    else\n      freq[v] = freq[v] + 1\n    end\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif count_table[v] == nil then\n\t\t\tcount_table[v] = 1\n\t\telse\n\t\t\tcount_table[v] = count_table[v] + 1\n\t\tend\n\tend\n\treturn count_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local counts = {}\n  for _, v in ipairs(list1) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif count[v] then\n\t\t\tcount[v] = count[v] + 1\n\t\telse\n\t\t\tcount[v] = 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] then\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\telse\n\t\t\tfreq_table[v] = 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq_table = {}\n    for _, v in ipairs(list1) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    if freq_table[v] == nil then\n      freq_table[v] = 1\n    else\n      freq_table[v] = freq_table[v] + 1\n    end\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor i = 1, #list1 do\n\t\tlocal element = list1[i]\n\t\tif freq[element] == nil then\n\t\t\tfreq[element] = 1\n\t\telse\n\t\t\tfreq[element] = freq[element] + 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor i = 1, #list1 do\n\t\tlocal item = list1[i]\n\t\tif freq[item] == nil then\n\t\t\tfreq[item] = 1\n\t\telse\n\t\t\tfreq[item] = freq[item] + 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    if freq[v] then\n      freq[v] = freq[v] + 1\n    else\n      freq[v] = 1\n    end\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local count = {}\n  for _, v in ipairs(list1) do\n    count[v] = (count[v] or 0) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq_table[v] = (freq_table[v] or 0) + 1\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _,v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _,v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in pairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local counts = {}\n  for _,v in ipairs(list1) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    freq_table[v] = (freq_table[v] or 0) + 1\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    if freq_table[v] then\n      freq_table[v] = freq_table[v] + 1\n    else\n      freq_table[v] = 1\n    end\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        if count[v] then\n            count[v] = count[v] + 1\n        else\n            count[v] = 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tcount[v] = (count[v] or 0) + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tcount[v] = (count[v] or 0) + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        if count[v] then\n            count[v] = count[v] + 1\n        else\n            count[v] = 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for i = 1, #list1 do\n        count[list1[i]] = (count[list1[i]] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in pairs(list1) do\n        if freq[v] then\n            freq[v] = freq[v] + 1\n        else\n            freq[v] = 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal counts = {}\n\tfor _, v in ipairs(list1) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal counts = {}\n\tfor _, v in ipairs(list1) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _,v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        if freq[v] == nil then\n            freq[v] = 1\n        else\n            freq[v] = freq[v] + 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal count = {}\n\tfor _, v in ipairs(list1) do\n\t\tif count[v] then\n\t\t\tcount[v] = count[v] + 1\n\t\telse\n\t\t\tcount[v] = 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _,v in pairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq_table = {}\n    for _, v in pairs(list1) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for _, v in ipairs(list1) do\n    if freq_table[v] == nil then\n      freq_table[v] = 1\n    else\n      freq_table[v] = freq_table[v] + 1\n    end\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in pairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local count = {}\n  for i, v in ipairs(list1) do\n    if count[v] == nil then\n      count[v] = 1\n    else\n      count[v] = count[v] + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for _, v in ipairs(list1) do\n        count[v] = (count[v] or 0) + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq_table = {}\n    for _, v in ipairs(list1) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor i,v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor i = 1, #list1 do\n\t\tlocal element = list1[i]\n\t\tif freq_table[element] == nil then\n\t\t\tfreq_table[element] = 1\n\t\telse\n\t\t\tfreq_table[element] = freq_table[element] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq_table[v] = (freq_table[v] or 0) + 1\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq_table = {}\n  for i,v in ipairs(list1) do\n    if freq_table[v] == nil then\n      freq_table[v] = 1\n    else\n      freq_table[v] = freq_table[v] + 1\n    end\n  end\n  return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local count = {}\n  for _, v in ipairs(list1) do\n    count[v] = (count[v] or 0) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local count = {}\n  for i, v in ipairs(list1) do\n    count[v] = (count[v] or 0) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in pairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _,v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for i, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] == nil then\n\t\t\tfreq[v] = 1\n\t\telse\n\t\t\tfreq[v] = freq[v] + 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] then\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\telse\n\t\t\tfreq_table[v] = 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in pairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq_table = {}\n    for _, v in ipairs(list1) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq_table = {}\n    for _, v in ipairs(list1) do\n        if freq_table[v] == nil then\n            freq_table[v] = 1\n        else\n            freq_table[v] = freq_table[v] + 1\n        end\n    end\n    return freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local count = {}\n    for i, v in ipairs(list1) do\n        if count[v] == nil then\n            count[v] = 1\n        else\n            count[v] = count[v] + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in ipairs(list1) do\n        if freq[v] then\n            freq[v] = freq[v] + 1\n        else\n            freq[v] = 1\n        end\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] == nil then\n\t\t\tfreq[v] = 1\n\t\telse\n\t\t\tfreq[v] = freq[v] + 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal counts = {}\n\tfor _,v in ipairs(list1) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local counts = {}\n  for _, v in ipairs(list1) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local freq = {}\n  for _, v in ipairs(list1) do\n    freq[v] = (freq[v] or 0) + 1\n  end\n  return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq_table = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq_table[v] == nil then\n\t\t\tfreq_table[v] = 1\n\t\telse\n\t\t\tfreq_table[v] = freq_table[v] + 1\n\t\tend\n\tend\n\treturn freq_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tfreq[v] = (freq[v] or 0) + 1\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local freq = {}\n    for _, v in pairs(list1) do\n        freq[v] = (freq[v] or 0) + 1\n    end\n    return freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n\tlocal freq = {}\n\tfor _, v in ipairs(list1) do\n\t\tif freq[v] then\n\t\t\tfreq[v] = freq[v] + 1\n\t\telse\n\t\t\tfreq[v] = 1\n\t\tend\n\tend\n\treturn freq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n  local counts = {}\n  for _,v in ipairs(list1) do\n    counts[v] = (counts[v] or 0) + 1\n  end\n  return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666124267,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to get the frequency of all the elements in a table, returned as a table.\nlocal function freq_count(list1)\n    local counts = {}\n    for _, v in ipairs(list1) do\n        counts[v] = (counts[v] or 0) + 1\n    end\n    return counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = freq_count\n    lu.assertEquals(candidate({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30}), {[10] = 4, [20] = 4, [40] = 2, [50] = 2, [30] = 1})\n    lu.assertEquals(candidate({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4}), {[1] = 3, [2] = 2, [3] = 3, [4] = 3})\n    lu.assertEquals(candidate({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5}), {[10] = 1, [5] = 3, [6] = 2, [7] = 2, [4] = 2, [9] = 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027674,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}