{
  "name": "mbpp_392_get_max_sum",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n <= 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe9y2xhl9.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\n    local a, b, c, d = get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)\n    return math.max(a + b + c + d, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1n1jodu.lua:13: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmpx1n1jodu.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 12 then\n    return n\n  end\n  local max_sum = 0\n  local max_sum_1 = get_max_sum(math.floor(n / 2))\n  local max_sum_2 = get_max_sum(math.floor(n / 3))\n  local max_sum_3 = get_max_sum(math.floor(n / 4))\n  local max_sum_4 = get_max_sum(math.floor(n / 5))\n  local max_sum_5 = get_max_sum(math.floor(n / 6))\n  max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5\n  if max_sum < n then\n    max_sum = n\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0p5ed7nd.lua:22: expected: 106, actual: 123\nstack traceback:\n\t/tmp/tmp0p5ed7nd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local memo = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if memo[n] then return memo[n] end\n    local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    memo[n] = max\n    return max\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum2 = get_max_sum(math.floor(n / 2))\n    local sum3 = get_max_sum(math.floor(n / 3))\n    local sum4 = get_max_sum(math.floor(n / 4))\n    local sum5 = get_max_sum(math.floor(n / 5))\n    if sum2 + sum3 + sum4 + sum5 > sum then\n        sum = sum2 + sum3 + sum4 + sum5\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max = n\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0l1a_32.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpo0l1a_32.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    if n >= 2 then\n        sum = sum + get_max_sum(n/2)\n    end\n    if n >= 3 then\n        sum = sum + get_max_sum(n/3)\n    end\n    if n >= 4 then\n        sum = sum + get_max_sum(n/4)\n    end\n    if n >= 5 then\n        sum = sum + get_max_sum(n/5)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleq8zcfn.lua:25: expected: 106, actual: 431.58333333333\nstack traceback:\n\t/tmp/tmpleq8zcfn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrerlv9b.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmptrerlv9b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tfor i = 2, 5 do\n\t\tlocal sum = get_max_sum(n / i)\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function _get_max_sum(n)\n        if n < 12 then\n            return n\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(_get_max_sum(n/2) + _get_max_sum(n/3) + _get_max_sum(n/4) + _get_max_sum(n/5), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return _get_max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqjb7l9b.lua:21: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmpoqjb7l9b.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum2 = get_max_sum(math.floor(n / 2))\n    local sum3 = get_max_sum(math.floor(n / 3))\n    local sum4 = get_max_sum(math.floor(n / 4))\n    local sum5 = get_max_sum(math.floor(n / 5))\n    if sum2 + sum3 + sum4 + sum5 > n then\n        sum = sum2 + sum3 + sum4 + sum5\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n < 0 then\n      return -math.huge\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n == 0 then return 0 end\n        if cache[n] then return cache[n] end\n        local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = sum\n        return sum\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    local res = get_max_sum(math.floor(n / i))\n    if res > sum then\n      sum = res\n    end\n  end\n  max_sum = math.max(max_sum, sum)\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmks1tlx7.lua:21: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpmks1tlx7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max = n\n        for i = 2, 5 do\n            local sum = max_sum(n / i)\n            if sum > max then\n                max = sum\n            end\n        end\n        memo[n] = max\n        return max\n    end\n    return max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local res = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = res\n    return res\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    if n >= 2 then\n        sum = sum + get_max_sum(n/2)\n    end\n    if n >= 3 then\n        sum = sum + get_max_sum(n/3)\n    end\n    if n >= 4 then\n        sum = sum + get_max_sum(n/4)\n    end\n    if n >= 5 then\n        sum = sum + get_max_sum(n/5)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleq8zcfn.lua:25: expected: 106, actual: 431.58333333333\nstack traceback:\n\t/tmp/tmpleq8zcfn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n <= 0 then\n    return 0\n  end\n  local sum = 0\n  local sum1 = get_max_sum(math.floor(n/2))\n  local sum2 = get_max_sum(math.floor(n/3))\n  local sum3 = get_max_sum(math.floor(n/4))\n  local sum4 = get_max_sum(math.floor(n/5))\n  sum = sum1 + sum2 + sum3 + sum4\n  if sum < n then\n    sum = n\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(math.floor(n / i))\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f2iw45t.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmp6f2iw45t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoqxtqobm.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    if n <= 5 then\n        return n\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(n / i)\n    end\n    return math.max(sum, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4c8qksh.lua:19: expected: 106, actual: 120.39722222222\nstack traceback:\n\t/tmp/tmpt4c8qksh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n        cache[n] = sum\n        return sum\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n        memo[n] = sum\n        return sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tlocal cache = {}\n\tlocal function get_max_sum_rec(n)\n\t\tif n == 0 then\n\t\t\treturn 0\n\t\tend\n\t\tif cache[n] then\n\t\t\treturn cache[n]\n\t\tend\n\t\tlocal sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n\t\tcache[n] = sum\n\t\treturn sum\n\tend\n\treturn get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i=2,5 do\n        sum = get_max_sum(math.floor(n/i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7z9hc3b.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpk7z9hc3b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 12 then\n    return n\n  end\n  local max_sum = 0\n  local sum = 0\n  for i = 1, 5 do\n    sum = get_max_sum(math.floor(n / (i + 1)))\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum + n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qlr03rp.lua:20: expected: 106, actual: 112\nstack traceback:\n\t/tmp/tmp2qlr03rp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n / 2)\n    local sum2 = get_max_sum(n / 3)\n    local sum3 = get_max_sum(n / 4)\n    local sum4 = get_max_sum(n / 5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    sum = sum + sum1 + sum2 + sum3 + sum4\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(\n            get_max_sum_rec(math.floor(n / 2)) +\n                get_max_sum_rec(math.floor(n / 3)) +\n                get_max_sum_rec(math.floor(n / 4)) +\n                get_max_sum_rec(math.floor(n / 5)),\n            n\n        )\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        cache[n] = max\n        return max\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_helper(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_helper(math.floor(n / 2)) + get_max_sum_helper(math.floor(n / 3)) + get_max_sum_helper(math.floor(n / 4)) + get_max_sum_helper(math.floor(n / 5)))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local max = math.max(a+b+c+d, n)\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(math.floor(n/i))\n\t\tif sum > max then\n\t\t\tmax = sum\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t1ba8vv.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmp5t1ba8vv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then return 0 end\n  local max_sum = n\n  local max_sum_1 = get_max_sum(math.floor(n / 2))\n  local max_sum_2 = get_max_sum(math.floor(n / 3))\n  local max_sum_3 = get_max_sum(math.floor(n / 4))\n  local max_sum_4 = get_max_sum(math.floor(n / 5))\n  if max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4 > max_sum then\n    max_sum = max_sum_1 + max_sum_2 + max_sum_3 + max_sum_4\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyvksnecy.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local function max(a, b)\n    if a > b then\n      return a\n    else\n      return b\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsu396i85.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if not memo[n] then\n            memo[n] = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        end\n        return memo[n]\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local max = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    elseif n == 0 then\n        return 1\n    else\n        return math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then\n      return 0\n    elseif cache[n] then\n      return cache[n]\n    else\n      local sum = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n      cache[n] = sum\n      return sum\n    end\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n        cache[n] = max\n        return max\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 12 then\n    return n\n  end\n  local sum = get_max_sum(math.floor(n / 2)) + get_max_sum(math.floor(n / 3)) + get_max_sum(math.floor(n / 4)) + get_max_sum(math.floor(n / 5))\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vgwe6jo.lua:17: expected: 106, actual: 99\nstack traceback:\n\t/tmp/tmp7vgwe6jo.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal a = get_max_sum(math.floor(n/2))\n\tlocal b = get_max_sum(math.floor(n/3))\n\tlocal c = get_max_sum(math.floor(n/4))\n\tlocal d = get_max_sum(math.floor(n/5))\n\tlocal e = a + b + c + d\n\tif e > n then\n\t\treturn e\n\telse\n\t\treturn n\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local e = a + b + c + d\n    return math.max(e, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local max_sum = {}\n  max_sum[1] = 1\n  for i = 2, n do\n    local sum = max_sum[i/2] + max_sum[i/3] + max_sum[i/4] + max_sum[i/5]\n    if sum > i then\n      max_sum[i] = sum\n    else\n      max_sum[i] = i\n    end\n  end\n  return max_sum[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp634bad2g.lua:6: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp634bad2g.lua:6: in local 'candidate'\n\t/tmp/tmp634bad2g.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local sum = 0\n  local max_sum = 0\n  if n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n    sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    max_sum = math.max(sum, n)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local max_sum = n\n  local max_sum_table = {}\n  max_sum_table[0] = 0\n  max_sum_table[1] = 1\n  for i=2,n do\n    local sum = 0\n    for j=2,5 do\n      if i%j == 0 then\n        sum = sum + max_sum_table[i/j]\n      end\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_table[i] = max_sum\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtc68usr.lua:25: expected: 106, actual: 1207\nstack traceback:\n\t/tmp/tmphtc68usr.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if n == 2 then\n            return 2\n        end\n        if n == 3 then\n            return 3\n        end\n        if n == 4 then\n            return 4\n        end\n        if n == 5 then\n            return 5\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n <= 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tlocal cache = {}\n\tlocal function get_max_sum_rec(n)\n\t\tif n < 0 then return 0 end\n\t\tif n == 0 then return 0 end\n\t\tif cache[n] then return cache[n] end\n\t\tlocal max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n\t\tcache[n] = max_sum\n\t\treturn max_sum\n\tend\n\treturn get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max = n\n    for i = 2, 5 do\n      local sum = get_max_sum_rec(math.floor(n/i))\n      if sum > max then\n        max = sum\n      end\n    end\n    cache[n] = max\n    return max\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspeup7pk.lua:27: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpspeup7pk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_helper(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    if n >= 2 then\n        sum = get_max_sum(math.floor(n/2))\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    if n >= 3 then\n        sum = get_max_sum(math.floor(n/3))\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    if n >= 4 then\n        sum = get_max_sum(math.floor(n/4))\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    if n >= 5 then\n        sum = get_max_sum(math.floor(n/5))\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqt62kvi.lua:38: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpdqt62kvi.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    if n % 2 == 0 then\n        sum = get_max_sum(n / 2)\n    end\n    if n % 3 == 0 then\n        sum = sum + get_max_sum(n / 3)\n    end\n    if n % 4 == 0 then\n        sum = sum + get_max_sum(n / 4)\n    end\n    if n % 5 == 0 then\n        sum = sum + get_max_sum(n / 5)\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuipdpha.lua:29: expected: 106, actual: 79.0\nstack traceback:\n\t/tmp/tmpeuipdpha.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n    if sum < n then\n      sum = n\n    end\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_recursive(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_recursive(n / 2) + get_max_sum_recursive(n / 3) + get_max_sum_recursive(n / 4) + get_max_sum_recursive(n / 5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_recursive(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if cache[n] then return cache[n] end\n    local result = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n    cache[n] = result\n    return result\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n <= 0 then\n\t\treturn 0\n\tend\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = sum + get_max_sum(n / i)\n\tend\n\treturn math.max(sum, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local function get_max_sum_rec(n, cache)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2), cache) + get_max_sum_rec(math.floor(n/3), cache) + get_max_sum_rec(math.floor(n/4), cache) + get_max_sum_rec(math.floor(n/5), cache), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function _get_max_sum(n)\n    if n <= 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(n, _get_max_sum(n/2) + _get_max_sum(n/3) + _get_max_sum(n/4) + _get_max_sum(n/5))\n    cache[n] = sum\n    return sum\n  end\n  return _get_max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 12 then\n    return n\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum > n then\n    return sum\n  else\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmwg7_mm.lua:17: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmpfmwg7_mm.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 12 then\n    return n\n  end\n  local max_sum = 0\n  local max_sum_table = {}\n  for i = 1, n do\n    max_sum_table[i] = 0\n  end\n  for i = 1, n do\n    if i < 12 then\n      max_sum_table[i] = i\n    else\n      max_sum_table[i] = math.max(max_sum_table[math.floor(i/2)] + max_sum_table[math.floor(i/3)] + max_sum_table[math.floor(i/4)] + max_sum_table[math.floor(i/5)], i)\n    end\n  end\n  return max_sum_table[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxstzi3_s.lua:24: expected: 106, actual: 99\nstack traceback:\n\t/tmp/tmpxstzi3_s.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_internal(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_internal(math.floor(n/2)) + get_max_sum_internal(math.floor(n/3)) + get_max_sum_internal(math.floor(n/4)) + get_max_sum_internal(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_internal(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\n    local max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if max_sum > n then\n        return max_sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplztzn0of.lua:17: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmplztzn0of.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local max_sum = math.max(a+b+c+d, n)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal sum = n\n\tlocal max = n\n\tfor i = 2, 5 do\n\t\tlocal temp = get_max_sum(n / i)\n\t\tsum = sum + temp\n\t\tif temp > max then\n\t\t\tmax = temp\n\t\tend\n\tend\n\tif sum > max then\n\t\treturn sum\n\telse\n\t\treturn max\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local sum = math.max(n, max_sum(n / 2) + max_sum(n / 3) + max_sum(n / 4) + max_sum(n / 5))\n        memo[n] = sum\n        return sum\n    end\n    return max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n < 0 then\n            return 0\n        end\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n        cache[n] = max\n        return max\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local memo = {}\n  local function f(n)\n    if n < 0 then return 0 end\n    if n == 0 then return 0 end\n    if memo[n] then return memo[n] end\n    local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    memo[n] = sum\n    return sum\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(\n      get_max_sum_rec(math.floor(n / 2)) +\n      get_max_sum_rec(math.floor(n / 3)) +\n      get_max_sum_rec(math.floor(n / 4)) +\n      get_max_sum_rec(math.floor(n / 5)),\n      n\n    )\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n        if sum > n then\n            cache[n] = sum\n            return sum\n        else\n            cache[n] = n\n            return n\n        end\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n <= 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(n / i)\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\n    local max = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(n / i)\n        if sum > max then\n            max = sum\n        end\n    end\n    return max + n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnii3vmv.lua:20: expected: 106, actual: 120\nstack traceback:\n\t/tmp/tmpsnii3vmv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(n / i)\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    if n % 2 == 0 then\n        sum = sum + get_max_sum(n / 2)\n    end\n    if n % 3 == 0 then\n        sum = sum + get_max_sum(n / 3)\n    end\n    if n % 4 == 0 then\n        sum = sum + get_max_sum(n / 4)\n    end\n    if n % 5 == 0 then\n        sum = sum + get_max_sum(n / 5)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb91u_1o.lua:25: expected: 106, actual: 262.0\nstack traceback:\n\t/tmp/tmphb91u_1o.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(n, get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)))\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n < 0 then\n\t\treturn 0\n\tend\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tif n == 1 then\n\t\treturn 1\n\tend\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = sum + get_max_sum(n / i)\n\tend\n\tif sum > n then\n\t\treturn sum\n\telse\n\t\treturn n\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoqxtqobm.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyvksnecy.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if cache[n] then return cache[n] end\n    local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = max\n    return max\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        local n_i = math.floor(n / i)\n        sum = get_max_sum(n_i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoaz_icd.lua:21: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmppoaz_icd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local memo = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n < 0 then\n      return -math.huge\n    end\n    if memo[n] then\n      return memo[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    memo[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123050,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(n, get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)))\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    if sum1 + sum2 + sum3 + sum4 > n then\n        sum = sum1 + sum2 + sum3 + sum4\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local a = get_max_sum(math.floor(n/2))\n  local b = get_max_sum(math.floor(n/3))\n  local c = get_max_sum(math.floor(n/4))\n  local d = get_max_sum(math.floor(n/5))\n  local e = a + b + c + d\n  if e > n then\n    return e\n  else\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1kgarnv.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpc1kgarnv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n == 0 then return 0 end\n    if n < 0 then return -math.huge end\n    if cache[n] then return cache[n] end\n    local max = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = max\n    return max\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyvksnecy.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then return 0 end\n  return math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjs7wzjk3.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if n == 1 then\n      return 1\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local sum = n\n  local max_sum = n\n  for i = 2, 5 do\n    local temp = get_max_sum(math.floor(n / i))\n    if temp > max_sum then\n      max_sum = temp\n    end\n    sum = sum + temp\n  end\n  return math.max(sum, max_sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca3je801.lua:21: expected: 106, actual: 394\nstack traceback:\n\t/tmp/tmpca3je801.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local e = a + b + c + d\n    if e > n then\n        return e\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n <= 0 then\n\t\treturn 0\n\tend\n\tif n <= 5 then\n\t\treturn n\n\tend\n\tlocal max_sum = 0\n\tfor i = 2, 5 do\n\t\tmax_sum = math.max(max_sum, get_max_sum(n / i))\n\tend\n\treturn max_sum + n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdu93wiow.lua:19: expected: 106, actual: 116.25\nstack traceback:\n\t/tmp/tmpdu93wiow.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 1, 5 do\n    sum = get_max_sum(n/i)\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlz1pjca.lua:12: stack overflow\nstack traceback:\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t/tmp/tmpzlz1pjca.lua:12: in upvalue 'get_max_sum'\n\t...\t(skipping 124980 levels)\n\t/tmp/tmpzlz1pjca.lua:12: in local 'candidate'\n\t/tmp/tmpzlz1pjca.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.090 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function max_sum(n)\n    if n <= 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local max = math.max(max_sum(n/2) + max_sum(n/3) + max_sum(n/4) + max_sum(n/5), n)\n    cache[n] = max\n    return max\n  end\n  return max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(n, get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)))\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local memo = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then return 0 end\n    if n == 0 then return 0 end\n    if memo[n] then return memo[n] end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    memo[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n  if sum < n then\n    return n\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 2 then\n        return n\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoqxtqobm.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum_n = math.max(n, max_sum(math.floor(n / 2)) + max_sum(math.floor(n / 3)) + max_sum(math.floor(n / 4)) + max_sum(math.floor(n / 5)))\n        memo[n] = max_sum_n\n        return max_sum_n\n    end\n    return max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then return 0 end\n    if n == 0 then return 0 end\n    if cache[n] then return cache[n] end\n    local sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        local div = math.floor(n / i)\n        sum = get_max_sum(div)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_7693oo.lua:21: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpu_7693oo.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\n    local max_sum = 0\n    for i = 2, 5 do\n        local sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    if max_sum < n then\n        max_sum = n\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hygh7rt.lua:22: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmp9hygh7rt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max then\n            max = sum\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzlla76h.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpuzlla76h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local max_sum = n\n    for i = 2, 5 do\n        local sum = get_max_sum(n / i)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(n, get_max_sum_helper(n/2) + get_max_sum_helper(n/3) + get_max_sum_helper(n/4) + get_max_sum_helper(n/5))\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function get_max_sum_helper(n)\n        if n == 0 then\n            return 0\n        end\n        if memo[n] then\n            return memo[n]\n        end\n        local max_sum = math.max(get_max_sum_helper(math.floor(n/2)) + get_max_sum_helper(math.floor(n/3)) + get_max_sum_helper(math.floor(n/4)) + get_max_sum_helper(math.floor(n/5)), n)\n        memo[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_helper(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        local div = math.floor(n / i)\n        sum = get_max_sum(div)\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_7693oo.lua:21: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmpu_7693oo.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjs7wzjk3.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local e = a + b + c + d\n    if e > n then\n        return e\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\n    local a = get_max_sum(math.floor(n / 2))\n    local b = get_max_sum(math.floor(n / 3))\n    local c = get_max_sum(math.floor(n / 4))\n    local d = get_max_sum(math.floor(n / 5))\n    local e = a + b + c + d\n    if e > n then\n        return e\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1fxuh47.lua:21: expected: 106, actual: 99\nstack traceback:\n\t/tmp/tmpa1fxuh47.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(n, get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5))\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027830,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(math.floor(n / i))\n    end\n    return math.max(sum, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(math.floor(n/2)) + get_max_sum(math.floor(n/3)) + get_max_sum(math.floor(n/4)) + get_max_sum(math.floor(n/5))\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123021,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd1ehq9dc.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    elseif n == 0 then\n        return 1\n    else\n        return math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if cache[n] then return cache[n] end\n    local max_sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  return math.max(n, get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local max_sum = n\n    local max_sum_list = {n}\n    for i = 2, n do\n        if i % 2 == 0 then\n            sum = sum + get_max_sum(i / 2)\n            table.insert(max_sum_list, get_max_sum(i / 2))\n        end\n        if i % 3 == 0 then\n            sum = sum + get_max_sum(i / 3)\n            table.insert(max_sum_list, get_max_sum(i / 3))\n        end\n        if i % 4 == 0 then\n            sum = sum + get_max_sum(i / 4)\n            table.insert(max_sum_list, get_max_sum(i / 4))\n        end\n        if i % 5 == 0 then\n            sum = sum + get_max_sum(i / 5)\n            table.insert(max_sum_list, get_max_sum(i / 5))\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n        sum = n\n    end\n    print(max_sum_list)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "table: 0x55799c56d480\ntable: 0x55799c56d550\ntable: 0x55799c56d600\ntable: 0x55799c56d680\ntable: 0x55799c56d790\ntable: 0x55799c56d860\ntable: 0x55799c56d750\ntable: 0x55799c56d960\ntable: 0x55799c56d9e0\ntable: 0x55799c56d920\ntable: 0x55799c56dad0\ntable: 0x55799c56db50\ntable: 0x55799c599af0\ntable: 0x55799c599b70\ntable: 0x55799c599c30\ntable: 0x55799c599cb0\ntable: 0x55799c599d60\ntable: 0x55799c599de0\ntable: 0x55799c599bf0\ntable: 0x55799c599ee0\ntable: 0x55799c599f60\ntable: 0x55799c599fe0\ntable: 0x55799c59a060\ntable: 0x55799c599ea0\ntable: 0x55799c59a1b0\ntable: 0x55799c59a230\ntable: 0x55799c59a170\ntable: 0x55799c59a330\ntable: 0x55799c59a3b0\ntable: 0x55799c59a2f0\ntable: 0x55799c59a4e0\ntable: 0x55799c59a560\ntable: 0x55799c59a610\ntable: 0x55799c59a690\ntable: 0x55799c59a7a0\ntable: 0x55799c59a870\ntable: 0x55799c59a760\ntable: 0x55799c59a970\ntable: 0x55799c59a9f0\ntable: 0x55799c59a930\ntable: 0x55799c59aae0\ntable: 0x55799c59ab60\ntable: 0x55799c59a4a0\ntable: 0x55799c59acf0\ntable: 0x55799c59ad70\ntable: 0x55799c59ae20\ntable: 0x55799c59aea0\ntable: 0x55799c59af60\ntable: 0x55799c59afe0\ntable: 0x55799c59af20\ntable: 0x55799c59b0e0\ntable: 0x55799c59b160\ntable: 0x55799c59b0a0\ntable: 0x55799c59b250\ntable: 0x55799c59b2d0\ntable: 0x55799c59acb0\ntable: 0x55799c599aa0\ntable: 0x55799c59b570\ntable: 0x55799c599a60\ntable: 0x55799c59b6a0\ntable: 0x55799c59b720\ntable: 0x55799c59b660\ntable: 0x55799c59b850\ntable: 0x55799c59b8d0\ntable: 0x55799c59b980\ntable: 0x55799c59ba00\ntable: 0x55799c59b810\ntable: 0x55799c59bb00\ntable: 0x55799c59bb80\ntable: 0x55799c59bc00\ntable: 0x55799c59bc80\ntable: 0x55799c59bac0\ntable: 0x55799c59bdd0\ntable: 0x55799c59be50\ntable: 0x55799c59bed0\ntable: 0x55799c59bf50\ntable: 0x55799c59c060\ntable: 0x55799c59c0e0\ntable: 0x55799c59c020\ntable: 0x55799c59c1e0\ntable: 0x55799c59c260\ntable: 0x55799c59c1a0\ntable: 0x55799c59c350\ntable: 0x55799c59c3d0\ntable: 0x55799c59c4e0\ntable: 0x55799c59c560\ntable: 0x55799c59bd90\ntable: 0x55799c59c660\ntable: 0x55799c59c6e0\ntable: 0x55799c59c790\ntable: 0x55799c59c810\ntable: 0x55799c59c8d0\ntable: 0x55799c59c950\nta",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(n/2)\n    local sum2 = get_max_sum(n/3)\n    local sum3 = get_max_sum(n/4)\n    local sum4 = get_max_sum(n/5)\n    sum = math.max(sum, sum1 + sum2 + sum3 + sum4)\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local max_sum = {}\n    max_sum[0] = 0\n    max_sum[1] = 1\n    max_sum[2] = 2\n    max_sum[3] = 3\n    max_sum[4] = 4\n    max_sum[5] = 5\n    for i = 6, n do\n        local max = math.max(max_sum[math.floor(i/2)] + max_sum[math.floor(i/3)] + max_sum[math.floor(i/4)] + max_sum[math.floor(i/5)], i)\n        max_sum[i] = max\n    end\n    return max_sum[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local sum = math.max(n, get_max_sum_rec(n / 2) + get_max_sum_rec(n / 3) + get_max_sum_rec(n / 4) + get_max_sum_rec(n / 5))\n        cache[n] = sum\n        return sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(n / 2) + get_max_sum_rec(n / 3) + get_max_sum_rec(n / 4) + get_max_sum_rec(n / 5), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    if n <= 5 then\n        return n\n    end\n    local max_sum = 0\n    for i = 2, 5 do\n        max_sum = math.max(max_sum, get_max_sum(n / i))\n    end\n    return max_sum + n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivq3em80.lua:19: expected: 106, actual: 116.25\nstack traceback:\n\t/tmp/tmpivq3em80.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123035,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(math.floor(n/2))\n    local b = get_max_sum(math.floor(n/3))\n    local c = get_max_sum(math.floor(n/4))\n    local d = get_max_sum(math.floor(n/5))\n    local e = a + b + c + d\n    if e > n then\n        return e\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = n\n    local sum1 = get_max_sum(math.floor(n / 2))\n    local sum2 = get_max_sum(math.floor(n / 3))\n    local sum3 = get_max_sum(math.floor(n / 4))\n    local sum4 = get_max_sum(math.floor(n / 5))\n    local max_sum = sum1 + sum2 + sum3 + sum4\n    if max_sum > sum then\n        sum = max_sum\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n == 0 then\n\t\treturn 0\n\tend\n\tlocal max_sum = n\n\tlocal sum = 0\n\tfor i = 2, 5 do\n\t\tsum = get_max_sum(n / i)\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function _get_max_sum(n)\n        if n == 0 then\n            return 0\n        end\n        if n == 1 then\n            return 1\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(\n            _get_max_sum(n / 2) + _get_max_sum(n / 3) + _get_max_sum(n / 4) + _get_max_sum(n / 5),\n            n\n        )\n        cache[n] = max_sum\n        return max_sum\n    end\n    return _get_max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local a = get_max_sum(n/2)\n    local b = get_max_sum(n/3)\n    local c = get_max_sum(n/4)\n    local d = get_max_sum(n/5)\n    local e = get_max_sum(n/6)\n    local max_sum = math.max(a+b+c+d, n)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    local sum = n\n    local sum_2 = get_max_sum(n / 2)\n    local sum_3 = get_max_sum(n / 3)\n    local sum_4 = get_max_sum(n / 4)\n    local sum_5 = get_max_sum(n / 5)\n    if sum_2 + sum_3 + sum_4 + sum_5 > n then\n        sum = sum_2 + sum_3 + sum_4 + sum_5\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrerlv9b.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmptrerlv9b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 12 then\n        return n\n    end\n    local max_sum = get_max_sum(n / 2) + get_max_sum(n / 3) + get_max_sum(n / 4) + get_max_sum(n / 5)\n    if max_sum < n then\n        return n\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gisw44d.lua:16: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmp7gisw44d.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n <= 0 then return 0 end\n        if cache[n] then return cache[n] end\n        local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = sum\n        return sum\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n < 0 then\n\t\treturn 0\n\telseif n == 0 then\n\t\treturn 1\n\telseif n == 1 then\n\t\treturn 1\n\telse\n\t\treturn math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyvksnecy.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt8dcsu4y.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local sum = n\n  local n2 = math.floor(n/2)\n  local n3 = math.floor(n/3)\n  local n4 = math.floor(n/4)\n  local n5 = math.floor(n/5)\n  local sum2 = get_max_sum(n2)\n  local sum3 = get_max_sum(n3)\n  local sum4 = get_max_sum(n4)\n  local sum5 = get_max_sum(n5)\n  local max_sum = sum2 + sum3 + sum4 + sum5\n  if max_sum > sum then\n    return max_sum\n  else\n    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5)), n)\n    cache[n] = sum\n    return sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local memo = {}\n    local function f(n)\n        if n == 0 then return 0 end\n        if memo[n] then return memo[n] end\n        local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        memo[n] = sum\n        return sum\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n < 0 then\n            return 0\n        end\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local result = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        cache[n] = result\n        return result\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n == 0 then\n        return 0\n    end\n    local max_sum = n\n    local sum = 0\n    for i = 2, 5 do\n        sum = get_max_sum(math.floor(n / i))\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027815,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrerlv9b.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmptrerlv9b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function get_max_sum_rec(n)\n        if n < 0 then\n            return 0\n        end\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max_sum = math.max(n, get_max_sum_rec(n / 2) + get_max_sum_rec(n / 3) + get_max_sum_rec(n / 4) + get_max_sum_rec(n / 5))\n        cache[n] = max_sum\n        return max_sum\n    end\n    return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\n    if n == 1 then\n        return 1\n    end\n    local sum = 0\n    for i = 2, 5 do\n        sum = sum + get_max_sum(n / i)\n    end\n    if sum < n then\n        return n\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n < 0 then\n        return 0\n    end\n    if n == 0 then\n        return 1\n    end\n    local sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n    if sum > n then\n        return sum\n    else\n        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local a = get_max_sum(n/2)\n  local b = get_max_sum(n/3)\n  local c = get_max_sum(n/4)\n  local d = get_max_sum(n/5)\n  local e = n\n  return math.max(a+b+c+d, e)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    local cache = {}\n    local function f(n)\n        if n == 0 then\n            return 0\n        end\n        if cache[n] then\n            return cache[n]\n        end\n        local max = math.max(f(math.floor(n/2)) + f(math.floor(n/3)) + f(math.floor(n/4)) + f(math.floor(n/5)), n)\n        cache[n] = max\n        return max\n    end\n    return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123020,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n    if n <= 0 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjs7wzjk3.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n <= 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n    cache[n] = max_sum\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  local max_sum = math.max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n / 2)) + get_max_sum_rec(math.floor(n / 3)) + get_max_sum_rec(math.floor(n / 4)) + get_max_sum_rec(math.floor(n / 5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123036,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function f(n)\n    if n < 0 then\n      return 0\n    end\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = math.max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    cache[n] = sum\n    return sum\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local max_sum = {}\n  max_sum[0] = 0\n  max_sum[1] = 1\n  for i = 2, n do\n    local sum = max_sum[math.floor(i/2)] + max_sum[math.floor(i/3)] + max_sum[math.floor(i/4)] + max_sum[math.floor(i/5)]\n    if sum > i then\n      max_sum[i] = sum\n    else\n      max_sum[i] = i\n    end\n  end\n  return max_sum[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    local div = n / i\n    if div == math.floor(div) then\n      sum = get_max_sum(div) + get_max_sum(n - div)\n      if sum > max_sum then\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprplfrx1l.lua:23: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmprplfrx1l.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  if n == 0 then\n    return 0\n  end\n  local max_sum = n\n  local sum = 0\n  for i = 2, 5 do\n    sum = get_max_sum(math.floor(n / i))\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2s6f_ne8.lua:20: expected: 106, actual: 60\nstack traceback:\n\t/tmp/tmp2s6f_ne8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function get_max_sum_rec(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = get_max_sum_rec(math.floor(n/2)) + get_max_sum_rec(math.floor(n/3)) + get_max_sum_rec(math.floor(n/4)) + get_max_sum_rec(math.floor(n/5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local max_sum = n\n  local max_sum_cache = {}\n  local function get_max_sum_rec(n)\n    if n < 12 then\n      return n\n    end\n    local max_sum = max_sum_cache[n]\n    if not max_sum then\n      max_sum = math.max(get_max_sum_rec(n/2) + get_max_sum_rec(n/3) + get_max_sum_rec(n/4) + get_max_sum_rec(n/5), n)\n      max_sum_cache[n] = max_sum\n    end\n    return max_sum\n  end\n  return get_max_sum_rec(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_e1r7q_.lua:22: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmp6_e1r7q_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n  local cache = {}\n  local function max_sum(n)\n    if n == 0 then\n      return 0\n    end\n    if cache[n] then\n      return cache[n]\n    end\n    local sum = max_sum(math.floor(n / 2)) + max_sum(math.floor(n / 3)) + max_sum(math.floor(n / 4)) + max_sum(math.floor(n / 5))\n    if sum > n then\n      cache[n] = sum\n      return sum\n    else\n      cache[n] = n\n      return n\n    end\n  end\n  return max_sum(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nlocal function get_max_sum(n)\n\tif n < 12 then\n\t\treturn n\n\tend\n\tlocal max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)\n\tif max_sum > n then\n\t\treturn max_sum\n\tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_sum\n    lu.assertEquals(candidate(60), 106)\n    lu.assertEquals(candidate(10), 12)\n    lu.assertEquals(candidate(2), 2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123051,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm9kf87b.lua:16: expected: 106, actual: 103.06666666667\nstack traceback:\n\t/tmp/tmpqm9kf87b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}