{
  "name": "mbpp_245_max_sum",
  "language": "lua",
  "prompt": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i - 1] + max_sum_right[i + 1])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2pl4nib.lua:19: attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpd2pl4nib.lua:19: in function 'candidate'\n\t/tmp/tmpd2pl4nib.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if sum < 0 then\n            sum = arr[i]\n        else\n            sum = sum + arr[i]\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02aqnft.lua:22: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpo02aqnft.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  for i = 1, #arr do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59__015a.lua:33: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmp59__015a.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    local i = 1\n    while i <= #arr do\n        sum = sum + arr[i]\n        if sum > max_sum then\n            max_sum = sum\n        end\n        i = i + 1\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44yl97uv.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp44yl97uv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local i = 1\n  local j = 1\n  while i <= #arr do\n    while j <= #arr and arr[j] > arr[j+1] do\n      sum = sum + arr[j]\n      j = j + 1\n    end\n    sum = sum + arr[j]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    sum = 0\n    i = j + 1\n    j = i\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4enht1v.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl4enht1v.lua:8: in function 'candidate'\n\t/tmp/tmpl4enht1v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = 0\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_arr[i] then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00jr7p4t.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp00jr7p4t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tsum = sum + arr[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\t\tmax_sum_left[i] = max_sum\n\tend\n\tsum = 0\n\tfor i = #arr, 1, -1 do\n\t\tsum = sum + arr[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\t\tmax_sum_right[i] = max_sum\n\tend\n\tfor i = 1, #arr - 1 do\n\t\tif max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i + 1]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs1kq5ik.lua:33: expected: 194, actual: 559\nstack traceback:\n\t/tmp/tmpvs1kq5ik.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        sum = math.max(arr[i], sum + arr[i])\n        max_sum = math.max(max_sum, sum)\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyo23ndv.lua:16: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpoyo23ndv.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local sum = {}\n  for i = 1, len do\n    sum[i] = {}\n    for j = 1, len do\n      sum[i][j] = 0\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpglgivsbz.lua:21: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr1adxh8.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpwr1adxh8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1250vmtu.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp1250vmtu.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local n = #arr\n  local l = {}\n  local r = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3480mdxy.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsr5b_57q.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = i, #arr do\n      sum = sum + arr[j]\n      max_sum = math.max(max_sum, sum)\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1_lbd6a.lua:17: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpo1_lbd6a.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left_i = 0\n\tlocal max_sum_right_i = 0\n\tlocal max_sum_left_j = 0\n\tlocal max_sum_right_j = 0\n\tlocal sum = 0\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal n = 1\n\tlocal o = 1\n\tlocal p = 1\n\tlocal q = 1\n\tlocal r = 1\n\tlocal s = 1\n\tlocal t = 1\n\tlocal u = 1\n\tlocal v = 1\n\tlocal w = 1\n\tlocal x = 1\n\tlocal y = 1\n\tlocal z = 1\n\tlocal aa = 1\n\tlocal ab = 1\n\tlocal ac = 1\n\tlocal ad = 1\n\tlocal ae = 1\n\tlocal af = 1\n\tlocal ag = 1\n\tlocal ah = 1\n\tlocal ai = 1\n\tlocal aj = 1\n\tlocal ak = 1\n\tlocal al = 1\n\tlocal am = 1\n\tlocal an = 1\n\tlocal ao = 1\n\tlocal ap = 1\n\tlocal aq = 1\n\tlocal ar = 1\n\tlocal as = 1\n\tlocal at = 1\n\tlocal au = 1\n\tlocal av = 1\n\tlocal aw = 1\n\tlocal ax = 1\n\tlocal ay = 1\n\tlocal az = 1\n\tlocal ba = 1\n\tlocal bb = 1\n\tlocal bc = 1\n\tlocal bd = 1\n\tlocal be = 1\n\tlocal bf = 1\n\tlocal bg = 1\n\tlocal bh = 1\n\tlocal bi = 1\n\tlocal bj = 1\n\tlocal bk = 1\n\tlocal bl = 1\n\tlocal bm = 1\n\tlocal bn = 1\n\tlocal bo = 1\n\tlocal bp = 1\n\tlocal bq = 1\n\tlocal br = 1\n\tlocal bs = 1\n\tlocal bt = 1\n\tlocal bu = 1\n\tlocal bv = 1\n\tlocal bw = 1\n\tlocal bx = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9uqaxs9i.lua:88: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max = 0\n    local sum = 0\n    local max_sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpl143cq.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpkpl143cq.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n        else\n            max_sum = math.max(max_sum, sum)\n            sum = arr[i]\n        end\n    end\n    max_sum = math.max(max_sum, sum)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i4clwzp.lua:21: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmp4i4clwzp.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgee5i8tk.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpgee5i8tk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[j] + arr[i] > max_sum_arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n    if max_sum_arr[i] > max_sum then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4lsqntm.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpj4lsqntm.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_before = arr[1]\n  local max_sum_ending_here_after = arr[1]\n  local max_sum_ending_here_before_index = 1\n  local max_sum_ending_here_after_index = 1\n  local max_sum_ending_here_index = 1\n  local max_sum_ending_here_before_index_before = 1\n  local max_sum_ending_here_after_index_after = 1\n  local max_sum_ending_here_index_before = 1\n  local max_sum_ending_here_index_after = 1\n  local max_sum_ending_here_before_index_before_before = 1\n  local max_sum_ending_here_after_index_after_after = 1\n  local max_sum_ending_here_index_before_before = 1\n  local max_sum_ending_here_index_after_after = 1\n  local max_sum_ending_here_before_index_before_before_before = 1\n  local max_sum_ending_here_after_index_after_after_after = 1\n  local max_sum_ending_here_index_before_before_before = 1\n  local max_sum_ending_here_index_after_after_after = 1\n  local max_sum_ending_here_before_index_before_before_before_before = 1\n  local max_sum_ending_here_after_index_after_after_after_after = 1\n  local max_sum_ending_here_index_before_before_before_before = 1\n  local max_sum_ending_here_index_after_after_after_after = 1\n  local max_sum_ending_here_before_index_before_before_before_before_before = 1\n  local max_sum_ending_here_after_index_after_after_after_after_after = 1\n  local max_sum_ending_here_index_before_before_before_before_before = 1\n  local max_sum_ending_here\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpomkmj901.lua:39: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_reverse = arr[n]\n  local max_sum_reverse = arr[n]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt9a17qea.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_ending_here = 0\n    for i = 1, #arr do\n        max_sum_ending_here = max_sum_ending_here + arr[i]\n        if max_sum_ending_here < 0 then\n            max_sum_ending_here = 0\n        end\n        if max_sum < max_sum_ending_here then\n            max_sum = max_sum_ending_here\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburbd1tj.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpburbd1tj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35xz4r9x.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp35xz4r9x.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_end = arr[1]\n  local max_sum_start = arr[1]\n  local max_sum_start_index = 1\n  local max_sum_end_index = 1\n  for i = 2, #arr do\n    if arr[i] > max_sum_end + arr[i] then\n      max_sum_end = arr[i]\n      max_sum_end_index = i\n    else\n      max_sum_end = max_sum_end + arr[i]\n    end\n    if max_sum_end > max_sum then\n      max_sum = max_sum_end\n      max_sum_start = max_sum_end\n      max_sum_start_index = max_sum_end_index\n    end\n    if arr[i] > max_sum_start + arr[i] then\n      max_sum_start = arr[i]\n      max_sum_start_index = i\n    else\n      max_sum_start = max_sum_start + arr[i]\n    end\n    if max_sum_start > max_sum then\n      max_sum = max_sum_start\n      max_sum_end = max_sum_start\n      max_sum_end_index = max_sum_start_index\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf9ukduz.lua:38: expected: 194, actual: 567\nstack traceback:\n\t/tmp/tmpjf9ukduz.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reversed = 0\n  local max_sum_ending_here_reversed_reversed = 0\n  local max_sum_ending_here_reversed_reversed_reversed = 0\n  for i = 1, #arr do\n    max_sum_ending_here = max_sum_ending_here + arr[i]\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n    end\n    if max_sum_ending_here > max_sum then\n      max_sum = max_sum_ending_here\n    end\n  end\n  for i = #arr, 1, -1 do\n    max_sum_ending_here_reversed = max_sum_ending_here_reversed + arr[i]\n    if max_sum_ending_here_reversed < 0 then\n      max_sum_ending_here_reversed = 0\n    end\n    if max_sum_ending_here_reversed > max_sum then\n      max_sum = max_sum_ending_here_reversed\n    end\n  end\n  for i = 1, #arr - 1 do\n    max_sum_ending_here_reversed_reversed = max_sum_ending_here_reversed_reversed + arr[i]\n    if max_sum_ending_here_reversed_reversed < 0 then\n      max_sum_ending_here_reversed_reversed = 0\n    end\n    if max_sum_ending_here_reversed_reversed > max_sum then\n      max_sum = max_sum_ending_here_reversed_reversed\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_ending_here_reversed_reversed_reversed = max_sum_ending_here_reversed_reversed_reversed + arr[i]\n    if max_sum_ending_here_reversed_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6vuq3h9k.lua:38: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    elseif sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaaypcbzx.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaaypcbzx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfvfc25qw.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 1\n  local max_sum_right_i = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_n5zm3nl.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tfor i = 1, #arr do\n\t\tmax_sum_left[i] = 0\n\t\tmax_sum_right[i] = 0\n\tend\n\tfor i = 1, #arr do\n\t\tsum = 0\n\t\tfor j = 1, i do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tsum = sum + arr[j]\n\t\t\tend\n\t\tend\n\t\tmax_sum_left[i] = sum\n\tend\n\tfor i = #arr, 1, -1 do\n\t\tsum = 0\n\t\tfor j = #arr, i, -1 do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tsum = sum + arr[j]\n\t\t\tend\n\t\tend\n\t\tmax_sum_right[i] = sum\n\tend\n\tfor i = 1, #arr do\n\t\tif max_sum_left[i] + max_sum_right[i] > max_sum then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n93u5dl.lua:40: expected: 194, actual: 184\nstack traceback:\n\t/tmp/tmp5n93u5dl.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left_i = 0\n\tlocal max_sum_right_i = 0\n\tlocal max_sum_left_j = 0\n\tlocal max_sum_right_j = 0\n\tlocal max_sum_left_sum = 0\n\tlocal max_sum_right_sum = 0\n\tlocal max_sum_left_sum_i = 0\n\tlocal max_sum_right_sum_i = 0\n\tlocal max_sum_left_sum_j = 0\n\tlocal max_sum_right_sum_j = 0\n\tlocal max_sum_left_sum_sum = 0\n\tlocal max_sum_right_sum_sum = 0\n\tlocal max_sum_left_sum_sum_i = 0\n\tlocal max_sum_right_sum_sum_i = 0\n\tlocal max_sum_left_sum_sum_j = 0\n\tlocal max_sum_right_sum_sum_j = 0\n\tlocal max_sum_left_sum_sum_sum = 0\n\tlocal max_sum_right_sum_sum_sum = 0\n\tlocal max_sum_left_sum_sum_sum_i = 0\n\tlocal max_sum_right_sum_sum_sum_i = 0\n\tlocal max_sum_left_sum_sum_sum_j = 0\n\tlocal max_sum_right_sum_sum_sum_j = 0\n\tlocal max_sum_left_sum_sum_sum_sum = 0\n\tlocal max_sum_right_sum_sum_sum_sum = 0\n\tlocal max_sum_left_sum_sum_sum_sum_i = 0\n\tlocal max_sum_right_sum_sum_sum_sum_i = 0\n\tlocal max_sum_left_sum_sum_sum_sum_j = 0\n\tlocal max_sum_right_sum_sum_sum_sum_j = 0\n\tlocal max_sum_left_sum_sum_sum_sum_sum = 0\n\tlocal max_sum_right_sum_sum_sum_sum_sum = 0\n\tlocal max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp02e4xkq7.lua:46: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal n = #arr\n\tlocal max_sum_arr = {}\n\tlocal max_sum_arr_rev = {}\n\tmax_sum_arr[1] = arr[1]\n\tmax_sum_arr_rev[1] = arr[n]\n\tfor i = 2, n do\n\t\tmax_sum_arr[i] = arr[i]\n\t\tmax_sum_arr_rev[i] = arr[n - i + 1]\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n\t\t\t\tmax_sum_arr[i] = max_sum_arr[j] + arr[i]\n\t\t\tend\n\t\t\tif arr[n - i + 1] > arr[n - j + 1] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[n - i + 1] then\n\t\t\t\tmax_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[n - i + 1]\n\t\t\tend\n\t\tend\n\tend\n\tlocal max = max_sum_arr[1] + max_sum_arr_rev[1] - arr[1]\n\tfor i = 2, n do\n\t\tif max < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] then\n\t\t\tmax = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n\t\tend\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdxv1ysw.lua:32: expected: 194, actual: 172\nstack traceback:\n\t/tmp/tmpbdxv1ysw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi1854xk.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmppi1854xk.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxftf66zk.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local sum = arr[1]\n  for i = 2, n do\n    if arr[i] > arr[i - 1] then\n      sum = sum + arr[i]\n    else\n      max_sum = math.max(max_sum, sum)\n      sum = arr[i]\n    end\n  end\n  max_sum = math.max(max_sum, sum)\n  sum = arr[n]\n  for i = n - 1, 1, -1 do\n    if arr[i] > arr[i + 1] then\n      sum = sum + arr[i]\n    else\n      max_sum = math.max(max_sum, sum)\n      sum = arr[i]\n    end\n  end\n  max_sum = math.max(max_sum, sum)\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi1h4k_p.lua:31: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmpmi1h4k_p.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum = 0\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n    max_sum_arr_rev[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] then\n        max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] then\n      max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_backwards = arr[1]\n  local max_sum_so_far = arr[1]\n  local max_sum_so_far_backwards = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcrr4km04.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_backward = arr[#arr]\n  local max_sum_backward = arr[#arr]\n  for i = 2, #arr do\n    max_sum_ending_here = math.max(arr[i], max_sum_ending_here + arr[i])\n    max_sum = math.max(max_sum, max_sum_ending_here)\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_ending_here_backward = math.max(arr[i], max_sum_ending_here_backward + arr[i])\n    max_sum_backward = math.max(max_sum_backward, max_sum_ending_here_backward)\n  end\n  return math.max(max_sum, max_sum_backward)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldmqpzls.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpldmqpzls.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  max_sum = 0\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_5pxcy6.lua:35: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpn_5pxcy6.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr-1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6tnwbx8x.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    max_sum_left[i] = sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    max_sum_right[i] = sum\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0o6k0px.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpo0o6k0px.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local n = #arr\n  local max_sum_ending_here = arr[1]\n  local max_sum_starting_here = arr[n]\n  local max_sum_ending_here_arr = {arr[1]}\n  local max_sum_starting_here_arr = {arr[n]}\n  for i = 2, n do\n    max_sum_ending_here = math.max(arr[i], max_sum_ending_here + arr[i])\n    max_sum_ending_here_arr[i] = max_sum_ending_here\n    max_sum = math.max(max_sum, max_sum_ending_here)\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_starting_here = math.max(arr[i], max_sum_starting_here + arr[i])\n    max_sum_starting_here_arr[i] = max_sum_starting_here\n    max_sum = math.max(max_sum, max_sum_starting_here)\n  end\n  for i = 1, n - 2 do\n    max_sum = math.max(max_sum, max_sum_ending_here_arr[i] + max_sum_starting_here_arr[i + 2])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzugo2wt1.lua:20: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpzugo2wt1.lua:20: in local 'candidate'\n\t/tmp/tmpzugo2wt1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    elseif sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaaypcbzx.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaaypcbzx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal sum = 0\n\tlocal max_sum_arr = {}\n\tlocal sum_arr = {}\n\tfor i = 1, #arr do\n\t\tsum_arr[i] = arr[i]\n\t\tmax_sum_arr[i] = arr[i]\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tsum_arr[i] = sum_arr[i] + sum_arr[j]\n\t\t\t\tmax_sum_arr[i] = sum_arr[i]\n\t\t\tend\n\t\tend\n\t\tif sum_arr[i] > max_sum then\n\t\t\tmax_sum = sum_arr[i]\n\t\tend\n\tend\n\tfor i = #arr, 1, -1 do\n\t\tsum_arr[i] = arr[i]\n\t\tfor j = #arr, i + 1, -1 do\n\t\t\tif arr[i] > arr[j] then\n\t\t\t\tsum_arr[i] = sum_arr[i] + sum_arr[j]\n\t\t\t\tif sum_arr[i] > max_sum_arr[i] then\n\t\t\t\t\tmax_sum_arr[i] = sum_arr[i]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif max_sum_arr[i] > max_sum then\n\t\t\tmax_sum = max_sum_arr[i]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefdvwxxw.lua:40: expected: 194, actual: 390\nstack traceback:\n\t/tmp/tmpefdvwxxw.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 1, #arr do\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n      end\n    end\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo73u_45.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpeo73u_45.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    max_sum_left[i] = arr[i]\n    max_sum_right[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_left[i] = math.max(max_sum_left[i], max_sum_left[j] + arr[i])\n      end\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    for j = #arr, i + 1, -1 do\n      if arr[j] < arr[i] then\n        max_sum_right[i] = math.max(max_sum_right[i], max_sum_right[j] + arr[i])\n      end\n    end\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, n do\n    max_sum_left[i] = 0\n    max_sum_right[i] = 0\n  end\n  max_sum_left[1] = arr[1]\n  max_sum_right[n] = arr[n]\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        max_sum_left[i] = math.max(max_sum_left[i], max_sum_left[j])\n      end\n    end\n    max_sum_left[i] = max_sum_left[i] + arr[i]\n  end\n  for i = n - 1, 1, -1 do\n    for j = n, i + 1, -1 do\n      if arr[i] > arr[j] then\n        max_sum_right[i] = math.max(max_sum_right[i], max_sum_right[j])\n      end\n    end\n    max_sum_right[i] = max_sum_right[i] + arr[i]\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local n = #arr\n  local sum = {}\n  for i = 1, n do\n    sum[i] = {}\n    for j = 1, n do\n      sum[i][j] = 0\n    end\n  end\n  for i = 1, n do\n    sum[i][i] = arr[i]\n  end\n  for i = 1, n do\n    for j = i + 1, n do\n      sum[i][j] = sum[i][j - 1] + arr[j]\n    end\n  end\n  for i = 1, n do\n    for j = i, n do\n      local max = 0\n      for k = i, j do\n        if sum[i][k] > max then\n          max = sum[i][k]\n        end\n      end\n      if max > max_sum then\n        max_sum = max\n      end\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpdt1u5x.lua:39: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbpdt1u5x.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = arr[1]\n    local max_sum_left = arr[1]\n    local max_sum_right = arr[1]\n    local max_sum_left_arr = {arr[1]}\n    local max_sum_right_arr = {arr[1]}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpl33ofsfx.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, len do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  sum = 0\n  for i = len, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    if sum < 0 then\n      sum = 0\n    end\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt2eu90x.lua:32: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpbt2eu90x.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmptcrr64qa.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = 0\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    for i = 1, n do\n        if max_sum < max_sum_arr[i] then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00jr7p4t.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp00jr7p4t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = 0\n  local n = #arr\n  local l = {}\n  local r = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3480mdxy.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp41u2sh0t.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, #arr do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n        else\n            max_sum = math.max(max_sum, sum)\n            sum = arr[i]\n        end\n    end\n    return math.max(max_sum, sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizlxqvsm.lua:19: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmpizlxqvsm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_ending_here = arr[1]\n    local max_sum_ending_here_backwards = arr[n]\n    local max_sum_backwards = arr[n]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_h4ulta5.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local i = 1\n  local j = #arr\n  while i <= #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n    i = i + 1\n  end\n  sum = 0\n  while j >= 1 do\n    sum = sum + arr[j]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[j] = max_sum\n    j = j - 1\n  end\n  for i = 1, #arr do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8jleojf.lua:37: expected: 194, actual: 568\nstack traceback:\n\t/tmp/tmpo8jleojf.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxa83w6cj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_i = arr[i]\n    local max_sum_arr_rev_i = arr[i]\n    local max_sum_arr_rev_rev_i = arr[i]\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_arr_i = math.max(max_sum_arr_i, arr[i] + max_sum_arr[j])\n      end\n      if arr[j] > arr[i] then\n        max_sum_arr_rev_i = math.max(max_sum_arr_rev_i, arr[i] + max_sum_arr_rev[j])\n      end\n      if arr[j] < arr[i] then\n        max_sum_arr_rev_rev_i = math.max(max_sum_arr_rev_rev_i, arr[i] + max_sum_arr_rev_rev[j])\n      end\n    end\n    max_sum = math.max(max_sum, max_sum_arr_i, max_sum_arr_rev_i, max_sum_arr_rev_rev_i)\n    max_sum_arr[i] = max_sum_arr_i\n    max_sum_arr_rev[i] = max_sum_arr_rev_i\n    max_sum_arr_rev_rev[i] = max_sum_arr_rev_rev_i\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0mc9664.lua:34: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpq0mc9664.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_index = 1\n  local max_sum_arr_index_end = 1\n  local max_sum_arr_index_start = 1\n  local max_sum_arr_index_start_end = 1\n  local max_sum_arr_index_start_start = 1\n  local max_sum_arr_index_start_start_end = 1\n  local max_sum_arr_index_start_start_start = 1\n  local max_sum_arr_index_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_start_start = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_start_start_end = 1\n  local max_sum_arr_index_start_start_start_start_start_start_start_start_start_start = 1\n  local max_sum_arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4uwaebtr.lua:37: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[n]\n  local sum_left = arr[1]\n  local sum_right = arr[n]\n  local max_sum_left_arr = {arr[1]}\n  local max_sum_right_arr = {arr[n]}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4i6o25za.lua:20: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left_tmp = 0\n    local max_sum_right_tmp = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmph7x9bvs0.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\n  local n = #arr\n  max_sum_inc[1] = arr[1]\n  max_sum_dec[n] = arr[n]\n  for i = 2, n do\n    max_sum_inc[i] = math.max(arr[i], max_sum_inc[i - 1] + arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_dec[i] = math.max(arr[i], max_sum_dec[i + 1] + arr[i])\n  end\n  for i = 1, n do\n    max_sum = math.max(max_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb366yoeb.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpb366yoeb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_left[i] = sum\n    end\n    sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        max_sum_right[i] = sum\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd970xmd6.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpd970xmd6.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_ending_here = 0\n    local max_sum_ending_here_reverse = 0\n    local max_sum_ending_here_reverse_index = 0\n    local max_sum_ending_here_index = 0\n    local max_sum_ending_here_reverse_index_reverse = 0\n    local max_sum_ending_here_index_reverse = 0\n    for i = 1, #arr do\n        max_sum_ending_here = max_sum_ending_here + arr[i]\n        if max_sum_ending_here < 0 then\n            max_sum_ending_here = 0\n            max_sum_ending_here_index = i\n        end\n        if max_sum_ending_here > max_sum then\n            max_sum = max_sum_ending_here\n            max_sum_ending_here_index_reverse = max_sum_ending_here_index\n            max_sum_ending_here_reverse_index_reverse = i\n        end\n    end\n    for i = #arr, 1, -1 do\n        max_sum_ending_here_reverse = max_sum_ending_here_reverse + arr[i]\n        if max_sum_ending_here_reverse < 0 then\n            max_sum_ending_here_reverse = 0\n            max_sum_ending_here_reverse_index = i\n        end\n        if max_sum_ending_here_reverse > max_sum then\n            max_sum = max_sum_ending_here_reverse\n            max_sum_ending_here_reverse_index_reverse = max_sum_ending_here_reverse_index\n            max_sum_ending_here_index_reverse = i\n        end\n    end\n    if max_sum_ending_here_index_reverse == max_sum_ending_here_reverse_index_reverse then\n        return max_sum, {max_sum_ending_here_index_reverse, max_sum_ending_here_reverse_index_reverse}\n    else\n        return max_sum, {max_sum_ending_here_index_reverse, max_sum_ending_here_reverse_index_reverse}\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6odl9cky.lua:48: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_inc = {}\n  local max_sum_dec = {}\n  local max_sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5awrnsx.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_at = {}\n  local max_sum_starting_at = {}\n  local max_sum_ending_at_reversed = {}\n  local max_sum_starting_at_reversed = {}\n  local max_sum_ending_at_reversed_reversed = {}\n  local max_sum_starting_at_reversed_reversed = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkvd5ydd7.lua:19: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_so_far = arr[1]\n  for i = 2, #arr do\n    max_sum_so_far = math.max(arr[i], max_sum_so_far + arr[i])\n    max_sum = math.max(max_sum, max_sum_so_far)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclp2k2f1.lua:15: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpclp2k2f1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_ending_here = 0\n    local max_sum_ending_here_reverse = 0\n    local n = #arr\n    for i = 1, n do\n        max_sum_ending_here = max_sum_ending_here + arr[i]\n        if max_sum_ending_here < 0 then\n            max_sum_ending_here = 0\n        end\n        if max_sum < max_sum_ending_here then\n            max_sum = max_sum_ending_here\n        end\n    end\n    for i = n, 1, -1 do\n        max_sum_ending_here_reverse = max_sum_ending_here_reverse + arr[i]\n        if max_sum_ending_here_reverse < 0 then\n            max_sum_ending_here_reverse = 0\n        end\n        if max_sum < max_sum_ending_here_reverse then\n            max_sum = max_sum_ending_here_reverse\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpjuko5x.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmprpjuko5x.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpremh562y.lua:17: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpremh562y.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tsum = sum + arr[i]\n\t\tif sum < 0 then\n\t\t\tsum = 0\n\t\telseif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnyyne21.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpsnyyne21.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_tdrd0ji.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5fq766m.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_ending_here = arr[1]\n  local max_ending_here_reverse = arr[n]\n  local max_sum_reverse = arr[n]\n  for i = 2, n do\n    max_ending_here = math.max(max_ending_here + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_ending_here)\n    max_ending_here_reverse = math.max(max_ending_here_reverse + arr[n - i + 1], arr[n - i + 1])\n    max_sum_reverse = math.max(max_sum_reverse, max_ending_here_reverse)\n  end\n  return math.max(max_sum, max_sum_reverse)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtrjdce1.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpdtrjdce1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local n = #arr\n    for i = 1, n do\n        max_sum_left[i] = 0\n        max_sum_right[i] = 0\n    end\n    max_sum_left[1] = arr[1]\n    for i = 2, n do\n        max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n    end\n    max_sum_right[n] = arr[n]\n    for i = n - 1, 1, -1 do\n        max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n    end\n    for i = 1, n do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkpq040d.lua:28: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpqkpq040d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    max_sum_arr_rev[i] = arr[i]\n    max_sum_arr_rev_rev[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    for j = #arr, i + 1, -1 do\n      if arr[i] > arr[j] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] then\n        max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, #arr do\n    max_sum_arr_rev_rev[i] = max_sum_arr_rev[#arr - i + 1]\n  end\n  for i = 1, #arr do\n    if max_sum < max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i] then\n      max_sum = max_sum_arr[i] + max_sum_arr_rev_rev[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5sgz77u.lua:40: expected: 194, actual: 172\nstack traceback:\n\t/tmp/tmpp5sgz77u.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local n = #arr\n  for i = 1, n do\n    sum = 0\n    for j = i, n do\n      sum = sum + arr[j]\n      if sum > max_sum then\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniyq3kdi.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpniyq3kdi.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr1adxh8.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpwr1adxh8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  local max_sum_arr_rev_rev = {}\n  local max_sum_arr_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = {}\n  local max_sum_arr_rev_rev_rev_rev_rev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjcpnui2i.lua:32: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        max_sum_arr[i] = math.max(max_sum_arr[i - 1] + arr[i], arr[i])\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i + 1] + arr[i], arr[i])\n        max_sum = math.max(max_sum, max_sum_arr_rev[i])\n    end\n    for i = 1, n - 2 do\n        max_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev[i + 2])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl94p308w.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpl94p308w.lua:12: in local 'candidate'\n\t/tmp/tmpl94p308w.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        max_sum_arr[i] = math.max(arr[i], max_sum_arr[i - 1] + arr[i])\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(arr[i], max_sum_arr_rev[i + 1] + arr[i])\n        max_sum = math.max(max_sum, max_sum_arr_rev[i])\n    end\n    for i = 2, n - 1 do\n        max_sum = math.max(max_sum, max_sum_arr[i - 1] + max_sum_arr_rev[i + 1])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36maru2b.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp36maru2b.lua:12: in local 'candidate'\n\t/tmp/tmp36maru2b.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  local max = max_sum_arr[1]\n  for i = 2, n do\n    if max < max_sum_arr[i] then\n      max = max_sum_arr[i]\n    end\n  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d74b1nk.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp7d74b1nk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfvfc25qw.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_end = arr[1]\n  for i = 2, n do\n    max_sum_end = math.max(max_sum_end + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_end)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxhvd80c.lua:16: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmptxhvd80c.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, #arr do\n    local sum = 0\n    local sum_arr = {}\n    for j = i, #arr do\n      sum = sum + arr[j]\n      table.insert(sum_arr, arr[j])\n      if sum > max_sum then\n        max_sum = sum\n        max_sum_arr = sum_arr\n      end\n    end\n  end\n  return max_sum, max_sum_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uwwbk_c.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp6uwwbk_c.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf53t1cyn.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_left = arr[1]\n  local max_sum_ending_here_right = arr[1]\n  local max_sum_ending_here_left_index = 1\n  local max_sum_ending_here_right_index = 1\n  local max_sum_ending_here_index = 1\n  for i = 2, #arr do\n    if arr[i] > max_sum_ending_here_left then\n      max_sum_ending_here_left = arr[i]\n      max_sum_ending_here_left_index = i\n    end\n    if arr[i] > max_sum_ending_here_right then\n      max_sum_ending_here_right = arr[i]\n      max_sum_ending_here_right_index = i\n    end\n    if arr[i] > max_sum_ending_here then\n      max_sum_ending_here = arr[i]\n      max_sum_ending_here_index = i\n    end\n    if arr[i] < max_sum_ending_here then\n      if max_sum_ending_here_index < max_sum_ending_here_left_index then\n        max_sum_ending_here_left = max_sum_ending_here\n        max_sum_ending_here_left_index = max_sum_ending_here_index\n      end\n      if max_sum_ending_here_index > max_sum_ending_here_right_index then\n        max_sum_ending_here_right = max_sum_ending_here\n        max_sum_ending_here_right_index = max_sum_ending_here_index\n      end\n      max_sum_ending_here = arr[i]\n      max_sum_ending_here_index = i\n    end\n    if max_sum_ending_here_left + max_sum_ending_here_right > max_sum then\n      max_sum = max_sum_ending_here_left + max_sum_ending_here_right\n    end\n  end\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe8stms79.lua:49: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_rev = {}\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    max_sum_arr_rev[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = #arr - 1, 1, -1 do\n    for j = #arr, i + 1, -1 do\n      if arr[j] < arr[i] and max_sum_arr_rev[i] < max_sum_arr_rev[j] + arr[i] then\n        max_sum_arr_rev[i] = max_sum_arr_rev[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, #arr do\n    if max_sum < max_sum_arr[i] + max_sum_arr_rev[i] - arr[i] then\n      max_sum = max_sum_arr[i] + max_sum_arr_rev[i] - arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  max_sum_left[1] = arr[1]\n  max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv2514iu.lua:24: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpjv2514iu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_index = 0\n  local max_sum_ending_here_index = 0\n  local max_sum_ending_here_reverse_index_reverse = 0\n  local max_sum_ending_here_index_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_reverse_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = 0\n  local max_sum_ending_here_index_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqsxrmjwe.lua:35: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka7cg2iw.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpka7cg2iw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[j] < arr[i] then\n        max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n      end\n    end\n  end\n  local max_sum = 0\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0gniq06.lua:24: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmph0gniq06.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(max_sum_arr[i - 1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  for i = n - 1, 1, -1 do\n    max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i + 1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr_rev[i])\n  end\n  for i = 1, n - 2 do\n    max_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev[i + 2])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprdragvsk.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmprdragvsk.lua:12: in local 'candidate'\n\t/tmp/tmprdragvsk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf5fq766m.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7g2156k_.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local sum = arr[1]\n  local max_sum_left = arr[1]\n  local max_sum_right = arr[1]\n  local sum_left = arr[1]\n  local sum_right = arr[1]\n  for i = 2, #arr do\n    if arr[i] > arr[i - 1] then\n      sum_left = sum_left + arr[i]\n      if sum_left > max_sum_left then\n        max_sum_left = sum_left\n      end\n    else\n      sum_left = arr[i]\n    end\n    if arr[#arr - i + 2] > arr[#arr - i + 1] then\n      sum_right = sum_right + arr[#arr - i + 2]\n      if sum_right > max_sum_right then\n        max_sum_right = sum_right\n      end\n    else\n      sum_right = arr[#arr - i + 2]\n    end\n  end\n  return max_sum_left + max_sum_right - arr[math.floor(#arr / 2) + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3veykpe.lua:33: expected: 194, actual: 212\nstack traceback:\n\t/tmp/tmpm3veykpe.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local n = #arr\n  for i = 1, n do\n    sum = 0\n    for j = i, n do\n      sum = sum + arr[j]\n      if sum > max_sum then\n        max_sum = sum\n      end\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniyq3kdi.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpniyq3kdi.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_arr = {}\n    local max_sum = 0\n    for i = 1, #arr do\n        max_sum_arr[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n            end\n        end\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25_7p9uv.lua:20: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp25_7p9uv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka7cg2iw.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpka7cg2iw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7pk3wnm5.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    elseif sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaaypcbzx.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaaypcbzx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(0, sum)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(0, sum)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0691nyk.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpr0691nyk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left_temp = 0\n\tlocal max_sum_right_temp = 0\n\tfor i = 1, #arr do\n\t\tmax_sum_left_temp = max_sum_left_temp + arr[i]\n\t\tif max_sum_left_temp < 0 then\n\t\t\tmax_sum_left_temp = 0\n\t\tend\n\t\tmax_sum_left[i] = max_sum_left_temp\n\tend\n\tfor i = #arr, 1, -1 do\n\t\tmax_sum_right_temp = max_sum_right_temp + arr[i]\n\t\tif max_sum_right_temp < 0 then\n\t\t\tmax_sum_right_temp = 0\n\t\tend\n\t\tmax_sum_right[i] = max_sum_right_temp\n\tend\n\tfor i = 1, #arr do\n\t\tif max_sum < max_sum_left[i] + max_sum_right[i] then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxpahc45.lua:33: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpwxpahc45.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsr5b_57q.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max = arr[1]\n  local max_sum = arr[1]\n  for i = 2, #arr do\n    max = math.max(arr[i], max + arr[i])\n    max_sum = math.max(max_sum, max)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ctfck58.lua:15: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp8ctfck58.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tfor i = 1, #arr do\n\t\tmax_sum_left[i] = arr[i]\n\t\tmax_sum_right[i] = arr[i]\n\tend\n\tfor i = 2, #arr do\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n\t\t\t\tmax_sum_left[i] = max_sum_left[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #arr - 1, 1, -1 do\n\t\tfor j = #arr, i + 1, -1 do\n\t\t\tif arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n\t\t\t\tmax_sum_right[i] = max_sum_right[j] + arr[i]\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #arr do\n\t\tif max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n\t\t\tmax_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n\t\tend\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tsum = sum + arr[i]\n\t\tmax_sum_left[i] = sum\n\t\tif sum < 0 then\n\t\t\tsum = 0\n\t\tend\n\tend\n\tsum = 0\n\tfor i = #arr, 1, -1 do\n\t\tsum = sum + arr[i]\n\t\tmax_sum_right[i] = sum\n\t\tif sum < 0 then\n\t\t\tsum = 0\n\t\tend\n\tend\n\tfor i = 1, #arr do\n\t\tmax_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n\tend\n\treturn max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposu02fq5.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmposu02fq5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_arr = {}\n  for i = 1, len do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, len do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, len do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdc1zlv7.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpjdc1zlv7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if arr[i] > arr[i-1] then\n            sum = sum + arr[i]\n        else\n            if sum > max_sum then\n                max_sum = sum\n            end\n            sum = arr[i]\n        end\n    end\n    if sum > max_sum then\n        max_sum = sum\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdmoaip1.lua:25: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmpmdmoaip1.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_starting_here = arr[1]\n  local max_sum_starting_here_ending_here = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2evfqmjr.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev_rev_rev = {arr[1]}\n  for i = 2, #arr do\n    max_sum_arr[i] = arr[i]\n    max_sum_arr_rev[i] = arr[i]\n    max_sum_arr_rev_rev[i] = arr[i]\n    max_sum_arr_rev_rev_rev[i] = arr[i]\n    max_sum_arr_rev_rev_rev_rev[i] = arr[i]\n    max_sum_arr_rev_rev_rev_rev_rev[i] = arr[i]\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n        max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i], max_sum_arr_rev[j] + arr[i])\n        max_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev_rev[i], max_sum_arr_rev_rev[j] + arr[i])\n        max_sum_arr_rev_rev_rev[i] = math.max(max_sum_arr_rev_rev_rev[i], max_sum_arr_rev_rev_rev[j] + arr[i])\n        max_sum_arr_rev_rev_rev_rev[i] = math.max(max_sum_arr_rev_rev_rev_rev[i], max_sum_arr_rev_rev_rev_rev[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0k1p_uzj.lua:24: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7pk3wnm5.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local left = {}\n    local right = {}\n    local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmptrx9jlgh.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4db_q5m5.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local n = #arr\n    local i = 1\n    while i <= n do\n        max_sum_left[i] = arr[i]\n        max_sum_right[i] = arr[i]\n        i = i + 1\n    end\n    i = 2\n    while i <= n do\n        local j = 1\n        while j < i do\n            if arr[i] > arr[j] and max_sum_left[i] < max_sum_left[j] + arr[i] then\n                max_sum_left[i] = max_sum_left[j] + arr[i]\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    i = n - 1\n    while i >= 1 do\n        local j = n\n        while j > i do\n            if arr[i] > arr[j] and max_sum_right[i] < max_sum_right[j] + arr[i] then\n                max_sum_right[i] = max_sum_right[j] + arr[i]\n            end\n            j = j - 1\n        end\n        i = i - 1\n    end\n    i = 1\n    while i <= n do\n        if max_sum < max_sum_left[i] + max_sum_right[i] - arr[i] then\n            max_sum = max_sum_left[i] + max_sum_right[i] - arr[i]\n        end\n        i = i + 1\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1250vmtu.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp1250vmtu.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  for i = 2, #arr do\n    local max_sum_arr_i = {}\n    local max_sum_arr_rev_i = {}\n    for j = 1, i-1 do\n      if arr[j] < arr[i] then\n        if max_sum_arr[j] + arr[i] > max_sum_arr_i[1] then\n          max_sum_arr_i = {max_sum_arr[j] + arr[i]}\n        end\n      end\n      if arr[j] > arr[i] then\n        if max_sum_arr_rev[j] + arr[i] > max_sum_arr_rev_i[1] then\n          max_sum_arr_rev_i = {max_sum_arr_rev[j] + arr[i]}\n        end\n      end\n    end\n    if #max_sum_arr_i == 0 then\n      max_sum_arr_i = {arr[i]}\n    end\n    if #max_sum_arr_rev_i == 0 then\n      max_sum_arr_rev_i = {arr[i]}\n    end\n    if max_sum_arr_i[1] > max_sum then\n      max_sum = max_sum_arr_i[1]\n    end\n    if max_sum_arr_rev_i[1] > max_sum then\n      max_sum = max_sum_arr_rev_i[1]\n    end\n    max_sum_arr[i] = max_sum_arr_i[1]\n    max_sum_arr_rev[i] = max_sum_arr_rev_i[1]\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz6z0kala.lua:11: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz6z0kala.lua:11: in local 'candidate'\n\t/tmp/tmpz6z0kala.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_arr = {}\n    local max_sum = 0\n    for i = 1, #arr do\n        max_sum_arr[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n            end\n        end\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25_7p9uv.lua:20: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp25_7p9uv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    for i = 2, n do\n        max_sum_arr[i] = math.max(arr[i], max_sum_arr[i - 1] + arr[i])\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(arr[i], max_sum_arr_rev[i + 1] + arr[i])\n        max_sum = math.max(max_sum, max_sum_arr[i - 1] + max_sum_arr_rev[i + 1])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpai1u04pw.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpai1u04pw.lua:12: in local 'candidate'\n\t/tmp/tmpai1u04pw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local i = 1\n  while i <= #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8otscp.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpya8otscp.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(max_sum_left[i - 1] + arr[i], arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i + 1] + arr[i], arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfvfc25qw.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_arr = {}\n  local max_sum_arr_size = 0\n  local max_sum_arr_start = 0\n  local max_sum_arr_end = 0\n  local max_sum_arr_start_index = 0\n  local max_sum_arr_end_index = 0\n  local max_sum_arr_start_index_temp = 0\n  local max_sum_arr_end_index_temp = 0\n  local max_sum_arr_temp = {}\n  local max_sum_arr_size_temp = 0\n  local max_sum_temp = 0\n  local max_sum_temp_arr = {}\n  local max_sum_temp_arr_size = 0\n  local max_sum_temp_arr_start = 0\n  local max_sum_temp_arr_end = 0\n  local max_sum_temp_arr_start_index = 0\n  local max_sum_temp_arr_end_index = 0\n  local max_sum_temp_arr_start_index_temp = 0\n  local max_sum_temp_arr_end_index_temp = 0\n  local max_sum_temp_arr_temp = {}\n  local max_sum_temp_arr_size_temp = 0\n  local max_sum_temp_temp = 0\n  local max_sum_temp_temp_arr = {}\n  local max_sum_temp_temp_arr_size = 0\n  local max_sum_temp_temp_arr_start = 0\n  local max_sum_temp_temp_arr_end = 0\n  local max_sum_temp_temp_arr_start_index = 0\n  local max_sum_temp_temp_arr_end_index = 0\n  local max_sum_temp_temp_arr_start_index_temp = 0\n  local max_sum_temp_temp_arr_end_index_temp = 0\n  local max_sum_temp_temp_arr_temp = {}\n  local max_sum_temp_temp_arr_size_temp = 0\n  local max_sum_temp_temp_temp = 0\n  local max_sum_temp_temp_temp\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo8c6ujjl.lua:47: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal n = #arr\n\tlocal max_sum = arr[1]\n\tlocal max_sum_arr = {arr[1]}\n\tlocal max_sum_arr_rev = {arr[1]}\n\tlocal max_sum_arr_rev_rev = {arr[1]}\n\tfor i = 2, n do\n\t\tmax_sum_arr[i] = arr[i]\n\t\tmax_sum_arr_rev[i] = arr[i]\n\t\tmax_sum_arr_rev_rev[i] = arr[i]\n\t\tfor j = 1, i - 1 do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tmax_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n\t\t\tend\n\t\t\tif arr[j] > arr[i] then\n\t\t\t\tmax_sum_arr_rev[i] = math.max(max_sum_arr_rev[i], max_sum_arr_rev[j] + arr[i])\n\t\t\tend\n\t\tend\n\t\tmax_sum = math.max(max_sum, max_sum_arr[i])\n\tend\n\tfor i = n - 1, 1, -1 do\n\t\tfor j = n, i + 1, -1 do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tmax_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev_rev[i], max_sum_arr_rev_rev[j] + arr[i])\n\t\t\tend\n\t\tend\n\t\tmax_sum = math.max(max_sum, max_sum_arr_rev_rev[i])\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif i ~= j then\n\t\t\t\tmax_sum = math.max(max_sum, max_sum_arr[i] + max_sum_arr_rev_rev[j])\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt9ad_wz1.lua:38: 'end' expected (to close 'function' at line 2) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_ending_here = {}\n  local max_sum_starting_here = {}\n  local max_sum_so_far = 0\n  local max_sum_ending_here[1] = arr[1]\n  local max_sum_starting_here[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_ending_here[i] = math.max(arr[i], max_sum_ending_here[i-1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_starting_here[i] = math.max(arr[i], max_sum_starting_here[i+1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum_so_far = math.max(max_sum_so_far, max_sum_ending_here[i] + max_sum_starting_here[i] - arr[i])\n  end\n  return max_sum_so_far\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjnivu7ak.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_sum = 0\n  local max_sum_right_sum = 0\n  local max_sum_left_sum_index = 0\n  local max_sum_right_sum_index = 0\n  local max_sum_left_sum_index_index = 0\n  local max_sum_right_sum_index_index = 0\n  local max_sum_left_sum_index_index_index = 0\n  local max_sum_right_sum_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index_index_index_index_index = 0\n  local max_sum_left_sum_index_index_index_index_index_index_index_index_index_index = 0\n  local max_sum_right_sum_index_index_index_index_index_index_index_index_index_index = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpeenxxcbw.lua:37: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmptcrr64qa.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_starting_here = arr[1]\n  for i = 2, #arr do\n    max_sum_ending_here = math.max(arr[i], max_sum_ending_here + arr[i])\n    max_sum_starting_here = math.max(arr[i], max_sum_starting_here + arr[i])\n    max_sum = math.max(max_sum, max_sum_ending_here, max_sum_starting_here)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolwntkmz.lua:17: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpolwntkmz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = 0\n  local max_sum_arr = {}\n  for i = 1, n do\n    max_sum_arr[i] = arr[i]\n  end\n  for i = 2, n do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n      end\n    end\n  end\n  for i = 1, n do\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2fhluce.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpy2fhluce.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    for i = 1, #arr do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n        max_sum_left[i] = max_sum\n    end\n    sum = 0\n    max_sum = 0\n    for i = #arr, 1, -1 do\n        sum = sum + arr[i]\n        if sum < 0 then\n            sum = 0\n        end\n        if sum > max_sum then\n            max_sum = sum\n        end\n        max_sum_right[i] = max_sum\n    end\n    max_sum = 0\n    for i = 1, #arr - 1 do\n        if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n            max_sum = max_sum_left[i] + max_sum_right[i + 1]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5gvzquz.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpx5gvzquz.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_index = 0\n  local max_sum_ending_here_index = 0\n  local max_sum_ending_here_reverse_index = 0\n  local max_sum_ending_here_index = 0\n  for i = 1, #arr do\n    max_sum_ending_here = max_sum_ending_here + arr[i]\n    if max_sum_ending_here < 0 then\n      max_sum_ending_here = 0\n      max_sum_ending_here_index = i\n    end\n    if max_sum_ending_here > max_sum then\n      max_sum = max_sum_ending_here\n      max_sum_ending_here_index = i\n    end\n  end\n  for i = #arr, 1, -1 do\n    max_sum_ending_here_reverse = max_sum_ending_here_reverse + arr[i]\n    if max_sum_ending_here_reverse < 0 then\n      max_sum_ending_here_reverse = 0\n      max_sum_ending_here_reverse_index = i\n    end\n    if max_sum_ending_here_reverse > max_sum then\n      max_sum = max_sum_ending_here_reverse\n      max_sum_ending_here_reverse_index = i\n    end\n  end\n  if max_sum_ending_here_index > max_sum_ending_here_reverse_index then\n    return max_sum_ending_here\n  else\n    return max_sum_ending_here_reverse\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6x1iz6k.lua:42: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpm6x1iz6k.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_tmp = 0\n  local max_sum_right_tmp = 0\n  local max_sum_tmp = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpspzgzznv.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local n = #arr\n  for i = 1, n do\n    max_sum_left[i] = 0\n    max_sum_right[i] = 0\n  end\n  for i = 1, n do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = n, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, n do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcacu89x4.lua:46: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpcacu89x4.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_prev = arr[1]\n  local max_sum_ending_here_prev_prev = arr[1]\n  for i = 2, #arr do\n    max_sum_ending_here = math.max(max_sum_ending_here_prev, max_sum_ending_here_prev_prev + arr[i])\n    max_sum_ending_here_prev_prev = max_sum_ending_here_prev\n    max_sum_ending_here_prev = max_sum_ending_here\n    max_sum = math.max(max_sum, max_sum_ending_here)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_xt1hv7.lua:19: expected: 194, actual: 179\nstack traceback:\n\t/tmp/tmp4_xt1hv7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_arr = {}\n    local max_sum = 0\n    for i = 1, #arr do\n        max_sum_arr[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] then\n                max_sum_arr[i] = math.max(max_sum_arr[i], max_sum_arr[j] + arr[i])\n            end\n        end\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25_7p9uv.lua:20: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp25_7p9uv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum_arr = {}\n  local max_sum = 0\n  local max_sum_index = 0\n  for i = 1, #arr do\n    max_sum_arr[i] = arr[i]\n    if max_sum < max_sum_arr[i] then\n      max_sum = max_sum_arr[i]\n      max_sum_index = i\n    end\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n        max_sum_arr[i] = max_sum_arr[j] + arr[i]\n        if max_sum < max_sum_arr[i] then\n          max_sum = max_sum_arr[i]\n          max_sum_index = i\n        end\n      end\n    end\n  end\n  return max_sum, max_sum_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw_mm1wj.lua:28: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpfw_mm1wj.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local n = #arr\n  for i = 1, n do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbym9osg.lua:21: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmphbym9osg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, #arr do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n        else\n            max_sum = math.max(max_sum, sum)\n            sum = arr[i]\n        end\n    end\n    max_sum = math.max(max_sum, sum)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotibmn65.lua:20: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmpotibmn65.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum_arr = {}\n    local max_sum = 0\n    for i = 1, #arr do\n        max_sum_arr[i] = arr[i]\n        for j = 1, i - 1 do\n            if arr[j] < arr[i] and max_sum_arr[j] + arr[i] > max_sum_arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n        if max_sum_arr[i] > max_sum then\n            max_sum = max_sum_arr[i]\n        end\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_oguswqy.lua:22: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmp_oguswqy.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_i = 0\n  local max_sum_right_i = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk8yk7mxw.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local sum = arr[1]\n    for i = 2, n do\n        if arr[i] > arr[i - 1] then\n            sum = sum + arr[i]\n        else\n            max_sum = math.max(max_sum, sum)\n            sum = arr[i]\n        end\n    end\n    max_sum = math.max(max_sum, sum)\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i4clwzp.lua:21: expected: 194, actual: 133\nstack traceback:\n\t/tmp/tmp4i4clwzp.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local len = #arr\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[len] = arr[len]\n  for i = 2, len do\n    max_sum_left[i] = math.max(max_sum_left[i-1] + arr[i], arr[i])\n  end\n  for i = len - 1, 1, -1 do\n    max_sum_right[i] = math.max(max_sum_right[i+1] + arr[i], arr[i])\n  end\n  for i = 1, len do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9l5ox67j.lua:7: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_ending_here = 0\n  local max_sum_ending_here_reverse = 0\n  local max_sum_ending_here_reverse_temp = 0\n  local max_sum_ending_here_temp = 0\n  for i = 1, #arr do\n    max_sum_ending_here_temp = max_sum_ending_here + arr[i]\n    if max_sum_ending_here_temp > 0 then\n      max_sum_ending_here = max_sum_ending_here_temp\n    else\n      max_sum_ending_here = 0\n    end\n    if max_sum_ending_here > max_sum then\n      max_sum = max_sum_ending_here\n    end\n  end\n  for i = #arr, 1, -1 do\n    max_sum_ending_here_reverse_temp = max_sum_ending_here_reverse + arr[i]\n    if max_sum_ending_here_reverse_temp > 0 then\n      max_sum_ending_here_reverse = max_sum_ending_here_reverse_temp\n    else\n      max_sum_ending_here_reverse = 0\n    end\n    if max_sum_ending_here_reverse > max_sum then\n      max_sum = max_sum_ending_here_reverse\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrp7txku.lua:36: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmphrp7txku.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxa83w6cj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_ending_here = arr[1]\n    for i = 2, n do\n        max_ending_here = math.max(arr[i], max_ending_here + arr[i])\n        max_sum = math.max(max_sum, max_ending_here)\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplioelfg5.lua:16: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmplioelfg5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_ending_here = arr[1]\n    local max_sum_ending_here_backwards = arr[n]\n    local max_sum_backwards = arr[n]\n    for i = 2, n do\n        max_sum_ending_here = math.max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = math.max(max_sum, max_sum_ending_here)\n        max_sum_ending_here_backwards = math.max(arr[n - i + 1], max_sum_ending_here_backwards + arr[n - i + 1])\n        max_sum_backwards = math.max(max_sum_backwards, max_sum_ending_here_backwards)\n    end\n    return max_sum, max_sum_backwards\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmljyx5mb.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpmljyx5mb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_reverse = arr[n]\n  local max_sum_reverse = arr[n]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt9a17qea.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  for i = 2, n do\n    max_sum_arr[i] = math.max(max_sum_arr[i-1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr[i])\n  end\n  for i = n-1, 1, -1 do\n    max_sum_arr_rev[i] = math.max(max_sum_arr_rev[i+1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr_rev[i])\n  end\n  for i = 2, n do\n    max_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev_rev[i-1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr_rev_rev[i])\n  end\n  for i = n-1, 1, -1 do\n    max_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev_rev[i+1] + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_arr_rev_rev[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu156aw1q.lua:13: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpu156aw1q.lua:13: in local 'candidate'\n\t/tmp/tmpu156aw1q.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(0, sum)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(0, sum)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0691nyk.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpr0691nyk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_prev = arr[1]\n  local max_sum_ending_here_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = arr[1]\n  local max_sum_ending_here_prev_prev_prev_prev_prev_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0blwb0ja.lua:30: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_arr = {}\n  local sum_arr = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    sum_arr[i] = sum\n  end\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    sum_arr[i] = sum\n  end\n  for i = 1, #arr do\n    if sum_arr[i] > max_sum then\n      max_sum = sum_arr[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_aamt0nu.lua:26: expected: 194, actual: 568\nstack traceback:\n\t/tmp/tmp_aamt0nu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local n = #arr\n  for i = 1, n do\n    sum = 0\n    for j = i, n do\n      sum = sum + arr[j]\n      max_sum = math.max(max_sum, sum)\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiizu_80.lua:19: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpgiizu_80.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, #arr - 1 do\n    if max_sum_left[i] + max_sum_right[i + 1] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i + 1]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi1854xk.lua:41: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmppi1854xk.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmptcrr64qa.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7pk3wnm5.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_starting_here = arr[1]\n  for i = 2, #arr do\n    max_sum_ending_here = math.max(arr[i], max_sum_ending_here + arr[i])\n    max_sum = math.max(max_sum, max_sum_ending_here)\n    max_sum_starting_here = math.max(arr[i], max_sum_starting_here + arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38uivrjy.lua:17: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp38uivrjy.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local sum = arr[1]\n  local i = 2\n  while i <= n do\n    sum = math.max(arr[i], sum + arr[i])\n    max_sum = math.max(max_sum, sum)\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38d21op9.lua:18: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp38d21op9.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left[1] = arr[1]\n  local max_sum_right[#arr] = arr[#arr]\n  for i = 2, #arr do\n    max_sum_left[i] = math.max(arr[i], max_sum_left[i - 1] + arr[i])\n  end\n  for i = #arr - 1, 1, -1 do\n    max_sum_right[i] = math.max(arr[i], max_sum_right[i + 1] + arr[i])\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7pk3wnm5.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\n    local max_sum_left[1] = arr[1]\n    local max_sum_right[#arr] = arr[#arr]\n    for i = 2, #arr do\n        max_sum_left[i] = math.max(arr[i], max_sum_left[i-1] + arr[i])\n    end\n    for i = #arr-1, 1, -1 do\n        max_sum_right[i] = math.max(arr[i], max_sum_right[i+1] + arr[i])\n    end\n    for i = 1, #arr do\n        max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk_klhf63.lua:6: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local max_sum_left_till_now = 0\n  local max_sum_right_till_now = 0\n  local n = #arr\n  for i = 1, n do\n    max_sum_left_till_now = max_sum_left_till_now + arr[i]\n    if max_sum_left_till_now < 0 then\n      max_sum_left_till_now = 0\n    end\n    max_sum_left[i] = max_sum_left_till_now\n  end\n  for i = n, 1, -1 do\n    max_sum_right_till_now = max_sum_right_till_now + arr[i]\n    if max_sum_right_till_now < 0 then\n      max_sum_right_till_now = 0\n    end\n    max_sum_right[i] = max_sum_right_till_now\n  end\n  for i = 1, n do\n    max_sum = max(max_sum, max_sum_left[i] + max_sum_right[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7o6u3fap.lua:24: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmp7o6u3fap.lua:24: in local 'candidate'\n\t/tmp/tmp7o6u3fap.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_prev = arr[1]\n  for i = 2, #arr do\n    max_sum_ending_here = math.max(max_sum_ending_here + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_ending_here)\n    max_sum_ending_here_prev = math.max(max_sum_ending_here_prev + arr[i], max_sum_ending_here)\n    max_sum = math.max(max_sum, max_sum_ending_here_prev)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0nk_bme.lua:18: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpy0nk_bme.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxa83w6cj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local len = #arr\n  local max_sum = arr[1]\n  local max_sum_so_far = arr[1]\n  for i = 2, len do\n    max_sum_so_far = math.max(max_sum_so_far + arr[i], arr[i])\n    max_sum = math.max(max_sum, max_sum_so_far)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajqv6snm.lua:16: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpajqv6snm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_before = arr[1]\n  local max_sum_ending_here_after = arr[1]\n  for i = 2, n do\n    max_sum_ending_here_before = math.max(max_sum_ending_here_before + arr[i], arr[i])\n    max_sum_ending_here_after = math.max(max_sum_ending_here_after + arr[i], arr[i])\n    max_sum_ending_here = math.max(max_sum_ending_here_before, max_sum_ending_here_after)\n    max_sum = math.max(max_sum, max_sum_ending_here)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8q6hidk.lua:20: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpk8q6hidk.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmptcrr64qa.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027736,
      "stdout": "",
      "stderr": "lua: /tmp/tmpivpy8_x2.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local i = 1\n  while i <= #arr do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n    i = i + 1\n  end\n  sum = 0\n  max_sum = 0\n  i = #arr\n  while i >= 1 do\n    sum = sum + arr[i]\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n    i = i - 1\n  end\n  local max_sum = 0\n  i = 1\n  while i <= #arr do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq45j7qc0.lua:41: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpq45j7qc0.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    max_sum_left[i] = sum\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    max_sum_right[i] = sum\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i4bo69k.lua:31: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp8i4bo69k.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local max_sum = 0\n    local max_sum_left = {}\n    local max_sum_right = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxa83w6cj.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n    max_sum_left[i] = sum\n    sum = math.max(sum, 0)\n  end\n  sum = 0\n  for i = #arr, 1, -1 do\n    sum = sum + arr[i]\n    max_sum_right[i] = sum\n    sum = math.max(sum, 0)\n  end\n  for i = 1, #arr do\n    max_sum = math.max(max_sum, max_sum_left[i] + max_sum_right[i] - arr[i])\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaehmso3l.lua:27: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmpaehmso3l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_arr = {arr[1]}\n    local max_sum_arr_rev = {arr[1]}\n    local max_sum_arr_rev_rev = {arr[1]}\n    local max_sum_arr_rev_rev_rev = {arr[1]}\n    for i = 2, n do\n        max_sum_arr[i] = math.max(arr[i], max_sum_arr[i - 1] + arr[i])\n        max_sum = math.max(max_sum, max_sum_arr[i])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev[i] = math.max(arr[i], max_sum_arr_rev[i + 1] + arr[i])\n    end\n    for i = 2, n do\n        max_sum_arr_rev_rev[i] = math.max(max_sum_arr_rev[i], max_sum_arr[i - 1])\n    end\n    for i = n - 1, 1, -1 do\n        max_sum_arr_rev_rev_rev[i] = math.max(max_sum_arr_rev_rev[i], max_sum_arr_rev[i + 1])\n    end\n    for i = 2, n - 1 do\n        max_sum = math.max(max_sum, max_sum_arr_rev_rev_rev[i])\n    end\n    return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1kx1djf9.lua:14: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp1kx1djf9.lua:14: in local 'candidate'\n\t/tmp/tmp1kx1djf9.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum_arr = {}\n    for i = 1, n do\n        max_sum_arr[i] = arr[i]\n    end\n    for i = 2, n do\n        for j = 1, i - 1 do\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i] then\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n            end\n        end\n    end\n    local max = max_sum_arr[1]\n    for i = 2, n do\n        if max < max_sum_arr[i] then\n            max = max_sum_arr[i]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcy2n8r7.lua:27: expected: 194, actual: 167\nstack traceback:\n\t/tmp/tmpzcy2n8r7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local len = #arr\n  local i = 1\n  while i <= len do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    i = i + 1\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_33mu1n9.lua:23: expected: 194, actual: 284\nstack traceback:\n\t/tmp/tmp_33mu1n9.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = 0\n  local sum = 0\n  local max_sum_left = {}\n  local max_sum_right = {}\n  local n = #arr\n  for i = 1, n do\n    max_sum_left[i] = 0\n    max_sum_right[i] = 0\n  end\n  for i = 1, n do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_left[i] = max_sum\n  end\n  sum = 0\n  max_sum = 0\n  for i = n, 1, -1 do\n    sum = sum + arr[i]\n    if sum < 0 then\n      sum = 0\n    end\n    if sum > max_sum then\n      max_sum = sum\n    end\n    max_sum_right[i] = max_sum\n  end\n  max_sum = 0\n  for i = 1, n do\n    if max_sum_left[i] + max_sum_right[i] > max_sum then\n      max_sum = max_sum_left[i] + max_sum_right[i]\n    end\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcacu89x4.lua:46: expected: 194, actual: 384\nstack traceback:\n\t/tmp/tmpcacu89x4.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local max_sum = arr[1]\n  local max_sum_ending_here = arr[1]\n  local max_sum_ending_here_prev = arr[1]\n  local max_sum_ending_here_prev_prev = arr[1]\n  for i = 2, #arr do\n    max_sum_ending_here_prev_prev = max_sum_ending_here_prev\n    max_sum_ending_here_prev = max_sum_ending_here\n    max_sum_ending_here = math.max(arr[i], max_sum_ending_here_prev + arr[i])\n    max_sum = math.max(max_sum, max_sum_ending_here, max_sum_ending_here_prev_prev + max_sum_ending_here_prev)\n  end\n  return max_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr46mzgpb.lua:19: expected: 194, actual: 532\nstack traceback:\n\t/tmp/tmpr46mzgpb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n  local n = #arr\n  local max_sum = arr[1]\n  local max_sum_arr = {arr[1]}\n  local max_sum_arr_rev = {arr[1]}\n  local max_sum_arr_rev_rev = {arr[1]}\n  local max_sum_arr_rev_rev_rev = {arr[1]}\n  for i = 2, n do\n    local max_sum_arr_rev_rev_rev_rev = max_sum_arr_rev_rev_rev\n    local max_sum_arr_rev_rev_rev = max_sum_arr_rev_rev\n    local max_sum_arr_rev_rev = max_sum_arr_rev\n    local max_sum_arr_rev = max_sum_arr\n    local max_sum_arr = max_sum_arr\n    local max_sum = max_sum\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        max_sum_arr_rev_rev_rev_rev[j] = max_sum_arr_rev_rev_rev[j] + arr[i]\n        max_sum_arr_rev_rev_rev[j] = max_sum_arr_rev_rev_rev[j] + arr[i]\n        max_sum_arr_rev_rev[j] = max_sum_arr_rev_rev[j] + arr[i]\n        max_sum_arr_rev[j] = max_sum_arr_rev[j] + arr[i]\n        max_sum_arr[j] = max_sum_arr[j] + arr[i]\n        max_sum = math.max(max_sum, max_sum_arr_rev_rev_rev_rev[j])\n        max_sum = math.max(max_sum, max_sum_arr_rev_rev_rev[j])\n        max_sum = math.max(max_sum, max_sum_arr_rev_rev[j])\n        max_sum = math.max(max_sum, max_sum_arr_rev[j])\n        max_sum = math.max(max_sum, max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdmgiouxe.lua:28: ')' expected (to close '(' at line 27) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n    local n = #arr\n    local max_sum = arr[1]\n    local max_sum_ending_here = arr[1]\n    local max_sum_ending_here_reverse = arr[n]\n    local max_sum_reverse = arr[n]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1zfudqjm.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function that takes a table and finds the maximum sum of a bitonic subsequence for the given table, where a sequence is bitonic if it is first increasing and then decreasing.\nlocal function max_sum(arr)\n\tlocal max_sum = 0\n\tlocal max_sum_left = {}\n\tlocal max_sum_right = {}\n\tlocal max_sum_left_i = 0\n\tlocal max_sum_right_i = 0\n\tlocal max_sum_left_j = 0\n\tlocal max_sum_right_j = 0\n\tlocal max_sum_left_sum = 0\n\tlocal max_sum_right_sum = 0\n\tfor i = 1, #arr do\n\t\tmax_sum_left[i] = 0\n\t\tmax_sum_right[i] = 0\n\tend\n\tfor i = 1, #arr do\n\t\tmax_sum_left_sum = 0\n\t\tfor j = i, 1, -1 do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tmax_sum_left_sum = max_sum_left_sum + arr[j]\n\t\t\t\tif max_sum_left_sum > max_sum_left[i] then\n\t\t\t\t\tmax_sum_left[i] = max_sum_left_sum\n\t\t\t\t\tmax_sum_left_i = i\n\t\t\t\t\tmax_sum_left_j = j\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #arr, 1, -1 do\n\t\tmax_sum_right_sum = 0\n\t\tfor j = i, #arr do\n\t\t\tif arr[j] < arr[i] then\n\t\t\t\tmax_sum_right_sum = max_sum_right_sum + arr[j]\n\t\t\t\tif max_sum_right_sum > max_sum_right[i] then\n\t\t\t\t\tmax_sum_right[i] = max_sum_right_sum\n\t\t\t\t\tmax_sum_right_i = i\n\t\t\t\t\tmax_sum_right_j = j\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #arr do\n\t\tif max_sum_left[i] + max_sum_right[i] > max_sum then\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_sum\n    lu.assertEquals(candidate({1, 15, 51, 45, 33, 100, 12, 18, 9}), 194)\n    lu.assertEquals(candidate({80, 60, 30, 40, 20, 10}), 210)\n    lu.assertEquals(candidate({2, 3, 14, 16, 21, 23, 29, 30}), 138)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnxfy5zvb.lua:53: 'end' expected (to close 'if' at line 43) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}