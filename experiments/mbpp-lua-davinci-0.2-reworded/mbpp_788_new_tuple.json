{
  "name": "mbpp_788_new_tuple",
  "language": "lua",
  "prompt": "-- Write a function to create a new table from the given string and table.\nlocal function new_tuple(test_list, test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = new_tuple\n    lu.assertEquals(candidate({'WEB', 'is'}, 'best'), {'WEB', 'is', 'best'})\n    lu.assertEquals(candidate({'We', 'are'}, 'Developers'), {'We', 'are', 'Developers'})\n    lu.assertEquals(candidate({'Part', 'is'}, 'Wrong'), {'Part', 'is', 'Wrong'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local t = {}\n    for i, v in ipairs(test_list) do\n        t[v] = test_str\n    end\n    return t\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#new_tuple + 1] = test_str\n    return new_tuple\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#new_tuple + 1] = test_str\n    return new_tuple\nend",
    "    local tuple = {}\n    for i,v in ipairs(test_list) do\n        tuple[i] = v\n    end\n    tuple[#test_list + 1] = test_str\n    return tuple\nend",
    "    local t = {}\n    for i, v in ipairs(test_list) do\n        t[v] = test_str\n    end\n    return t\nend",
    "    local t = {}\n    for i, v in ipairs(test_list) do\n        t[i] = v\n    end\n    t[#t + 1] = test_str\n    return t\nend",
    "    local tuple = {}\n    for i = 1, #test_list do\n        tuple[i] = test_str\n    end\n    return tuple\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#new_tuple + 1] = test_str\n    return new_tuple\nend",
    "    local t = {}\n    for i, v in ipairs(test_list) do\n        t[v] = test_str\n    end\n    return t\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#new_tuple + 1] = test_str\n    return new_tuple\nend",
    "    local t = {}\n    for _, v in ipairs(test_list) do\n        t[v] = test_str\n    end\n    return t\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#new_tuple + 1] = test_str\n    return new_tuple\nend",
    "    local new_tuple = {}\n    for i = 1, #test_list do\n        new_tuple[i] = test_str\n    end\n    return new_tuple\nend",
    "    local new_tuple = {}\n    for i, v in ipairs(test_list) do\n        new_tuple[i] = v\n    end\n    new_tuple[#test_list + 1] = test_str\n    return new_tuple\nend",
    "    local tuple = {}\n    for i, v in ipairs(test_list) do\n        tuple[i] = v\n    end\n    tuple[#tuple + 1] = test_str\n    return tuple\nend",
    "    local tuple = {}\n    for i, v in ipairs(test_list) do\n        tuple[v] = test_str\n    end\n    return tuple\nend",
    "    local t = {}\n    for i, v in ipairs(test_list) do\n        t[i] = v\n    end\n    t[#t + 1] = test_str\n    return t\nend",
    "\tlocal t = {}\n\tfor i = 1, #test_list do\n\t\tt[i] = test_str\n\tend\n\treturn t\nend",
    "    local tuple = {}\n    for i = 1, #test_list do\n        tuple[test_list[i]] = test_str\n    end\n    return tuple\nend",
    "    local tuple = {}\n    for i = 1, #test_list do\n        tuple[i] = test_str\n    end\n    return tuple\nend"
  ]
}