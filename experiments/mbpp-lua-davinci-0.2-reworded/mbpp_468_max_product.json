{
  "name": "mbpp_468_max_product",
  "language": "lua",
  "prompt": "-- Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that table.\nlocal function max_product(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_product\n    lu.assertEquals(candidate({3, 100, 4, 5, 150, 6}), 3000)\n    lu.assertEquals(candidate({4, 42, 55, 68, 80}), 50265600)\n    lu.assertEquals(candidate({10, 22, 9, 33, 21, 50, 41, 60}), 2460)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product_ending_here = max_product_ending_here * arr[i]\n      min_product_ending_here = min(min_product_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = max(min_product_ending_here * arr[i], 1)\n      min_product_ending_here = temp * arr[i]\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for i = 1, #arr do\n    local x = arr[i]\n    if x > 0 then\n      max_product_ending_here = max_product_ending_here * x\n      min_product_ending_here = min(min_product_ending_here * x, 1)\n    elseif x == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = max(min_product_ending_here * x, 1)\n      min_product_ending_here = temp * x\n    end\n    if max_product_ending_here > max_product then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_prod = 1\n  local curr_prod = 1\n  for i = 1, #arr do\n    curr_prod = curr_prod * arr[i]\n    if curr_prod > max_prod then\n      max_prod = curr_prod\n    end\n  end\n  return max_prod\nend",
    "\tlocal max_product = 1\n\tlocal max_product_so_far = 1\n\tlocal min_product_so_far = 1\n\tlocal i = 1\n\twhile i <= #arr do\n\t\tif arr[i] > 0 then\n\t\t\tmax_product_so_far = max_product_so_far * arr[i]\n\t\t\tmin_product_so_far = math.min(min_product_so_far * arr[i], 1)\n\t\telseif arr[i] == 0 then\n\t\t\tmax_product_so_far = 1\n\t\t\tmin_product_so_far = 1\n\t\telse\n\t\t\tlocal temp = max_product_so_far\n\t\t\tmax_product_so_far = math.max(min_product_so_far * arr[i], 1)\n\t\t\tmin_product_so_far = temp * arr[i]\n\t\tend\n\t\tmax_product = math.max(max_product, max_product_so_far)\n\t\ti = i + 1\n\tend\n\treturn max_product\nend",
    "    local max_product = 1\n    local min_product = 1\n    local max_so_far = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            max_product = max_product * arr[i]\n            min_product = math.min(min_product * arr[i], 1)\n        elseif arr[i] == 0 then\n            max_product = 1\n            min_product = 1\n        else\n            local temp = max_product\n            max_product = math.max(min_product * arr[i], 1)\n            min_product = temp * arr[i]\n        end\n        if max_so_far < max_product then\n            max_so_far = max_product\n        end\n    end\n    return max_so_far\nend",
    "  local max_prod = 0\n  local max_arr = {}\n  local max_arr_len = 0\n  local max_arr_prod = 0\n  local arr_len = #arr\n  for i = 1, arr_len do\n    local prod = 1\n    local arr = {}\n    for j = i, arr_len do\n      prod = prod * arr[j]\n      arr[#arr + 1] = arr[j]\n      if prod > max_prod then\n        max_prod = prod\n        max_arr = arr\n        max_arr_len = #arr\n        max_arr_prod = prod\n      elseif prod == max_prod and #arr > max_arr_len then\n        max_arr = arr\n        max_arr_len = #arr\n        max_arr_prod = prod\n      end\n    end\n  end\n  return max_arr_prod, max_arr\nend",
    "  local max_prod = 0\n  local max_prod_arr = {}\n  local max_prod_arr_len = 0\n  local max_prod_arr_idx = 0\n  local max_prod_arr_idx_prev = 0\n  local max_prod_arr_idx_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n  local max_prod_arr_idx_prev_",
    "  local max_product = 0\n  local max_product_arr = {}\n  local max_product_arr_len = 0\n  local max_product_arr_len_index = 0\n  local max_product_arr_len_index_value = 0\n  local max_product_arr_len_index_value_product = 0\n  local max_product_arr_len_index_value_product_max = 0\n  local max_product_arr_len_index_value_product_max_index = 0\n  local max_product_arr_len_index_value_product_max_index_value = 0\n  local max_product_arr_len_index_value_product_max_index_value_product = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product_max = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product_max_index = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product_max_index_value = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product_max_index_value_product = 0\n  local max_product_arr_len_index_value_product_max_index_value_product_max_index_value_product_max_index_value_product_max = 0\n  local max_product_arr_len_index_value_product_max",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product_ending_here = max_product_ending_here * arr[i]\n      min_product_ending_here = math.min(min_product_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = math.max(min_product_ending_here * arr[i], 1)\n      min_product_ending_here = temp * arr[i]\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_product = 1\n  local max_product_end_here = 1\n  local min_product_end_here = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product_end_here = max_product_end_here * arr[i]\n      min_product_end_here = min(min_product_end_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_end_here = 1\n      min_product_end_here = 1\n    else\n      local temp = max_product_end_here\n      max_product_end_here = max(min_product_end_here * arr[i], 1)\n      min_product_end_here = temp * arr[i]\n    end\n    if max_product < max_product_end_here then\n      max_product = max_product_end_here\n    end\n  end\n  return max_product\nend",
    "  local max = arr[1]\n  local max_product = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max then\n      max = arr[i]\n    end\n    max_product = math.max(max_product, max * arr[i])\n  end\n  return max_product\nend",
    "  local max_prod = 1\n  local curr_prod = 1\n  for i = 1, #arr do\n    curr_prod = curr_prod * arr[i]\n    if curr_prod > max_prod then\n      max_prod = curr_prod\n    end\n  end\n  return max_prod\nend",
    "  local max_prod = 1\n  local prod = 1\n  local max_arr = {}\n  local min_arr = {}\n  for i = 1, #arr do\n    max_arr[i] = 1\n    min_arr[i] = 1\n  end\n  for i = 1, #arr do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        max_arr[i] = math.max(max_arr[i], min_arr[j] * arr[i])\n        min_arr[i] = math.min(min_arr[i], max_arr[j] * arr[i])\n      end\n    end\n    max_prod = math.max(max_prod, max_arr[i])\n  end\n  return max_prod\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  local n = #arr\n  for i = 1, n do\n    if arr[i] > 0 then\n      max_product_ending_here = max_product_ending_here * arr[i]\n      min_product_ending_here = math.min(min_product_ending_here * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = math.max(min_product_ending_here * arr[i], 1)\n      min_product_ending_here = temp * arr[i]\n    end\n    if max_product < max_product_ending_here then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_prod = 1\n  local max_prod_till = {}\n  local min_prod_till = {}\n  for i = 1, #arr do\n    max_prod_till[i] = arr[i]\n    min_prod_till[i] = arr[i]\n  end\n  for i = 2, #arr do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] then\n        local prod = max_prod_till[j] * arr[i]\n        if prod > max_prod_till[i] then\n          max_prod_till[i] = prod\n        end\n        prod = min_prod_till[j] * arr[i]\n        if prod < min_prod_till[i] then\n          min_prod_till[i] = prod\n        end\n      end\n    end\n    if max_prod_till[i] > max_prod then\n      max_prod = max_prod_till[i]\n    end\n  end\n  return max_prod\nend",
    "  local max = arr[1]\n  local max_product = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max then\n      max = arr[i]\n    else\n      max_product = max_product * arr[i]\n    end\n  end\n  return max_product\nend",
    "  local max_prod = 1\n  local prod = 1\n  for i = 1, #arr do\n    prod = prod * arr[i]\n    if prod > max_prod then\n      max_prod = prod\n    end\n  end\n  return max_prod\nend",
    "  local max_product = 1\n  local max_product_ending_here = 1\n  local min_product_ending_here = 1\n  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0 then\n      max_product_ending_here = max_product_ending_here * num\n      min_product_ending_here = min(min_product_ending_here * num, 1)\n    elseif num == 0 then\n      max_product_ending_here = 1\n      min_product_ending_here = 1\n    else\n      local temp = max_product_ending_here\n      max_product_ending_here = max(min_product_ending_here * num, 1)\n      min_product_ending_here = temp * num\n    end\n    if max_product_ending_here > max_product then\n      max_product = max_product_ending_here\n    end\n  end\n  return max_product\nend",
    "  local max_product = 1\n  local max_product_so_far = 1\n  local min_product_so_far = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      max_product_so_far = max_product_so_far * arr[i]\n      min_product_so_far = math.min(min_product_so_far * arr[i], 1)\n    elseif arr[i] == 0 then\n      max_product_so_far = 1\n      min_product_so_far = 1\n    else\n      local temp = max_product_so_far\n      max_product_so_far = math.max(min_product_so_far * arr[i], 1)\n      min_product_so_far = temp * arr[i]\n    end\n    if max_product < max_product_so_far then\n      max_product = max_product_so_far\n    end\n  end\n  return max_product\nend",
    "  local max_prod = 0\n  local len = #arr\n  local max_prod_arr = {}\n  for i = 1, len do\n    max_prod_arr[i] = arr[i]\n  end\n  for i = 1, len do\n    for j = 1, i - 1 do\n      if arr[i] > arr[j] and max_prod_arr[i] < max_prod_arr[j] * arr[i] then\n        max_prod_arr[i] = max_prod_arr[j] * arr[i]\n      end\n    end\n    if max_prod < max_prod_arr[i] then\n      max_prod = max_prod_arr[i]\n    end\n  end\n  return max_prod\nend"
  ]
}