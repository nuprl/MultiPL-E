{
  "name": "mbpp_66_pos_count",
  "language": "lua",
  "prompt": "-- Write a luathon function to count the number of positive numbers in a table.\nlocal function pos_count(list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pos_count\n    lu.assertEquals(candidate({1, -2, 3, -4}), 2)\n    lu.assertEquals(candidate({3, 4, 5, -1}), 3)\n    lu.assertEquals(candidate({1, 2, 3, 4}), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for i, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for i, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #list do\n    if list[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, v in pairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for i, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i = 1, #list do\n    if list[i] > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend",
    "  local count = 0\n  for i, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "  local count = 0\n  for _, v in ipairs(list) do\n    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
    "    local count = 0\n    for _, v in ipairs(list) do\n        if v > 0 then\n            count = count + 1\n        end\n    end\n    return count\nend"
  ]
}