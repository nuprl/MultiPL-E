{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "lua",
  "prompt": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpkw_go6.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgpkw_go6.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function sort_numeric_strings_helper(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, sort_numeric_strings_helper)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas0zidwu.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpas0zidwu.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sfdr9fy.lua:13: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmp4sfdr9fy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaq27sas.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwaq27sas.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare_numeric_strings(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaccwspa4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpaccwspa4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8y10rlvi.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    for i, num in ipairs(nums) do\n        nums_str[i] = tostring(num)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ssfowft.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ssfowft.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sfdr9fy.lua:13: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmp4sfdr9fy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaq27sas.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwaq27sas.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaq27sas.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwaq27sas.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare_numeric_strings(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaccwspa4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpaccwspa4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaq27sas.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwaq27sas.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        nums[#nums + 1] = tonumber(num_str)\n    end\n    table.sort(nums)\n    for i, num in ipairs(nums) do\n        nums_str[i] = tostring(num)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze7uthv3.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpze7uthv3.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpkw_go6.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgpkw_go6.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    for i, num in ipairs(nums) do\n        nums_str[i] = tostring(num)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhfa4fxr.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmphhfa4fxr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sfdr9fy.lua:13: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmp4sfdr9fy.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, v in ipairs(nums_str) do\n        table.insert(nums, tonumber(v))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, v in ipairs(nums) do\n        table.insert(nums_str, tostring(v))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwqewvq_.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpnwqewvq_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare_numeric_strings(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaccwspa4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpaccwspa4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbz87f5u.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmphbz87f5u.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbz87f5u.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmphbz87f5u.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, num_str in ipairs(nums_str) do\n        nums[i] = tonumber(num_str)\n    end\n    table.sort(nums)\n    for i, num in ipairs(nums) do\n        nums_str[i] = tostring(num)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmgtiezvt.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpmgtiezvt.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\tlocal function compare_numeric_strings(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend\n\ttable.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lwhlae2.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp8lwhlae2.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i = 1, #nums_str do\n        nums[i] = tonumber(nums_str[i])\n    end\n    table.sort(nums)\n    for i = 1, #nums_str do\n        nums_str[i] = tostring(nums[i])\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxefpup1w.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpxefpup1w.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare_numeric_strings(a, b)\n        local a_num = tonumber(a)\n        local b_num = tonumber(b)\n        if a_num == b_num then\n            return a < b\n        else\n            return a_num < b_num\n        end\n    end\n    table.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_em8_t2.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpb_em8_t2.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str_sorted = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str_sorted, tostring(num))\n    end\n    return nums_str_sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoetd2g7w.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpoetd2g7w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpkw_go6.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgpkw_go6.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsigk7.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpnzrsigk7.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzj6azd7.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmplzj6azd7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsigk7.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpnzrsigk7.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare_numeric_strings(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare_numeric_strings)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaccwspa4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpaccwspa4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsigk7.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpnzrsigk7.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, num_str in ipairs(nums_str) do\n    nums[i] = tonumber(num_str)\n  end\n  table.sort(nums)\n  for i, num in ipairs(nums) do\n    nums_str[i] = tostring(num)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97fholae.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmp97fholae.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for i, v in ipairs(nums_str) do\n        nums[i] = tonumber(v)\n    end\n    table.sort(nums)\n    for i, v in ipairs(nums) do\n        nums_str[i] = tostring(v)\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr28ysf0h.lua:17: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpr28ysf0h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbz87f5u.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmphbz87f5u.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, num_str in ipairs(nums_str) do\n        table.insert(nums, tonumber(num_str))\n    end\n    table.sort(nums)\n    local nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(nums_str, tostring(num))\n    end\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhwdbo0a.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpwhwdbo0a.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local function compare(a, b)\n    return tonumber(a) < tonumber(b)\n  end\n  table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1k9iim4.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpf1k9iim4.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n\ttable.sort(nums_str, function(a, b)\n\t\treturn tonumber(a) < tonumber(b)\n\tend)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpkw_go6.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgpkw_go6.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebjup4a.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpqebjup4a.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare_numeric_strings(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare_numeric_strings)\n    return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl391s858.lua:13: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpl391s858.lua:13: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b) return tonumber(a) < tonumber(b) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uon7b0b.lua:9: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_uon7b0b.lua:9: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, v in ipairs(nums_str) do\n    nums[#nums + 1] = tonumber(v)\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, v in ipairs(nums) do\n    nums_str[#nums_str + 1] = tostring(v)\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg95g1q3.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpyg95g1q3.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  table.sort(nums_str, function(a, b)\n    return tonumber(a) < tonumber(b)\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kg260hv.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmp_kg260hv.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, num_str in ipairs(nums_str) do\n    table.insert(nums, tonumber(num_str))\n  end\n  table.sort(nums)\n  local nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(nums_str, tostring(num))\n  end\n  return nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls7epk0k.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpls7epk0k.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for i, v in ipairs(nums_str) do\n    nums[i] = tonumber(v)\n  end\n  table.sort(nums)\n  for i, v in ipairs(nums) do\n    nums_str[i] = tostring(v)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzj6azd7.lua:16: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmplzj6azd7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n  local nums = {}\n  for _, str in ipairs(nums_str) do\n    table.insert(nums, tonumber(str))\n  end\n  table.sort(nums)\n  local sorted_nums_str = {}\n  for _, num in ipairs(nums) do\n    table.insert(sorted_nums_str, tostring(num))\n  end\n  return sorted_nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuekjy4_n.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmpuekjy4_n.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local function compare(a, b)\n        return tonumber(a) < tonumber(b)\n    end\n    table.sort(nums_str, compare)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_5mb33.lua:12: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpis_5mb33.lua:12: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    table.sort(nums_str, function(a, b)\n        return tonumber(a) < tonumber(b)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027765,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwvwx1cz.lua:11: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwvwx1cz.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to sort a given table of strings of numbers numerically. https://www.geeksforgeeks.org/luathon-sort-numeric-strings-in-a-table/\nlocal function sort_numeric_strings(nums_str)\n    local nums = {}\n    for _, str in ipairs(nums_str) do\n        table.insert(nums, tonumber(str))\n    end\n    table.sort(nums)\n    local sorted_nums_str = {}\n    for _, num in ipairs(nums) do\n        table.insert(sorted_nums_str, tostring(num))\n    end\n    return sorted_nums_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numeric_strings\n    lu.assertEquals(candidate({'4', '12', '45', '7', '0', '100', '200', '-12', '-500'}), {-500, -12, 0, 4, 7, 12, 45, 100, 200})\n    lu.assertEquals(candidate({'2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'}), {1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9})\n    lu.assertEquals(candidate({'1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'}), {1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123084,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h8_zpkj.lua:18: expected: {-500, -12, 0, 4, 7, 12, 45, 100, 200}\nactual: {\"-500\", \"-12\", \"0\", \"4\", \"7\", \"12\", \"45\", \"100\", \"200\"}\nstack traceback:\n\t/tmp/tmp2h8_zpkj.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}