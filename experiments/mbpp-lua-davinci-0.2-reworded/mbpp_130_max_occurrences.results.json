{
  "name": "mbpp_130_max_occurrences",
  "language": "lua",
  "prompt": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = 0\n    for _, num2 in ipairs(nums) do\n      if num == num2 then\n        count = count + 1\n      end\n    end\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_4fqlg1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc_4fqlg1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7l5ofok.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpk7l5ofok.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj8s7kybi.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_item = nil\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_item = num\n    end\n  end\n  return max_item, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaos_axi.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvaos_axi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp923xo1es.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp923xo1es.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max then\n            max = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr75jz4c.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpjr75jz4c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        if nums[num] > max then\n            max = nums[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprufgzr2z.lua:17: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmprufgzr2z.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local count = {}\n  for _, num in ipairs(nums) do\n    count[num] = (count[num] or 0) + 1\n  end\n  local max = 0\n  local max_num = nil\n  for num, num_count in pairs(count) do\n    if num_count > max then\n      max = num_count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3mr67a1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc3mr67a1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = occurrences[num] and occurrences[num] + 1 or 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi6a5ggen.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_num = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7gzw9b_3.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6n06juwl.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp6n06juwl.lua:6: in local 'candidate'\n\t/tmp/tmp6n06juwl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_num, max_count = nil, 0\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_occurrence = 0\n  local max_num\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_occurrence = occurrence\n      max_num = num\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyflt59s.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsyflt59s.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzjr9mt8.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvzjr9mt8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "",
      "stderr": "lua: /tmp/tmpduvmetqe.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = occurrences[num] and occurrences[num] + 1 or 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fcizq8d.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp4fcizq8d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62rzb8c2.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp62rzb8c2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local count = {}\n  for _, n in ipairs(nums) do\n    count[n] = (count[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_item = nil\n  for item, c in pairs(count) do\n    if c > max_count then\n      max_count = c\n      max_item = item\n    end\n  end\n  return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeiz0i3ar.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpeiz0i3ar.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n\tlocal counts = {}\n\tfor _, num in ipairs(nums) do\n\t\tcounts[num] = (counts[num] or 0) + 1\n\tend\n\tlocal max, max_num = 0\n\tfor num, count in pairs(counts) do\n\t\tif count > max then\n\t\t\tmax = count\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kx8xdqi.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp7kx8xdqi.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7l5ofok.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpk7l5ofok.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_occurrence = 0\n  local max_num = nil\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_occurrence = occurrence\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rchzwb4.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp7rchzwb4.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_4fqlg1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc_4fqlg1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj8s7kybi.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count, max_num = 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bqxpdi3.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp9bqxpdi3.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(nums) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx1z__nw.lua:17: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpwx1z__nw.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max = 0\n    local max_num = nil\n    for num, count in pairs(nums) do\n        if count > max then\n            max = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9ust197.lua:17: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpz9ust197.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6n06juwl.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp6n06juwl.lua:6: in local 'candidate'\n\t/tmp/tmp6n06juwl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy2o_nz8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmphy2o_nz8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max_count = 0\n  local max_num = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7gzw9b_3.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_num, max_count = nil, 0\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5rdjec4.lua:5: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmpd5rdjec4.lua:5: in local 'candidate'\n\t/tmp/tmpd5rdjec4.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local count = {}\n    for _, num in ipairs(nums) do\n        count[num] = (count[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, c in pairs(count) do\n        if c > max_count then\n            max_count = c\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8bei4bo.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpj8bei4bo.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_4fqlg1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc_4fqlg1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(nums) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp386zl1zs.lua:17: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmp386zl1zs.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max then\n      max = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4rdz6eq7.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp4rdz6eq7.lua:6: in local 'candidate'\n\t/tmp/tmp4rdz6eq7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6n06juwl.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp6n06juwl.lua:6: in local 'candidate'\n\t/tmp/tmp6n06juwl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local count = {}\n  for _, num in ipairs(nums) do\n    count[num] = (count[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, c in pairs(count) do\n    if c > max_count then\n      max_count = c\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnjp0tnt.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmprnjp0tnt.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max then\n      max = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4rdz6eq7.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp4rdz6eq7.lua:6: in local 'candidate'\n\t/tmp/tmp4rdz6eq7.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, n in ipairs(nums) do\n        counts[n] = (counts[n] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for n, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = n\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9gv9029.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpy9gv9029.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj8s7kybi.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local count = {}\n  for _, num in ipairs(nums) do\n    count[num] = (count[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, num_count in pairs(count) do\n    if num_count > max_count then\n      max_count = num_count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m4_8o3j.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp7m4_8o3j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count, max_num = 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzblqdxb5.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpzblqdxb5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count, max_num = 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn3zgiw7.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpnn3zgiw7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  local max = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max then\n      max = counts[num]\n      max_num = num\n    end\n  end\n  return max_num, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6n06juwl.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp6n06juwl.lua:6: in local 'candidate'\n\t/tmp/tmp6n06juwl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n    if occurrences[num] > max_count then\n      max_num, max_count = num, occurrences[num]\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = 0\n    for _, n in ipairs(nums) do\n      if n == num then\n        count = count + 1\n      end\n    end\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, n in ipairs(nums) do\n    counts[n] = (counts[n] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s6yie9g.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp0s6yie9g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = 0, 0\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl6lowi1_.lua:5: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmpl6lowi1_.lua:5: in local 'candidate'\n\t/tmp/tmpl6lowi1_.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, v in ipairs(nums) do\n    counts[v] = (counts[v] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0aguv8vc.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy2o_nz8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmphy2o_nz8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr75jz4c.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpjr75jz4c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n\tlocal counts = {}\n\tfor _, num in ipairs(nums) do\n\t\tcounts[num] = (counts[num] or 0) + 1\n\tend\n\tlocal max_num, max_count = nil, 0\n\tfor num, count in pairs(counts) do\n\t\tif count > max_count then\n\t\t\tmax_num, max_count = num, count\n\t\tend\n\tend\n\treturn max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrqchite.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpcrqchite.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr75jz4c.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpjr75jz4c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for _, num in ipairs(nums) do\n    local count = occurrences(nums, num)\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5rdjec4.lua:5: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmpd5rdjec4.lua:5: in local 'candidate'\n\t/tmp/tmpd5rdjec4.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_num, max_count = nil, 0\n  for num, count in pairs(nums) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_qh4_sj.lua:15: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpp_qh4_sj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        if counts[num] == nil then\n            counts[num] = 1\n        else\n            counts[num] = counts[num] + 1\n        end\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7l5ofok.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpk7l5ofok.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjr75jz4c.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpjr75jz4c.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count, max_num = 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count, max_num = count, num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cyahpt2.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp8cyahpt2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_occurrence = nil, 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_num, max_occurrence = num, occurrence\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7l5ofok.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpk7l5ofok.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82azgo7m.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp82azgo7m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num = nil\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n    if counts[num] > max_count then\n      max_count = counts[num]\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        local count = occurrences(nums, num)\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hic9q9s.lua:6: attempt to call a nil value (global 'occurrences')\nstack traceback:\n\t/tmp/tmp4hic9q9s.lua:6: in local 'candidate'\n\t/tmp/tmp4hic9q9s.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp923xo1es.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp923xo1es.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n\tlocal counts = {}\n\tfor _, v in ipairs(nums) do\n\t\tcounts[v] = (counts[v] or 0) + 1\n\tend\n\tlocal max_count = 0\n\tlocal max_num = nil\n\tfor k, v in pairs(counts) do\n\t\tif v > max_count then\n\t\t\tmax_count = v\n\t\t\tmax_num = k\n\t\tend\n\tend\n\treturn max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp813roy2t.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp813roy2t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_num, max_count = nil, 0\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62rzb8c2.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp62rzb8c2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxf39bz6_.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_num, max_count = nil, 0\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, num2 in ipairs(nums) do\n            if num == num2 then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8akfk7i.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpq8akfk7i.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max = 0\n    local max_num = nil\n    for num, count in pairs(occurrences) do\n        if count > max then\n            max = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdk12tim7.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpdk12tim7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_num, max_count = nil, 0\n    for num, count in pairs(nums) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc000m51x.lua:15: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpc000m51x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local max_count = 0\n  local max_num\n  for num, count in pairs(nums) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrxgrzlj.lua:17: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpcrxgrzlj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(occurrences) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzjr9mt8.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpvzjr9mt8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_count = 0\n    local max_item = nil\n    for _, num in ipairs(nums) do\n        local count = 0\n        for _, other in ipairs(nums) do\n            if num == other then\n                count = count + 1\n            end\n        end\n        if count > max_count then\n            max_count = count\n            max_item = num\n        end\n    end\n    return max_item\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num = num\n      max_count = count\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt40kckot.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpt40kckot.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\n  local max_occurrence = 0\n  local max_num = 0\n  for num, occurrence in pairs(occurrences) do\n    if occurrence > max_occurrence then\n      max_occurrence = occurrence\n      max_num = num\n    end\n  end\n  return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c2gxf77.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp0c2gxf77.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8akfk7i.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpq8akfk7i.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    local max_count = 0\n    local max_num = nil\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n        if counts[num] > max_count then\n            max_count = counts[num]\n            max_num = num\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc7_24n8.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpsc7_24n8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_4fqlg1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc_4fqlg1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local occurrences = {}\n  for _, num in ipairs(nums) do\n    occurrences[num] = (occurrences[num] or 0) + 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj8s7kybi.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num = nil\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17rxd79z.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp17rxd79z.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jqdrb_k.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp_jqdrb_k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_num, max_count = nil, 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_num, max_count = num, count\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8akfk7i.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpq8akfk7i.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count = 0\n  local max_num = nil\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii863fqc.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpii863fqc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n  local counts = {}\n  for _, num in ipairs(nums) do\n    counts[num] = (counts[num] or 0) + 1\n  end\n  local max_count, max_num = 0\n  for num, count in pairs(counts) do\n    if count > max_count then\n      max_count = count\n      max_num = num\n    end\n  end\n  return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bqxpdi3.lua:21: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp9bqxpdi3.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoc_xkfa6.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local occurrences = {}\n    for _, num in ipairs(nums) do\n        occurrences[num] = (occurrences[num] or 0) + 1\n    end\n    local max_num, max_occurrence = nil, 0\n    for num, occurrence in pairs(occurrences) do\n        if occurrence > max_occurrence then\n            max_num, max_occurrence = num, occurrence\n        end\n    end\n    return max_num, max_occurrence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp923xo1es.lua:20: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmp923xo1es.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local max_num, max_count = nil, 0\n    for num, count in pairs(nums) do\n        if count > max_count then\n            max_num, max_count = num, count\n        end\n    end\n    return max_num, max_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122606,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc000m51x.lua:15: expected: 2, actual: 6\nstack traceback:\n\t/tmp/tmpc000m51x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the item with maximum frequency in a given table.\nlocal function max_occurrences(nums)\n    local counts = {}\n    for _, num in ipairs(nums) do\n        counts[num] = (counts[num] or 0) + 1\n    end\n    local max_count = 0\n    local max_num\n    for num, count in pairs(counts) do\n        if count > max_count then\n            max_count = count\n            max_num = num\n        end\n    end\n    return max_num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_occurrences\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), 2)\n    lu.assertEquals(candidate({2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), 8)\n    lu.assertEquals(candidate({10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), 20)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027696,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_4fqlg1.lua:22: expected: 8, actual: 7\nstack traceback:\n\t/tmp/tmpc_4fqlg1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}