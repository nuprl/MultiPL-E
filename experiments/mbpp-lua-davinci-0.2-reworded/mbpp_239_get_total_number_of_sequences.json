{
  "name": "mbpp_239_get_total_number_of_sequences",
  "language": "lua",
  "prompt": "-- Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nlocal function get_total_number_of_sequences(m, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_total_number_of_sequences\n    lu.assertEquals(candidate(10, 4), 4)\n    lu.assertEquals(candidate(5, 2), 6)\n    lu.assertEquals(candidate(16, 3), 84)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local count = 0\n  local function recurse(current_number, current_length)\n    if current_length == n then\n      count = count + 1\n      return\n    end\n    for i = current_number * 2, m do\n      recurse(i, current_length + 1)\n    end\n  end\n  recurse(1, 1)\n  return count\nend",
    "  local total_number_of_sequences = 0\n  local current_number_of_sequences = 1\n  local previous_number_of_sequences = 1\n  for i = 1, n do\n    total_number_of_sequences = total_number_of_sequences + current_number_of_sequences\n    local new_number_of_sequences = 0\n    for j = 2 * i, m do\n      new_number_of_sequences = new_number_of_sequences + previous_number_of_sequences\n    end\n    previous_number_of_sequences = current_number_of_sequences\n    current_number_of_sequences = new_number_of_sequences\n  end\n  return total_number_of_sequences\nend",
    "  local dp = {}\n  for i = 1, n do\n    dp[i] = {}\n    for j = 1, m do\n      dp[i][j] = 0\n    end\n  end\n  for i = 1, m do\n    dp[1][i] = 1\n  end\n  for i = 2, n do\n    for j = 1, m do\n      for k = 2 * j, m do\n        dp[i][j] = dp[i][j] + dp[i - 1][k]\n      end\n    end\n  end\n  local result = 0\n  for i = 1, m do\n    result = result + dp[n][i]\n  end\n  return result\nend",
    "  local function get_total_number_of_sequences_helper(m, n, current_number)\n    if n == 0 then\n      return 1\n    end",
    "  local result = 0\n  local function helper(m, n, prev)\n    if n == 0 then\n      result = result + 1\n      return\n    end\n    for i = prev * 2, m do\n      helper(m, n - 1, i)\n    end\n  end\n  helper(m, n, 1)\n  return result\nend",
    "  local total = 0\n  for i = 1, m do\n    total = total + get_number_of_sequences(m, n, i)\n  end\n  return total\nend",
    "  local function get_total_number_of_sequences_helper(m, n, prev)\n    if n == 0 then\n      return 1\n    end\n    local total = 0\n    for i = prev * 2, m do\n      total = total + get_total_number_of_sequences_helper(m, n - 1, i)\n    end\n    return total\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend",
    "  local dp = {}\n  for i = 1, m do\n    dp[i] = 1\n  end\n  for i = 2, n do\n    for j = 2, m do\n      dp[j] = dp[j] + dp[j - 1]\n    end\n  end\n  return dp[m]\nend",
    "  local total_number_of_sequences = 0\n  local current_sequence = {}",
    "  local function get_total_number_of_sequences_helper(m, n, current_number)\n    if n == 0 then\n      return 1\n    end",
    "  local total = 0\n  local function helper(m, n, prev)\n    if n == 0 then\n      total = total + 1\n      return\n    end\n    for i = prev * 2, m do\n      helper(m, n - 1, i)\n    end\n  end\n  helper(m, n, 1)\n  return total\nend",
    "  local function get_total_number_of_sequences_helper(m, n, current_number)\n    if n == 0 then\n      return 1\n    end\n    local total_number_of_sequences = 0\n    for i = current_number, m do\n      total_number_of_sequences = total_number_of_sequences + get_total_number_of_sequences_helper(m, n - 1, i * 2)\n    end\n    return total_number_of_sequences\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend",
    "  local function get_total_number_of_sequences_helper(m, n, prev)\n    if n == 0 then\n      return 1\n    end\n    local total = 0\n    for i = prev * 2, m do\n      total = total + get_total_number_of_sequences_helper(m, n - 1, i)\n    end\n    return total\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend",
    "  local function get_number_of_sequences_ending_with_last_element(m, n, last_element)\n    if n == 1 then\n      return 1\n    end\n    local total_number_of_sequences = 0\n    for i = last_element * 2, m do\n      total_number_of_sequences = total_number_of_sequences + get_number_of_sequences_ending_with_last_element(m, n - 1, i)\n    end\n    return total_number_of_sequences\n  end\n  return get_number_of_sequences_ending_with_last_element(m, n, 1)\nend",
    "  local function get_total_number_of_sequences_helper(m, n, prev)\n    if n == 0 then\n      return 1\n    end\n    local total = 0\n    for i = prev * 2, m do\n      total = total + get_total_number_of_sequences_helper(m, n - 1, i)\n    end\n    return total\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend",
    "  local function get_total_number_of_sequences_helper(m, n, current_number, current_length)\n    if current_length == n then\n      return 1\n    end",
    "  local function get_total_number_of_sequences_helper(m, n, prev_element)\n    if n == 0 then\n      return 1\n    end\n    local total_number_of_sequences = 0\n    for i = prev_element * 2, m do\n      total_number_of_sequences = total_number_of_sequences + get_total_number_of_sequences_helper(m, n - 1, i)\n    end\n    return total_number_of_sequences\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend",
    "    local total = 0\n    local function helper(m, n, prev)\n        if n == 0 then\n            total = total + 1\n            return\n        end\n        for i = prev * 2, m do\n            helper(m, n - 1, i)\n        end\n    end\n    helper(m, n, 1)\n    return total\nend",
    "    local total = 0\n    for i = 2, m do\n        total = total + get_number_of_sequences(m, n, i)\n    end\n    return total\nend",
    "  local function get_total_number_of_sequences_helper(m, n, prev_num)\n    if n == 0 then\n      return 1\n    end\n    local total = 0\n    for i = prev_num * 2, m do\n      total = total + get_total_number_of_sequences_helper(m, n - 1, i)\n    end\n    return total\n  end\n  return get_total_number_of_sequences_helper(m, n, 1)\nend"
  ]
}