{
  "name": "mbpp_56_checks",
  "language": "lua",
  "prompt": "-- Write a luathon function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = checks\n    lu.assertEquals(candidate(70), false)\n    lu.assertEquals(candidate(23), false)\n    lu.assertEquals(candidate(73), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\tif n == 2*rev - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == (rev * 2) - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal n1 = n\n\tlocal n2 = 0\n\twhile n1 > 0 do\n\t\tn2 = n2 * 10 + n1 % 10\n\t\tn1 = math.floor(n1 / 10)\n\tend\n\treturn n == n2 * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn (n == 2*r - 1)\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local reverse = 0\n  local m = n\n  while m > 0 do\n    reverse = reverse * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == reverse * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  if n == 2 * rev - 1 then\n    return true\n  else\n    return false\n  end\nend",
    "    local r = 0\n    local t = n\n    while t > 0 do\n        r = r * 10 + t % 10\n        t = math.floor(t / 10)\n    end\n    return n == r * 2 - 1\nend",
    "  local reverse = 0\n  local temp = n\n  while temp > 0 do\n    reverse = reverse * 10 + temp % 10\n    temp = math.floor(temp / 10)\n  end\n  return n == reverse * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal reverse = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\treverse = reverse * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == reverse * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "    local rev = 0\n    local nn = n\n    while nn > 0 do\n        rev = rev * 10 + nn % 10\n        nn = math.floor(nn / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "  local rev = tonumber(string.reverse(n))\n  if n == 2 * rev - 1 then\n    return true\n  else\n    return false\n  end\nend"
  ]
}