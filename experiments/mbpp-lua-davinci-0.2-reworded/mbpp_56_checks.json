{
  "name": "mbpp_56_checks",
  "language": "lua",
  "prompt": "-- Write a luathon function to check if a given number is one less than twice its reverse.\nlocal function checks(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = checks\n    lu.assertEquals(candidate(70), false)\n    lu.assertEquals(candidate(23), false)\n    lu.assertEquals(candidate(73), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\tif n == 2*rev - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == (rev * 2) - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal n1 = n\n\tlocal n2 = 0\n\twhile n1 > 0 do\n\t\tn2 = n2 * 10 + n1 % 10\n\t\tn1 = math.floor(n1 / 10)\n\tend\n\treturn n == n2 * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn (n == 2*r - 1)\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local reverse = 0\n  local m = n\n  while m > 0 do\n    reverse = reverse * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == reverse * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  if n == 2 * rev - 1 then\n    return true\n  else\n    return false\n  end\nend",
    "    local r = 0\n    local t = n\n    while t > 0 do\n        r = r * 10 + t % 10\n        t = math.floor(t / 10)\n    end\n    return n == r * 2 - 1\nend",
    "  local reverse = 0\n  local temp = n\n  while temp > 0 do\n    reverse = reverse * 10 + temp % 10\n    temp = math.floor(temp / 10)\n  end\n  return n == reverse * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal reverse = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\treverse = reverse * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == reverse * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "    local rev = 0\n    local nn = n\n    while nn > 0 do\n        rev = rev * 10 + nn % 10\n        nn = math.floor(nn / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "  local rev = tonumber(string.reverse(n))\n  if n == 2 * rev - 1 then\n    return true\n  else\n    return false\n  end\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return (n == 2*rev - 1)\nend",
    "  local r = 0\n  local t = n\n  while t > 0 do\n    r = r * 10 + t % 10\n    t = math.floor(t / 10)\n  end\n  return n == r * 2 - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*rev - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == (rev * 2) - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "    local rev = tonumber(string.reverse(tostring(n)))\n    return n == 2 * rev - 1\nend",
    "\tlocal r = 0\n\tlocal nn = n\n\twhile nn > 0 do\n\t\tr = r * 10 + nn % 10\n\t\tnn = math.floor(nn / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "    local r = 0\n    local t = n\n    while t > 0 do\n        r = r * 10 + t % 10\n        t = math.floor(t / 10)\n    end\n    return n == r * 2 - 1\nend",
    "\tlocal r = tonumber(n:reverse())\n\treturn n == 2 * r - 1\nend",
    "  local s = tostring(n)\n  local r = string.reverse(s)\n  return n == 2 * tonumber(r) - 1\nend",
    "  return n == (2 * tonumber(string.reverse(tostring(n))) - 1)\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal rev = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\trev = rev * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == rev + 1\nend",
    "    local s = tostring(n)\n    local r = string.reverse(s)\n    local d = tonumber(s) - tonumber(r)\n    return d == 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == rev * 2 - 1\nend",
    "\tlocal r = 0\n\tlocal t = n\n\twhile t > 0 do\n\t\tr = r * 10 + t % 10\n\t\tt = math.floor(t / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal r = 0\n\tlocal n1 = n\n\twhile n1 > 0 do\n\t\tr = r * 10 + n1 % 10\n\t\tn1 = math.floor(n1 / 10)\n\tend\n\treturn n == r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal r = tonumber(n:reverse())\n\treturn n == 2*r - 1\nend",
    "\tlocal r = 0\n\tlocal m = n\n\twhile m > 0 do\n\t\tr = r * 10 + m % 10\n\t\tm = math.floor(m / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "\tlocal rev = tonumber(tostring(n):reverse())\n\treturn n == 2*rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "    local rev = 0\n    local num = n\n    while num > 0 do\n        rev = rev * 10 + num % 10\n        num = math.floor(num / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(n:reverse())\n\treturn n == 2 * r - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\tif n == (2*rev - 1) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "\tlocal reverse = 0\n\tlocal num = n\n\twhile num > 0 do\n\t\treverse = reverse * 10 + num % 10\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn n == reverse * 2 - 1\nend",
    "\tlocal r = 0\n\tlocal m = n\n\twhile m > 0 do\n\t\tr = r * 10 + m % 10\n\t\tm = math.floor(m / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "  local r = tonumber(n:reverse())\n  return n == 2*r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal r = 0\n\tlocal t = n\n\twhile t > 0 do\n\t\tr = r * 10 + t % 10\n\t\tt = math.floor(t / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "\tlocal rev = 0\n\tlocal num = n\n\twhile num > 0 do\n\t\trev = rev * 10 + num % 10\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn n == rev * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local rev = 0\n    local temp = n\n    while temp > 0 do\n        rev = rev * 10 + temp % 10\n        temp = math.floor(temp / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal rev = string.reverse(n)\n\tlocal num = tonumber(n)\n\tlocal revnum = tonumber(rev)\n\tif num == revnum then\n\t\treturn true\n\telseif num == (revnum * 2) - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == rev * 2 - 1\nend",
    "\tlocal r = 0\n\tlocal t = n\n\twhile t > 0 do\n\t\tr = r * 10 + t % 10\n\t\tt = math.floor(t / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal n1 = n\n\tlocal n2 = 0\n\twhile n1 > 0 do\n\t\tn2 = n2 * 10 + n1 % 10\n\t\tn1 = math.floor(n1 / 10)\n\tend\n\treturn n == n2 * 2 - 1\nend",
    "  local r = tonumber(n:reverse())\n  return n == 2 * r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2*rev - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    if n == 2*r - 1 then\n        return true\n    else\n        return false\n    end\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local rev = 0\n    local temp = n\n    while temp > 0 do\n        rev = rev * 10 + temp % 10\n        temp = math.floor(temp / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "    local rev = 0\n    local temp = n\n    while temp > 0 do\n        rev = rev * 10 + temp % 10\n        temp = math.floor(temp / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal n1 = n - 1\n\tlocal n2 = n1 / 2\n\tlocal n3 = tostring(n2)\n\tlocal n4 = string.reverse(n3)\n\tlocal n5 = tonumber(n4)\n\tif n2 == n5 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local rev = 0\n  local temp = n\n  while temp > 0 do\n    rev = rev * 10 + temp % 10\n    temp = math.floor(temp / 10)\n  end\n  return n == rev + 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(n))\n  return n == (rev * 2) - 1\nend",
    "  local n1 = n\n  local n2 = 0\n  while n1 > 0 do\n    n2 = n2 * 10 + n1 % 10\n    n1 = math.floor(n1 / 10)\n  end\n  return n == n2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "    local rev = tonumber(string.reverse(tostring(n)))\n    return n == 2 * rev - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal rev = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\trev = rev * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == rev + rev - 1\nend",
    "\tlocal r = n % 10\n\tn = (n - r) / 10\n\twhile n > 0 do\n\t\tr = r * 10 + n % 10\n\t\tn = (n - n % 10) / 10\n\tend\n\treturn r == n * 2 - 1\nend",
    "    local rev = 0\n    local num = n\n    while num > 0 do\n        rev = rev * 10 + num % 10\n        num = math.floor(num / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return (n == 2 * r - 1)\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*rev - 1\nend",
    "    local r = tonumber(n:reverse())\n    return n == 2*r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "    local rev = 0\n    local temp = n\n    while temp > 0 do\n        rev = rev * 10 + (temp % 10)\n        temp = math.floor(temp / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "    local r = 0\n    local m = n\n    while m > 0 do\n        r = r * 10 + m % 10\n        m = math.floor(m / 10)\n    end\n    return n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "\tlocal rev = 0\n\tlocal num = n\n\twhile num > 0 do\n\t\trev = rev * 10 + num % 10\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn n == rev * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\tif n == (rev * 2) - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "\tlocal n1 = n\n\tlocal n2 = 0\n\twhile n1 > 0 do\n\t\tn2 = n2 * 10 + n1 % 10\n\t\tn1 = math.floor(n1 / 10)\n\tend\n\treturn n == n2 - 1 or n == n2 + 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*rev - 1\nend",
    "\tlocal rev = tonumber(string.reverse(n))\n\tif n == rev * 2 - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local rev = tonumber(string.reverse(tostring(n)))\n    if n == 2 * rev - 1 then\n        return true\n    else\n        return false\n    end\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\tif n == 2 * r - 1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2*rev - 1\nend",
    "  local r = 0\n  local m = n\n  while m > 0 do\n    r = r * 10 + m % 10\n    m = math.floor(m / 10)\n  end\n  return n == r * 2 - 1\nend",
    "\tlocal rev = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\trev = rev * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == rev + 1\nend",
    "    local s = tostring(n)\n    local r = string.reverse(s)\n    local nr = tonumber(r)\n    return n == 2 * nr - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2*rev - 1\nend",
    "\tlocal m = n\n\tlocal r = 0\n\twhile m > 0 do\n\t\tr = r * 10 + m % 10\n\t\tm = math.floor(m / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "    local s = tostring(n)\n    local r = string.reverse(s)\n    local m = tonumber(r)\n    return n == 2*m - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2*rev - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = 0\n\tlocal nn = n\n\twhile nn > 0 do\n\t\tr = r * 10 + nn % 10\n\t\tnn = math.floor(nn / 10)\n\tend\n\treturn n == r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "    local r = 0\n    local nn = n\n    while nn > 0 do\n        r = r * 10 + nn % 10\n        nn = math.floor(nn / 10)\n    end\n    return n == r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "    local rev = 0\n    local num = n\n    while num > 0 do\n        rev = rev * 10 + num % 10\n        num = math.floor(num / 10)\n    end\n    return n == rev * 2 - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "  local rev = 0\n  local num = n\n  while num > 0 do\n    rev = rev * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == rev * 2 - 1\nend",
    "\tlocal r = reverse(n)\n\treturn n == 2*r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2*r - 1\nend",
    "  local rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local s = tostring(n)\n  local r = s:reverse()\n  local m = tonumber(r)\n  return n == 2 * m - 1\nend",
    "\tlocal s = tostring(n)\n\tlocal r = s:reverse()\n\tlocal d = tonumber(r)\n\treturn n == 2*d - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "\tlocal rev = 0\n\tlocal temp = n\n\twhile temp > 0 do\n\t\trev = rev * 10 + temp % 10\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn n == rev + rev - 1\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local reverse = 0\n    local temp = n\n    while (temp > 0) do\n        reverse = reverse * 10 + temp % 10\n        temp = math.floor(temp / 10)\n    end\n    return (n == reverse + reverse)\nend",
    "\tlocal r = tonumber(string.reverse(tostring(n)))\n\treturn n == 2*r - 1\nend",
    "    local rev = tonumber(string.reverse(tostring(n)))\n    return n == 2 * rev - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == r * 2 - 1\nend",
    "\tlocal rev = tonumber(string.reverse(tostring(n)))\n\treturn n == 2 * rev - 1\nend",
    "  return n == (n % 10) * 2 - 1\nend",
    "\tlocal r = 0\n\tlocal t = n\n\twhile t > 0 do\n\t\tr = r * 10 + t % 10\n\t\tt = math.floor(t / 10)\n\tend\n\treturn n == r - 1\nend",
    "  local reverse = 0\n  local num = n\n  while num > 0 do\n    reverse = reverse * 10 + num % 10\n    num = math.floor(num / 10)\n  end\n  return n == reverse * 2 - 1\nend",
    "  local n_rev = tonumber(string.reverse(tostring(n)))\n  return n == 2 * n_rev - 1\nend",
    "  local s = tostring(n)\n  local r = string.reverse(s)\n  return n == 2 * tonumber(r) - 1\nend",
    "\tlocal n1 = n\n\tlocal n2 = 0\n\twhile n1 > 0 do\n\t\tn2 = n2*10 + n1%10\n\t\tn1 = math.floor(n1/10)\n\tend\n\treturn n == n2*2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "    local r = tonumber(string.reverse(tostring(n)))\n    return n == 2 * r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "  local r = tonumber(n:reverse())\n  return n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2 * r - 1\nend",
    "\tlocal r = 0\n\tlocal m = n\n\twhile m > 0 do\n\t\tr = r * 10 + m % 10\n\t\tm = math.floor(m / 10)\n\tend\n\treturn n == r * 2 - 1\nend",
    "  local r = tonumber(string.reverse(tostring(n)))\n  return n == 2*r - 1\nend"
  ]
}