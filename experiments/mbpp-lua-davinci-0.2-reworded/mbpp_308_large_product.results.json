{
  "name": "mbpp_308_large_product",
  "language": "lua",
  "prompt": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(nums1, nums2)\n    local i, j = 1, 1\n    local res = {}\n    while i <= #nums1 and j <= #nums2 do\n      if compare(nums1[i], nums2[j]) then\n        res[#res + 1] = nums1[i]\n        i = i + 1\n      else\n        res[#res + 1] = nums2[j]\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      res[#res + 1] = nums1[i]\n      i = i + 1\n    end\n    while j <= #nums2 do\n      res[#res + 1] = nums2[j]\n      j = j + 1\n    end\n    return res\n  end\n  local function helper(nums1, nums2)\n    if #nums1 == 0 or #nums2 == 0 then return {} end\n    if #nums1 == 1 then\n      local res = {}\n      for i = 1, #nums2 do\n        res[#res + 1] = {nums1[1], nums2[i]}\n      end\n      return res\n    end\n    local mid = math.floor(#nums1 / 2)\n    local left = helper(nums1:sub(1, mid), nums2)\n    local right = helper(nums1:sub(mid + 1), nums2)\n    return merge(left, right)\n  end\n  local res = helper(nums1, nums2)\n  local res_n = {}\n  for i = 1, N do\n    res_n[#res_n + 1] = res[i]\n  end\n  return res_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61fk7tq6.lua:38: attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmp61fk7tq6.lua:38: in function 'helper'\n\t/tmp/tmp61fk7tq6.lua:42: in function 'candidate'\n\t/tmp/tmp61fk7tq6.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal n1, n2 = #nums1, #nums2\n\tlocal i, j = 1, 1\n\tlocal max_nums1, max_nums2 = {}, {}\n\tlocal max_nums1_len, max_nums2_len = 0, 0\n\tlocal max_nums1_i, max_nums2_i = 0, 0\n\tlocal max_nums1_j, max_nums2_j = 0, 0\n\tlocal max_nums1_val, max_nums2_val = 0, 0\n\tlocal max_nums1_val_i, max_nums2_val_i = 0, 0\n\tlocal max_nums1_val_j, max_nums2_val_j = 0, 0\n\tlocal max_nums1_val_prev, max_nums2_val_prev = 0, 0\n\tlocal max_nums1_val_prev_i, max_nums2_val_prev_i = 0, 0\n\tlocal max_nums1_val_prev_j, max_nums2_val_prev_j = 0, 0\n\tlocal max_nums1_val_prev_prev, max_nums2_val_prev_prev = 0, 0\n\tlocal max_nums1_val_prev_prev_i, max_nums2_val_prev_prev_i = 0, 0\n\tlocal max_nums1_val_prev_prev_j, max_nums2_val_prev_prev_j = 0, 0\n\tlocal max_nums1_val_prev_prev_prev, max_nums2_val_prev_prev_prev = 0, 0\n\tlocal max_nums1_val_prev_prev_prev_i, max_nums2_val_prev_prev_prev_i = 0, 0\n\tlocal max_nums1_val_prev_prev_prev_j, max_nums2_val_prev_prev_prev_j = 0, 0\n\tlocal max_nums1_val_prev_prev_prev_prev, max_nums2_val_prev_prev_prev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "",
      "stderr": "lua: /tmp/tmp40dj280o.lua:31: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local N = N or 1\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local product = nums1[i] * nums2[j]\n            if #products < N then\n                table.insert(products, product)\n            else\n                local min_product = math.min(unpack(products))\n                if product > min_product then\n                    for k = 1, #products do\n                        if products[k] == min_product then\n                            products[k] = product\n                            break\n                        end\n                    end\n                end\n            end\n        end\n    end\n    return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_llax80x.lua:29: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmp_llax80x.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local max_products = {}\n  local max_product = 0\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if product > max_product then\n        max_product = product\n        max_products[#max_products + 1] = {nums1[i], nums2[j]}\n      end\n    end\n  end\n  return max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6p1qfjj.lua:20: expected: \n{60, 54, 50}\nactual: \n{\n    {1, 3},\n    {1, 6},\n    {1, 8},\n    {1, 9},\n    {1, 10},\n    {2, 6},\n    {2, 8},\n    {2, 9},\n    {2, 10},\n    {3, 8},\n    {3, 9},\n    {3, 10},\n    {4, 8},\n    {4, 9},\n    {4, 10},\n    {5, 9},\n    {5, 10},\n    {6, 9},\n    {6, 10}\n}\nstack traceback:\n\t/tmp/tmpo6p1qfjj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[1], products[2], products[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjy7e5m9n.lua:16: expected: {60, 54, 50}\nactual: 60\nstack traceback:\n\t/tmp/tmpjy7e5m9n.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnizj2_u3.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnizj2_u3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i = 1, #nums1 do\n\t\tfor j = 1, #nums2 do\n\t\t\ttable.insert(products, nums1[i] * nums2[j])\n\t\tend\n\tend\n\ttable.sort(products, function(a, b) return a > b end)\n\tlocal result = {}\n\tfor i = 1, N do\n\t\ttable.insert(result, products[i])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(a, b)\n    local c = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if compare(a[i], b[j]) then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      c[#c + 1] = a[i]\n      i = i + 1\n    end\n    while j <= #b do\n      c[#c + 1] = b[j]\n      j = j + 1\n    end\n    return c\n  end\n  local function merge_sort(a)\n    if #a <= 1 then return a end\n    local m = math.floor(#a / 2)\n    local b = merge_sort(a:sub(1, m))\n    local c = merge_sort(a:sub(m + 1))\n    return merge(b, c)\n  end\n  local function large_product_helper(nums1, nums2)\n    local a = {}\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        a[#a + 1] = {nums1[i], nums2[j]}\n      end\n    end\n    return merge_sort(a)\n  end\n  local a = large_product_helper(nums1, nums2)\n  local b = large_product_helper(nums2, nums1)\n  local c = merge(a, b)\n  return c:sub(1, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfs5datc.lua:31: attempt to call method 'sub' (a nil value)\nstack traceback:\n\t/tmp/tmpzfs5datc.lua:31: in function </tmp/tmpzfs5datc.lua:28>\n\t(tail call): ?\n\t/tmp/tmpzfs5datc.lua:44: in function 'candidate'\n\t/tmp/tmpzfs5datc.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for _, num1 in ipairs(nums1) do\n        for _, num2 in ipairs(nums2) do\n            table.insert(products, num1 * num2)\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvnjddhk.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpjvnjddhk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N or product > products[#products] then\n        table.insert(products, product)\n        table.sort(products)\n        if #products > N then\n          table.remove(products)\n        end\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa8hnq75.lua:22: expected: {60, 54, 50}\nactual: {3, 6, 8}\nstack traceback:\n\t/tmp/tmpoa8hnq75.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnizj2_u3.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnizj2_u3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for _, v1 in ipairs(nums1) do\n        for _, v2 in ipairs(nums2) do\n            table.insert(products, v1 * v2)\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    return products[1], products[2], products[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fk1rody.lua:16: expected: {60, 54, 50}\nactual: 60\nstack traceback:\n\t/tmp/tmp4fk1rody.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local n1, n2 = #nums1, #nums2\n    local max_product = nums1[n1] * nums2[n2]\n    local max_product_idx = {n1, n2}\n    local min_product = nums1[1] * nums2[1]\n    local min_product_idx = {1, 1}\n    local large_products = {}\n    for i = 1, N do\n        if max_product_idx[1] > 1 and min_product_idx[2] < n2 then\n            local product = nums1[max_product_idx[1] - 1] * nums2[min_product_idx[2] + 1]\n            if product > max_product then\n                max_product = product\n                max_product_idx = {max_product_idx[1] - 1, min_product_idx[2] + 1}\n            end\n        end\n        if min_product_idx[1] < n1 and max_product_idx[2] > 1 then\n            local product = nums1[min_product_idx[1] + 1] * nums2[max_product_idx[2] - 1]\n            if product < min_product then\n                min_product = product\n                min_product_idx = {min_product_idx[1] + 1, max_product_idx[2] - 1}\n            end\n        end\n        large_products[i] = max_product\n        if max_product_idx[1] > 1 then\n            max_product_idx[1] = max_product_idx[1] - 1\n        else\n            max_product_idx[2] = max_product_idx[2] - 1\n        end\n        max_product = nums1[max_product_idx[1]] * nums2[max_product_idx[2]]\n    end\n    return large_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dje6sfq.lua:38: expected: {60, 54, 50}\nactual: {36, 30, 24}\nstack traceback:\n\t/tmp/tmp9dje6sfq.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i, num1 in ipairs(nums1) do\n\t\tfor j, num2 in ipairs(nums2) do\n\t\t\ttable.insert(products, num1 * num2)\n\t\tend\n\tend\n\ttable.sort(products, function(a, b) return a > b end)\n\treturn products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jiceeuq.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmp6jiceeuq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max_product = 0\n    local max_i, max_j\n    for i, num1 in ipairs(nums1) do\n      for j, num2 in ipairs(nums2) do\n        local product = num1 * num2\n        if product > max_product then\n          max_product = product\n          max_i, max_j = i, j\n        end\n      end\n    end\n    table.insert(result, {nums1[max_i], nums2[max_j]})\n    table.remove(nums1, max_i)\n    table.remove(nums2, max_j)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj5xjwgg.lua:26: expected: {60, 54, 50}\nactual: {{6, 10}, {5, 9}, {4, 8}}\nstack traceback:\n\t/tmp/tmptj5xjwgg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  local i, j = 1, 1\n  while i <= #nums1 and j <= #nums2 and #result < N do\n    if nums1[i] < nums2[j] then\n      table.insert(result, nums1[i] * nums2[j])\n      i = i + 1\n    else\n      table.insert(result, nums1[i] * nums2[j])\n      j = j + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaycmtqw1.lua:20: expected: {60, 54, 50}\nactual: {3, 6, 9}\nstack traceback:\n\t/tmp/tmpaycmtqw1.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local function compare(a, b)\n        return a[1] * a[2] > b[1] * b[2]\n    end\n    local function merge(nums1, nums2)\n        local result = {}\n        local i, j = 1, 1\n        while i <= #nums1 and j <= #nums2 do\n            if compare(nums1[i], nums2[j]) then\n                result[#result + 1] = nums1[i]\n                i = i + 1\n            else\n                result[#result + 1] = nums2[j]\n                j = j + 1\n            end\n        end\n        while i <= #nums1 do\n            result[#result + 1] = nums1[i]\n            i = i + 1\n        end\n        while j <= #nums2 do\n            result[#result + 1] = nums2[j]\n            j = j + 1\n        end\n        return result\n    end\n    local function find_largest(nums1, nums2, N)\n        if #nums1 == 0 or #nums2 == 0 then\n            return {}\n        end\n        if #nums1 + #nums2 <= N then\n            return merge(nums1, nums2)\n        end\n        local result = {}\n        local i, j = 1, 1\n        while i <= #nums1 and j <= #nums2 and #result < N do\n            if compare(nums1[i], nums2[j]) then\n                result[#result + 1] = nums1[i]\n                i = i + 1\n            else\n                result[#result + 1] = nums2[j]\n                j = j + 1\n            end\n        end\n        while i <= #nums1 and #result < N do\n            result[#result + 1] = nums1[i]\n            i = i + 1\n        end\n        while j <= #nums2 and #result < N do\n            result[#result + 1] = nums2[j]\n            j = j + 1\n        end\n        return result\n    end\n    local function find\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7s1aa6r7.lua:57: '(' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local max_products = {}\n  for i = 1, N do\n    max_products[i] = {0, 0}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmphqxy5is6.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal n1, n2 = #nums1, #nums2\n\tlocal i, j = 1, 1\n\tlocal heap = {}\n\tlocal function push(i, j, v)\n\t\tif #heap < N then\n\t\t\ttable.insert(heap, {i, j, v})\n\t\t\ttable.sort(heap, function(a, b) return a[3] > b[3] end)\n\t\telseif v > heap[1][3] then\n\t\t\theap[1] = {i, j, v}\n\t\t\ttable.sort(heap, function(a, b) return a[3] > b[3] end)\n\t\tend\n\tend\n\tpush(i, j, nums1[i] * nums2[j])\n\twhile #heap < N do\n\t\tif i == n1 then\n\t\t\tj = j + 1\n\t\telseif j == n2 then\n\t\t\ti = i + 1\n\t\telseif nums1[i] * nums2[j+1] > nums1[i+1] * nums2[j] then\n\t\t\tj = j + 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\tpush(i, j, nums1[i] * nums2[j])\n\tend\n\treturn heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k7czknj.lua:34: expected: {60, 54, 50}\nactual: {{2, 2, 12}, {2, 1, 6}, {1, 1, 3}}\nstack traceback:\n\t/tmp/tmp8k7czknj.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local function cmp(a, b)\n        return a[1] * a[2] > b[1] * b[2]\n    end\n    local heap = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            heap[#heap + 1] = {nums1[i], nums2[j]}\n        end\n    end\n    table.sort(heap, cmp)\n    local res = {}\n    for i = 1, N do\n        res[i] = heap[i][1] * heap[i][2]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i = 1, #nums1 do\n\t\tfor j = 1, #nums2 do\n\t\t\tlocal product = nums1[i] * nums2[j]\n\t\t\tif #products < N then\n\t\t\t\ttable.insert(products, product)\n\t\t\telseif product > products[1] then\n\t\t\t\ttable.remove(products, 1)\n\t\t\t\ttable.insert(products, product)\n\t\t\tend\n\t\tend\n\tend\n\treturn products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfds9ut9e.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpfds9ut9e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local n1, n2 = #nums1, #nums2\n    local i, j, k = 1, 1, 1\n    local heap = {}\n    local function push(i, j, k)\n        local v = nums1[i] * nums2[j]\n        if k <= N then\n            heap[k] = {v, i, j}\n            k = k + 1\n        elseif v > heap[1][1] then\n            heap[1] = {v, i, j}\n        end\n        return k\n    end\n    local function pop(k)\n        local v, i, j = table.unpack(heap[1])\n        k = k - 1\n        heap[1] = heap[k]\n        local p, q = 1, k\n        while p < q do\n            local r = math.floor((p + q) / 2)\n            if heap[r][1] < v then\n                p = r + 1\n            else\n                q = r\n            end\n        end\n        heap[p] = {v, i, j}\n        return k\n    end\n    while i <= n1 and j <= n2 do\n        if nums1[i] < nums2[j] then\n            k = push(i, j, k)\n            i = i + 1\n        else\n            k = push(i, j, k)\n            j = j + 1\n        end\n    end\n    while i <= n1 do\n        k = push(i, j, k)\n        i = i + 1\n    end\n    while j <= n2 do\n        k = push(i, j, k)\n        j = j + 1\n    end\n    while k > N do\n        k = pop(k)\n    end\n    local result = {}\n    for i = 1, N do\n        result[i] = heap[i][1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp00bgw9bn.lua:7: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp00bgw9bn.lua:7: in local 'push'\n\t/tmp/tmp00bgw9bn.lua:46: in local 'candidate'\n\t/tmp/tmp00bgw9bn.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    local i = 1\n    local j = 1\n    while i <= #nums1 and j <= #nums2 do\n        if nums1[i] < nums2[j] then\n            i = i + 1\n        elseif nums1[i] > nums2[j] then\n            j = j + 1\n        else\n            table.insert(result, nums1[i])\n            i = i + 1\n            j = j + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqwn0gh5.lua:23: expected: {60, 54, 50}\nactual: {3, 6}\nstack traceback:\n\t/tmp/tmpkqwn0gh5.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    for i = 1, N do\n        local max = -math.huge\n        local max_i, max_j\n        for i, a in ipairs(nums1) do\n            for j, b in ipairs(nums2) do\n                local product = a * b\n                if product > max then\n                    max = product\n                    max_i = i\n                    max_j = j\n                end\n            end\n        end\n        table.insert(result, max)\n        table.remove(nums1, max_i)\n        table.remove(nums2, max_j)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mu1kssg.lua:27: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmp2mu1kssg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i, v1 in ipairs(nums1) do\n\t\tfor j, v2 in ipairs(nums2) do\n\t\t\ttable.insert(products, v1 * v2)\n\t\tend\n\tend\n\ttable.sort(products, function(a, b) return a > b end)\n\treturn products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ln_7gxp.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmp8ln_7gxp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i, n1 in ipairs(nums1) do\n    for j, n2 in ipairs(nums2) do\n      products[#products + 1] = n1 * n2\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9inywpj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpt9inywpj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local n1, n2 = #nums1, #nums2\n  local i, j = 1, 1\n  local heap = {}\n  local function push(i, j, v)\n    if #heap < N then\n      heap[#heap+1] = {i, j, v}\n      local k = #heap\n      while k > 1 do\n        local p = math.floor(k/2)\n        if heap[p][3] < heap[k][3] then\n          heap[p], heap[k] = heap[k], heap[p]\n          k = p\n        else\n          break\n        end\n      end\n    elseif v > heap[1][3] then\n      heap[1] = {i, j, v}\n      local k = 1\n      while k < #heap do\n        local c = k*2\n        if c+1 <= #heap and heap[c+1][3] > heap[c][3] then\n          c = c+1\n        end\n        if heap[k][3] < heap[c][3] then\n          heap[k], heap[c] = heap[c], heap[k]\n          k = c\n        else\n          break\n        end\n      end\n    end\n  end\n  push(i, j, nums1[i]*nums2[j])\n  while #heap < N do\n    if i < n1 and (j == n2 or nums1[i]*nums2[j+1] > nums1[i+1]*nums2[j]) then\n      i = i+1\n      j = j+1\n    elseif j < n2 then\n      j = j+1\n    else\n      i = i+1\n    end\n    push(i, j, nums1[i]*nums2[j])\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvnvyq7a.lua:54: expected: {60, 54, 50}\nactual: {{1, 3, 8}, {1, 1, 3}, {1, 2, 6}}\nstack traceback:\n\t/tmp/tmpgvnvyq7a.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local n1, n2 = #nums1, #nums2\n    local i, j = n1, n2\n    local heap = {}\n    local function push(i, j)\n        local v = nums1[i] * nums2[j]\n        if #heap < N then\n            heap[#heap+1] = {v, i, j}\n            local k = #heap\n            while k > 1 do\n                local p = math.floor(k/2)\n                if heap[p][1] < heap[k][1] then\n                    heap[p], heap[k] = heap[k], heap[p]\n                    k = p\n                else\n                    break\n                end\n            end\n        elseif v > heap[1][1] then\n            heap[1] = {v, i, j}\n            local k = 1\n            while k*2 <= N do\n                local c = k*2\n                if c+1 <= N and heap[c+1][1] > heap[c][1] then\n                    c = c+1\n                end\n                if heap[k][1] < heap[c][1] then\n                    heap[k], heap[c] = heap[c], heap[k]\n                    k = c\n                else\n                    break\n                end\n            end\n        end\n    end\n    push(i, j)\n    while i > 1 and j > 1 do\n        if nums1[i-1] * nums2[j] > nums1[i] * nums2[j-1] then\n            i = i-1\n        else\n            j = j-1\n        end\n        push(i, j)\n    end\n    while i > 1 do\n        i = i-1\n        push(i, j)\n    end\n    while j > 1 do\n        j = j-1\n        push(i, j)\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa00go7xn.lua:60: expected: {60, 54, 50}\nactual: {{60, 6, 5}, {36, 6, 6}, {54, 6, 4}}\nstack traceback:\n\t/tmp/tmpa00go7xn.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnizj2_u3.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnizj2_u3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i, num1 in ipairs(nums1) do\n\t\tfor j, num2 in ipairs(nums2) do\n\t\t\ttable.insert(products, num1 * num2)\n\t\tend\n\tend\n\ttable.sort(products)\n\treturn products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw4sdkhv.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmprw4sdkhv.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    for i = 1, N do\n        local max = 0\n        local max_i = 0\n        local max_j = 0\n        for j = 1, #nums1 do\n            for k = 1, #nums2 do\n                local product = nums1[j] * nums2[k]\n                if product > max then\n                    max = product\n                    max_i = j\n                    max_j = k\n                end\n            end\n        end\n        result[i] = max\n        nums1[max_i] = 0\n        nums2[max_j] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8mngga5.lua:28: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmpc8mngga5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local n1, n2 = #nums1, #nums2\n    local i, j = n1, n2\n    local res = {}\n    while N > 0 do\n        local p1, p2 = nums1[i] * nums2[j], nums1[i] * nums2[j]\n        if p1 > p2 then\n            table.insert(res, p1)\n            i = i - 1\n        else\n            table.insert(res, p2)\n            j = j - 1\n        end\n        N = N - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp_rot37.lua:23: expected: {60, 54, 50}\nactual: {36, 60, 54}\nstack traceback:\n\t/tmp/tmpgp_rot37.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[#products - i + 1])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for _, num1 in ipairs(nums1) do\n        for _, num2 in ipairs(nums2) do\n            table.insert(products, num1 * num2)\n        end\n    end\n    table.sort(products)\n    return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplft1abj0.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmplft1abj0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    for i = 1, N do\n        local max_product = 0\n        local max_index = 0\n        for j = 1, #nums1 do\n            for k = 1, #nums2 do\n                local product = nums1[j] * nums2[k]\n                if product > max_product then\n                    max_product = product\n                    max_index = {j, k}\n                end\n            end\n        end\n        result[i] = max_product\n        nums1[max_index[1]] = 0\n        nums2[max_index[2]] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_625be2h.lua:26: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmp_625be2h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    local i = 1\n    local j = 1\n    while i <= #nums1 and j <= #nums2 do\n        if nums1[i] < nums2[j] then\n            table.insert(result, nums1[i] * nums2[j])\n            i = i + 1\n        else\n            table.insert(result, nums1[i] * nums2[j])\n            j = j + 1\n        end\n    end\n    while i <= #nums1 do\n        table.insert(result, nums1[i] * nums2[#nums2])\n        i = i + 1\n    end\n    while j <= #nums2 do\n        table.insert(result, nums1[#nums1] * nums2[j])\n        j = j + 1\n    end\n    table.sort(result)\n    local res = {}\n    for i = #result - N + 1, #result do\n        table.insert(res, result[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdt06zcv.lua:34: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmprdt06zcv.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(a, b)\n    local i, j = 1, 1\n    local c = {}\n    while i <= #a and j <= #b do\n      if compare(a[i], b[j]) then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      c[#c + 1] = a[i]\n      i = i + 1\n    end\n    while j <= #b do\n      c[#c + 1] = b[j]\n      j = j + 1\n    end\n    return c\n  end\n  local function merge_sort(a)\n    if #a <= 1 then\n      return a\n    end\n    local mid = math.floor(#a / 2)\n    local left = merge_sort(sub(a, 1, mid))\n    local right = merge_sort(sub(a, mid + 1, #a))\n    return merge(left, right)\n  end\n  local function find_max_product(nums1, nums2, N)\n    local max_product = {}\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        if #max_product < N then\n          max_product[#max_product + 1] = {nums1[i], nums2[j]}\n        else\n          if nums1[i] * nums2[j] > max_product[1][1] * max_product[1][2] then\n            max_product[1] = {nums1[i], nums2[j]}\n          end\n        end\n      end\n    end\n    return merge_sort(max_product)\n  end\n  local function find_max_product_2(nums1, nums2, N)\n    local max_product = {}\n    local i, j = 1,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmpclnd8n5r.lua:55: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i, num1 in ipairs(nums1) do\n    for j, num2 in ipairs(nums2) do\n      products[#products+1] = num1 * num2\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc6acv2x.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmplc6acv2x.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[N] then\n        table.remove(products, N)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5k_vxav.lua:21: expected: {60, 54, 50}\nactual: {3, 6, 60}\nstack traceback:\n\t/tmp/tmpz5k_vxav.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(nums1, nums2)\n    local result = {}\n    local i, j = 1, 1\n    while i <= #nums1 and j <= #nums2 do\n      if compare(nums1[i], nums2[j]) then\n        table.insert(result, nums1[i])\n        i = i + 1\n      else\n        table.insert(result, nums2[j])\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      table.insert(result, nums1[i])\n      i = i + 1\n    end\n    while j <= #nums2 do\n      table.insert(result, nums2[j])\n      j = j + 1\n    end\n    return result\n  end\n  local function merge_sort(nums)\n    if #nums <= 1 then\n      return nums\n    end\n    local mid = math.floor(#nums / 2)\n    local left = merge_sort(table.slice(nums, 1, mid))\n    local right = merge_sort(table.slice(nums, mid + 1, #nums))\n    return merge(left, right)\n  end\n  local result = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(result, {nums1[i], nums2[j]})\n    end\n  end\n  result = merge_sort(result)\n  return table.slice(result, 1, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphrlj6gs9.lua:33: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmphrlj6gs9.lua:33: in local 'merge_sort'\n\t/tmp/tmphrlj6gs9.lua:43: in local 'candidate'\n\t/tmp/tmphrlj6gs9.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local n1, n2 = #nums1, #nums2\n    local i, j = n1, n2\n    local res = {}\n    while N > 0 do\n        local p1, p2 = nums1[i] * nums2[j], nums1[i] * nums2[j]\n        if p1 > p2 then\n            table.insert(res, p1)\n            i = i - 1\n        else\n            table.insert(res, p2)\n            j = j - 1\n        end\n        N = N - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp_rot37.lua:23: expected: {60, 54, 50}\nactual: {36, 60, 54}\nstack traceback:\n\t/tmp/tmpgp_rot37.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n    table.sort(products)\n    local result = {}\n    for i = #products, #products - N + 1, -1 do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function insert(t, x)\n    local i = 1\n    while i <= #t and compare(t[i], x) do\n      i = i + 1\n    end\n    table.insert(t, i, x)\n    if #t > N then\n      table.remove(t)\n    end\n  end\n  local function merge(t1, t2)\n    local t = {}\n    local i1, i2 = 1, 1\n    while i1 <= #t1 and i2 <= #t2 do\n      if compare(t1[i1], t2[i2]) then\n        insert(t, t1[i1])\n        i1 = i1 + 1\n      else\n        insert(t, t2[i2])\n        i2 = i2 + 1\n      end\n    end\n    while i1 <= #t1 do\n      insert(t, t1[i1])\n      i1 = i1 + 1\n    end\n    while i2 <= #t2 do\n      insert(t, t2[i2])\n      i2 = i2 + 1\n    end\n    return t\n  end\n  local function sort(t)\n    if #t <= 1 then\n      return t\n    end\n    local mid = math.floor(#t / 2)\n    local t1 = sort(table.move(t, 1, mid, 1, {}))\n    local t2 = sort(table.move(t, mid + 1, #t, 1, {}))\n    return merge(t1, t2)\n  end\n  local t = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      insert(t, {nums1[i], nums2[j]})\n    end\n  end\n  return sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_415ovqc.lua:59: expected: {60, 54, 50}\nactual: {{6, 10}, {6, 9}, {5, 10}}\nstack traceback:\n\t/tmp/tmp_415ovqc.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, n1 in ipairs(nums1) do\n    for _, n2 in ipairs(nums2) do\n      table.insert(products, n1 * n2)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9zn6oqk.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpn9zn6oqk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products, #products - N + 1, -1 do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  local i = 1\n  local j = 1\n  while i <= #nums1 and j <= #nums2 and #result < N do\n    if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] then\n      result[#result + 1] = nums1[i] * nums2[j]\n      j = j + 1\n    else\n      result[#result + 1] = nums1[i] * nums2[j + 1]\n      i = i + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphki5jvcr.lua:21: expected: {60, 54, 50}\nactual: {6, 12, 18}\nstack traceback:\n\t/tmp/tmphki5jvcr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local product = nums1[i] * nums2[j]\n            if #result < N then\n                table.insert(result, product)\n            elseif product > result[1] then\n                table.remove(result, 1)\n                table.insert(result, product)\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug6n9wx6.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpug6n9wx6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        products[#products + 1] = product\n      elseif product > products[1] then\n        products[1] = product\n      end\n      table.sort(products)\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst27pgk0.lua:21: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpst27pgk0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local product = nums1[i] * nums2[j]\n            if #products < N then\n                table.insert(products, product)\n            elseif product > products[1] then\n                table.remove(products, 1)\n                table.insert(products, product)\n            end\n        end\n    end\n    return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps450uap6.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmps450uap6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    for i = 1, N do\n        local max_product = 0\n        local max_i, max_j\n        for j = 1, #nums1 do\n            for k = 1, #nums2 do\n                local product = nums1[j] * nums2[k]\n                if product > max_product then\n                    max_product = product\n                    max_i = j\n                    max_j = k\n                end\n            end\n        end\n        table.insert(result, {nums1[max_i], nums2[max_j]})\n        nums1[max_i] = 0\n        nums2[max_j] = 0\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqotwmqfi.lua:27: expected: {60, 54, 50}\nactual: {{6, 10}, {5, 9}, {4, 8}}\nstack traceback:\n\t/tmp/tmpqotwmqfi.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal n1, n2 = #nums1, #nums2\n\tlocal i, j = 1, 1\n\tlocal heap = {}\n\tlocal function push(i, j, v)\n\t\tlocal k = #heap + 1\n\t\twhile k > 1 do\n\t\t\tlocal p = math.floor(k / 2)\n\t\t\tif v < heap[p][3] then\n\t\t\t\theap[k] = heap[p]\n\t\t\t\tk = p\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\theap[k] = {i, j, v}\n\tend\n\tlocal function pop()\n\t\tlocal ret = heap[1]\n\t\tlocal v = heap[#heap][3]\n\t\theap[#heap] = nil\n\t\tlocal k = 1\n\t\twhile k * 2 <= #heap do\n\t\t\tlocal c = k * 2\n\t\t\tif c + 1 <= #heap and heap[c + 1][3] < heap[c][3] then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\t\tif v <= heap[c][3] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\theap[k] = heap[c]\n\t\t\tk = c\n\t\tend\n\t\theap[k] = {ret[1], ret[2], v}\n\t\treturn ret\n\tend\n\tpush(i, j, nums1[i] * nums2[j])\n\twhile i < n1 and j < n2 do\n\t\tlocal v = nums1[i] * nums2[j]\n\t\tif v > heap[1][3] then\n\t\t\tpush(i, j, v)\n\t\tend\n\t\tif nums1[i + 1] * nums2[j] > nums1[i] * nums2[j + 1] then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i < n1 do\n\t\tlocal v = nums\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_qz2d932.lua:61: 'end' expected (to close 'while' at line 50) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i = 1, #nums1 do\n\t\tfor j = 1, #nums2 do\n\t\t\ttable.insert(products, nums1[i] * nums2[j])\n\t\tend\n\tend\n\ttable.sort(products, function(a, b) return a > b end)\n\treturn products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazzswc1w.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpazzswc1w.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            products[#products + 1] = nums1[i] * nums2[j]\n        end\n    end\n    table.sort(products)\n    return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqm87kcy.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpvqm87kcy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max_product = 0\n    local max_i, max_j\n    for j = 1, #nums1 do\n      for k = 1, #nums2 do\n        local product = nums1[j] * nums2[k]\n        if product > max_product then\n          max_product = product\n          max_i = j\n          max_j = k\n        end\n      end\n    end\n    result[i] = max_product\n    nums1[max_i] = 0\n    nums2[max_j] = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrv2s_vv.lua:27: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmpwrv2s_vv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local max_products = {}\n    for i = 1, N do\n        max_products[i] = {nums1[1] * nums2[1], 1, 1}\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local product = nums1[i] * nums2[j]\n            if product > max_products[N][1] then\n                max_products[N] = {product, i, j}\n                table.sort(max_products, function(a, b) return a[1] > b[1] end)\n            end\n        end\n    end\n    return max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqut0i3q5.lua:22: expected: {60, 54, 50}\nactual: {{60, 6, 5}, {54, 6, 4}, {50, 5, 5}}\nstack traceback:\n\t/tmp/tmpqut0i3q5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnizj2_u3.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnizj2_u3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal function compare(a, b)\n\t\treturn a[1] * a[2] > b[1] * b[2]\n\tend\n\tlocal function compare_key(a, b)\n\t\treturn a[1] > b[1]\n\tend\n\tlocal function compare_val(a, b)\n\t\treturn a[2] > b[2]\n\tend\n\tlocal function compare_key_val(a, b)\n\t\treturn a[1] * a[2] > b[1] * b[2]\n\tend\n\tlocal function merge(a, b)\n\t\tlocal c = {}\n\t\tlocal i, j = 1, 1\n\t\twhile i <= #a and j <= #b do\n\t\t\tif compare_key_val(a[i], b[j]) then\n\t\t\t\tc[#c + 1] = a[i]\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\tc[#c + 1] = b[j]\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\tfor k = i, #a do\n\t\t\tc[#c + 1] = a[k]\n\t\tend\n\t\tfor k = j, #b do\n\t\t\tc[#c + 1] = b[k]\n\t\tend\n\t\treturn c\n\tend\n\tlocal function merge_sort(a)\n\t\tif #a <= 1 then\n\t\t\treturn a\n\t\tend\n\t\tlocal mid = math.floor(#a / 2)\n\t\tlocal left = merge_sort(a, 1, mid)\n\t\tlocal right = merge_sort(a, mid + 1, #a)\n\t\treturn merge(left, right)\n\tend\n\tlocal function sort(a)\n\t\ttable.sort(a, compare)\n\tend\n\tlocal function sort_key(a)\n\t\ttable.sort(a, compare_key)\n\tend\n\tlocal function sort_val(a)\n\t\ttable.sort(a, compare_val)\n\tend\n\tlocal function sort_key_val(a)\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvxaxp3wc.lua:64: 'end' expected (to close 'function' at line 53) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local prod = nums1[i] * nums2[j]\n            if #res < N then\n                table.insert(res, prod)\n            elseif prod > res[N] then\n                table.insert(res, prod)\n                table.sort(res)\n                table.remove(res, 1)\n            end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8brh59k.lua:22: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpp8brh59k.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  local max_nums1 = {}\n  local max_nums2 = {}\n  for i = 1, N do\n    max_nums1[i] = 0\n    max_nums2[i] = 0\n  end\n  for i = 1, #nums1 do\n    for j = 1, N do\n      if nums1[i] > max_nums1[j] then\n        for k = N, j + 1, -1 do\n          max_nums1[k] = max_nums1[k - 1]\n        end\n        max_nums1[j] = nums1[i]\n        break\n      end\n    end\n  end\n  for i = 1, #nums2 do\n    for j = 1, N do\n      if nums2[i] > max_nums2[j] then\n        for k = N, j + 1, -1 do\n          max_nums2[k] = max_nums2[k - 1]\n        end\n        max_nums2[j] = nums2[i]\n        break\n      end\n    end\n  end\n  for i = 1, N do\n    result[i] = max_nums1[i] * max_nums2[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nqtoun2.lua:41: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmp_nqtoun2.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal n1, n2 = #nums1, #nums2\n\tlocal i, j = 1, 1\n\tlocal heap = {}\n\tlocal function push(i, j, v)\n\t\tlocal k = #heap + 1\n\t\theap[k] = {i, j, v}\n\t\twhile k > 1 do\n\t\t\tlocal p = math.floor(k / 2)\n\t\t\tif heap[p][3] < v then\n\t\t\t\theap[k], heap[p] = heap[p], heap[k]\n\t\t\t\tk = p\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tlocal function pop()\n\t\tlocal k = 1\n\t\tlocal v = heap[k]\n\t\theap[k] = heap[#heap]\n\t\theap[#heap] = nil\n\t\twhile k * 2 <= #heap do\n\t\t\tlocal c = k * 2\n\t\t\tif c + 1 <= #heap and heap[c + 1][3] > heap[c][3] then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\t\tif heap[c][3] > heap[k][3] then\n\t\t\t\theap[k], heap[c] = heap[c], heap[k]\n\t\t\t\tk = c\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn v\n\tend\n\tlocal function push_next(i, j)\n\t\tif i <= n1 and j <= n2 then\n\t\t\tpush(i, j, nums1[i] * nums2[j])\n\t\tend\n\tend\n\tpush_next(i, j)\n\twhile i <= n1 and j <= n2 do\n\t\tlocal v = pop()\n\t\tif v[1] < n1 then\n\t\t\tpush_next(v[1] + 1, v[2])\n\t\tend\n\t\tif v[2] < n2 then\n\t\t\tpush_next(v[1], v[2] + 1)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmph3gkzxzl.lua:61: 'end' expected (to close 'if' at line 49) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmc2_kzc.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmprmc2_kzc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      table.insert(products, product)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ickzgxg.lua:17: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmp5ickzgxg.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            products[#products + 1] = nums1[i] * nums2[j]\n        end\n    end\n    table.sort(products)\n    return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqm87kcy.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpvqm87kcy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local t = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      t[#t + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(t)\n  return t[#t - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kgcoo9l.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmp0kgcoo9l.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = 1, N do\n    result[i] = products[#products - i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #heap < N then\n        heap_insert(heap, product)\n      elseif product > heap[1] then\n        heap_replace(heap, product)\n      end\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0hqnkix5.lua:8: attempt to call a nil value (global 'heap_insert')\nstack traceback:\n\t/tmp/tmp0hqnkix5.lua:8: in local 'candidate'\n\t/tmp/tmp0hqnkix5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function select_largest(nums, N)\n    local result = {}\n    for i = 1, #nums do\n      if #result < N then\n        table.insert(result, {nums[i], i})\n      else\n        table.sort(result, compare)\n        if nums[i] * result[1][1] > result[1][1] * result[1][2] then\n          result[1] = {nums[i], i}\n        end\n      end\n    end\n    return result\n  end\n  local result = {}\n  local nums1_largest = select_largest(nums1, N)\n  local nums2_largest = select_largest(nums2, N)\n  for i = 1, #nums1_largest do\n    for j = 1, #nums2_largest do\n      table.insert(result, {nums1_largest[i][1], nums2_largest[j][1]})\n    end\n  end\n  table.sort(result, compare)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a4wacyk.lua:35: expected: {60, 54, 50}\nactual: {{6, 6}, {6, 6}, {6, 3}, {2, 6}, {2, 6}, {2, 3}, {1, 6}, {1, 6}, {1, 3}}\nstack traceback:\n\t/tmp/tmp1a4wacyk.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, n1 in ipairs(nums1) do\n    for _, n2 in ipairs(nums2) do\n      table.insert(products, n1 * n2)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9zn6oqk.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpn9zn6oqk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal max_products = {}\n\tlocal max_product = 0\n\tlocal max_i = 0\n\tlocal max_j = 0\n\tfor i = 1, #nums1 do\n\t\tfor j = 1, #nums2 do\n\t\t\tlocal product = nums1[i] * nums2[j]\n\t\t\tif product > max_product then\n\t\t\t\tmax_product = product\n\t\t\t\tmax_i = i\n\t\t\t\tmax_j = j\n\t\t\tend\n\t\tend\n\tend\n\ttable.insert(max_products, {nums1[max_i], nums2[max_j]})\n\tfor k = 1, N - 1 do\n\t\tmax_product = 0\n\t\tfor i = 1, #nums1 do\n\t\t\tfor j = 1, #nums2 do\n\t\t\t\tlocal product = nums1[i] * nums2[j]\n\t\t\t\tif product > max_product and not (i == max_i and j == max_j) then\n\t\t\t\t\tmax_product = product\n\t\t\t\t\tmax_i = i\n\t\t\t\t\tmax_j = j\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\ttable.insert(max_products, {nums1[max_i], nums2[max_j]})\n\tend\n\treturn max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkyv1b75.lua:38: expected: {60, 54, 50}\nactual: {{6, 10}, {6, 10}, {6, 10}}\nstack traceback:\n\t/tmp/tmplkyv1b75.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i, v1 in ipairs(nums1) do\n        for j, v2 in ipairs(nums2) do\n            table.insert(products, v1 * v2)\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local heap = {}\n  local function push(x, y)\n    local key = nums1[x] * nums2[y]\n    if #heap < N then\n      heap[#heap + 1] = {x, y, key}\n      up(heap, #heap)\n    elseif key > heap[1][3] then\n      heap[1] = {x, y, key}\n      down(heap, 1)\n    end\n  end\n  for i = 1, #nums1 do\n    push(i, 1)\n  end\n  for i = 2, #nums2 do\n    for j = 1, N do\n      if heap[j][2] == i - 1 then\n        push(heap[j][1], i)\n        break\n      end\n    end\n  end\n  local result = {}\n  for i = 1, N do\n    result[i] = heap[1][3]\n    heap[1] = heap[#heap]\n    heap[#heap] = nil\n    down(heap, 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4i4g1mff.lua:8: attempt to call a nil value (global 'up')\nstack traceback:\n\t/tmp/tmp4i4g1mff.lua:8: in local 'push'\n\t/tmp/tmp4i4g1mff.lua:15: in local 'candidate'\n\t/tmp/tmp4i4g1mff.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local result = {}\n    local i, j = 1, 1\n    while #result < N do\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] then\n            result[#result + 1] = nums1[i] * nums2[j]\n            j = j + 1\n        else\n            result[#result + 1] = nums1[i] * nums2[j + 1]\n            i = i + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpym5kt90c.lua:20: expected: {60, 54, 50}\nactual: {6, 12, 18}\nstack traceback:\n\t/tmp/tmpym5kt90c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local n1, n2 = #nums1, #nums2\n  local max_nums1, max_nums2 = {}, {}\n  local max_nums1_idx, max_nums2_idx = {}, {}\n  for i = 1, N do\n    max_nums1[i], max_nums1_idx[i] = nums1[1], 1\n    max_nums2[i], max_nums2_idx[i] = nums2[1], 1\n  end\n  for i = 1, n1 do\n    for j = 1, N do\n      if nums1[i] > max_nums1[j] then\n        for k = N, j + 1, -1 do\n          max_nums1[k], max_nums1_idx[k] = max_nums1[k - 1], max_nums1_idx[k - 1]\n        end\n        max_nums1[j], max_nums1_idx[j] = nums1[i], i\n        break\n      end\n    end\n  end\n  for i = 1, n2 do\n    for j = 1, N do\n      if nums2[i] > max_nums2[j] then\n        for k = N, j + 1, -1 do\n          max_nums2[k], max_nums2_idx[k] = max_nums2[k - 1], max_nums2_idx[k - 1]\n        end\n        max_nums2[j], max_nums2_idx[j] = nums2[i], i\n        break\n      end\n    end\n  end\n  local max_prod = {}\n  for i = 1, N do\n    max_prod[i] = max_nums1[i] * max_nums2[i]\n  end\n  return max_prod, max_nums1_idx, max_nums2_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfo5xddd.lua:42: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmpkfo5xddd.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local pair = {nums1[i], nums2[j]}\n      if #heap < N then\n        table.insert(heap, pair)\n        table.sort(heap, compare)\n      else\n        if pair[1] * pair[2] > heap[1][1] * heap[1][2] then\n          heap[1] = pair\n          table.sort(heap, compare)\n        end\n      end\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprljyfh0g.lua:27: expected: {60, 54, 50}\nactual: {{6, 10}, {1, 6}, {1, 3}}\nstack traceback:\n\t/tmp/tmprljyfh0g.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local res = {}\n    local i, j = 1, 1\n    while #res < N do\n        if nums1[i] * nums2[j] > nums1[i] * nums2[j + 1] then\n            table.insert(res, nums1[i] * nums2[j])\n            j = j + 1\n        else\n            table.insert(res, nums1[i] * nums2[j + 1])\n            i = i + 1\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_yljdjq.lua:20: expected: {60, 54, 50}\nactual: {6, 12, 18}\nstack traceback:\n\t/tmp/tmp0_yljdjq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i, num1 in ipairs(nums1) do\n        for j, num2 in ipairs(nums2) do\n            table.insert(products, num1 * num2)\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local product = nums1[i] * nums2[j]\n            if #products < N then\n                table.insert(products, product)\n            else\n                table.sort(products)\n                if product > products[1] then\n                    products[1] = product\n                end\n            end\n        end\n    end\n    return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6heu1a3.lua:23: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpb6heu1a3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max_product = 0\n    local max_index1 = 0\n    local max_index2 = 0\n    for j = 1, #nums1 do\n      for k = 1, #nums2 do\n        local product = nums1[j] * nums2[k]\n        if product > max_product then\n          max_product = product\n          max_index1 = j\n          max_index2 = k\n        end\n      end\n    end\n    table.insert(result, {nums1[max_index1], nums2[max_index2]})\n    nums1[max_index1] = 0\n    nums2[max_index2] = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zw3gc7d.lua:28: expected: {60, 54, 50}\nactual: {{6, 10}, {5, 9}, {4, 8}}\nstack traceback:\n\t/tmp/tmp9zw3gc7d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmc2_kzc.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmprmc2_kzc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local N = N or 1\n  local max_products = {}\n  for i = 1, N do\n    local max_product = -math.huge\n    local max_i, max_j\n    for i, n1 in ipairs(nums1) do\n      for j, n2 in ipairs(nums2) do\n        if n1 * n2 > max_product then\n          max_product = n1 * n2\n          max_i, max_j = i, j\n        end\n      end\n    end\n    table.insert(max_products, max_product)\n    table.remove(nums1, max_i)\n    table.remove(nums2, max_j)\n  end\n  return max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa231m9r0.lua:26: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmpa231m9r0.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local n1, n2 = #nums1, #nums2\n  local i, j = 1, 1\n  local result = {}\n  while #result < N do\n    local p = nums1[i] * nums2[j]\n    if p > nums1[i] * nums2[j+1] then\n      if p > nums1[i+1] * nums2[j] then\n        result[#result+1] = p\n        i, j = i+1, j+1\n      else\n        result[#result+1] = nums1[i+1] * nums2[j]\n        i = i+1\n      end\n    else\n      result[#result+1] = nums1[i] * nums2[j+1]\n      j = j+1\n    end\n    if i > n1 or j > n2 then\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bsgtlrz.lua:30: expected: {60, 54, 50}\nactual: {6, 8, 9}\nstack traceback:\n\t/tmp/tmp9bsgtlrz.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max = -math.huge\n    local max_i, max_j\n    for j = 1, #nums1 do\n      for k = 1, #nums2 do\n        local product = nums1[j] * nums2[k]\n        if product > max then\n          max = product\n          max_i, max_j = j, k\n        end\n      end\n    end\n    table.insert(result, max)\n    nums1[max_i] = -math.huge\n    nums2[max_j] = -math.huge\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9y48gsph.lua:26: expected: {60, 54, 50}\nactual: {60, #Inf, #Inf}\nstack traceback:\n\t/tmp/tmp9y48gsph.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a > b\n  end\n  table.sort(nums1, compare)\n  table.sort(nums2, compare)\n  local res = {}\n  local i, j = 1, 1\n  while #res < N do\n    local product = nums1[i] * nums2[j]\n    if nums1[i] < nums2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n    if #res == 0 or res[#res] ~= product then\n      res[#res + 1] = product\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4odkid3u.lua:27: expected: {60, 54, 50}\nactual: {60, 50, 40}\nstack traceback:\n\t/tmp/tmp4odkid3u.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n\tlocal products = {}\n\tfor i = 1, #nums1 do\n\t\tfor j = 1, #nums2 do\n\t\t\tproducts[#products + 1] = nums1[i] * nums2[j]\n\t\tend\n\tend\n\ttable.sort(products, function(a, b) return a > b end)\n\treturn products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nlc8rzp.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmp8nlc8rzp.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n    table.sort(products)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[#products - i + 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products, #products - N + 1, -1 do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  local i = 1\n  local j = 1\n  while i <= #nums1 and j <= #nums2 do\n    local product = nums1[i] * nums2[j]\n    if #result < N then\n      table.insert(result, product)\n    elseif product > result[1] then\n      table.remove(result, 1)\n      table.insert(result, product)\n    end\n    if nums1[i] > nums2[j] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hy7qt21.lua:26: expected: {60, 54, 50}\nactual: {8, 9, 10}\nstack traceback:\n\t/tmp/tmp9hy7qt21.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max = 0\n    local max_i = 0\n    local max_j = 0\n    for j = 1, #nums1 do\n      for k = 1, #nums2 do\n        local product = nums1[j] * nums2[k]\n        if product > max then\n          max = product\n          max_i = j\n          max_j = k\n        end\n      end\n    end\n    table.insert(result, {nums1[max_i], nums2[max_j]})\n    nums1[max_i] = 0\n    nums2[max_j] = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cjihywf.lua:28: expected: {60, 54, 50}\nactual: {{6, 10}, {5, 9}, {4, 8}}\nstack traceback:\n\t/tmp/tmp5cjihywf.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max_product = -math.huge\n    local max_index1, max_index2\n    for j = 1, #nums1 do\n      for k = 1, #nums2 do\n        local product = nums1[j] * nums2[k]\n        if product > max_product then\n          max_product = product\n          max_index1 = j\n          max_index2 = k\n        end\n      end\n    end\n    result[#result + 1] = {nums1[max_index1], nums2[max_index2]}\n    nums1[max_index1] = -math.huge\n    nums2[max_index2] = -math.huge\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhi8k9ao.lua:27: expected: {60, 54, 50}\nactual: {{6, 10}, {-#Inf, -#Inf}, {-#Inf, -#Inf}}\nstack traceback:\n\t/tmp/tmpwhi8k9ao.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, n1 in ipairs(nums1) do\n    for _, n2 in ipairs(nums2) do\n      table.insert(products, n1 * n2)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9zn6oqk.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpn9zn6oqk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local res = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local prod = nums1[i] * nums2[j]\n            if #res < N then\n                table.insert(res, prod)\n            else\n                table.sort(res)\n                if prod > res[1] then\n                    res[1] = prod\n                end\n            end\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9o0cwpi.lua:24: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpa9o0cwpi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, v1 in ipairs(nums1) do\n    for _, v2 in ipairs(nums2) do\n      table.insert(products, v1 * v2)\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1], products[#products - N + 2], products[#products - N + 3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblbvmu4h.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpblbvmu4h.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local t = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      t[#t + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(t)\n  local result = {}\n  for i = 1, N do\n    result[i] = t[#t - i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(a, b)\n    local c = {}\n    local i, j = 1, 1\n    while i <= #a and j <= #b do\n      if compare(a[i], b[j]) then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    for k = i, #a do\n      c[#c + 1] = a[k]\n    end\n    for k = j, #b do\n      c[#c + 1] = b[k]\n    end\n    return c\n  end\n  local function merge_sort(a)\n    if #a <= 1 then\n      return a\n    end\n    local mid = #a // 2\n    local left = merge_sort(a:sub(1, mid))\n    local right = merge_sort(a:sub(mid + 1, #a))\n    return merge(left, right)\n  end\n  local function find_largest(a, b)\n    local c = {}\n    for i = 1, #a do\n      for j = 1, #b do\n        c[#c + 1] = {a[i], b[j]}\n      end\n    end\n    return merge_sort(c)\n  end\n  local function find_largest_n(a, b, N)\n    local c = find_largest(a, b)\n    local d = {}\n    for i = 1, N do\n      d[#d + 1] = c[i]\n    end\n    return d\n  end\n  return find_largest_n(nums1, nums2, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2gl53zfd.lua:31: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp2gl53zfd.lua:31: in function </tmp/tmp2gl53zfd.lua:26>\n\t(...tail calls...)\n\t/tmp/tmp2gl53zfd.lua:45: in function </tmp/tmp2gl53zfd.lua:44>\n\t(...tail calls...)\n\t/tmp/tmp2gl53zfd.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local N = N or 1\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local function compare(a, b)\n        return a > b\n    end\n    table.sort(nums1, compare)\n    table.sort(nums2, compare)\n    local i, j = 1, 1\n    local res = {}\n    while i <= #nums1 and j <= #nums2 do\n        if nums1[i] < nums2[j] then\n            table.insert(res, nums1[i] * nums2[j])\n            i = i + 1\n        else\n            table.insert(res, nums1[i] * nums2[j])\n            j = j + 1\n        end\n    end\n    while i <= #nums1 do\n        table.insert(res, nums1[i] * nums2[#nums2])\n        i = i + 1\n    end\n    while j <= #nums2 do\n        table.insert(res, nums1[#nums1] * nums2[j])\n        j = j + 1\n    end\n    table.sort(res, compare)\n    return res[1], res[2], res[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxq5t8ot.lua:34: expected: {60, 54, 50}\nactual: 60\nstack traceback:\n\t/tmp/tmpqxq5t8ot.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local max_prod = 0\n    local max_i, max_j = 0, 0\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local prod = nums1[i] * nums2[j]\n            if prod > max_prod then\n                max_prod = prod\n                max_i, max_j = i, j\n            end\n        end\n    end\n    return max_i, max_j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpnh3f6c.lua:20: expected: {60, 54, 50}\nactual: 6\nstack traceback:\n\t/tmp/tmplpnh3f6c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmc2_kzc.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmprmc2_kzc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        products[#products + 1] = product\n      elseif product > products[N] then\n        products[N] = product\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2rcgcsq.lua:20: expected: {60, 54, 50}\nactual: {3, 6, 60}\nstack traceback:\n\t/tmp/tmpa2rcgcsq.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(nums1, nums2)\n    local res = {}\n    local i, j = 1, 1\n    while i <= #nums1 and j <= #nums2 do\n      if compare(nums1[i], nums2[j]) then\n        table.insert(res, nums1[i])\n        i = i + 1\n      else\n        table.insert(res, nums2[j])\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      table.insert(res, nums1[i])\n      i = i + 1\n    end\n    while j <= #nums2 do\n      table.insert(res, nums2[j])\n      j = j + 1\n    end\n    return res\n  end\n  local function find_largest(nums, N)\n    local res = {}\n    for i = 1, #nums do\n      for j = i + 1, #nums do\n        local prod = {nums[i], nums[j]}\n        if #res < N then\n          table.insert(res, prod)\n        else\n          if compare(prod, res[1]) then\n            table.remove(res, 1)\n            table.insert(res, prod)\n          else\n            break\n          end\n        end\n      end\n    end\n    return res\n  end\n  local res1 = find_largest(nums1, N)\n  local res2 = find_largest(nums2, N)\n  local res = merge(res1, res2)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d7wdxnt.lua:56: expected: {60, 54, 50}\nactual: {{8, 9}, {8, 10}, {9, 10}, {4, 5}, {4, 6}, {5, 6}}\nstack traceback:\n\t/tmp/tmp3d7wdxnt.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(nums1, nums2)\n    local res = {}\n    local i, j = 1, 1\n    while i <= #nums1 and j <= #nums2 do\n      if compare(nums1[i], nums2[j]) then\n        table.insert(res, nums1[i])\n        i = i + 1\n      else\n        table.insert(res, nums2[j])\n        j = j + 1\n      end\n    end\n    while i <= #nums1 do\n      table.insert(res, nums1[i])\n      i = i + 1\n    end\n    while j <= #nums2 do\n      table.insert(res, nums2[j])\n      j = j + 1\n    end\n    return res\n  end\n  local function merge_sort(nums)\n    if #nums <= 1 then return nums end\n    local mid = math.floor(#nums / 2)\n    local left = merge_sort(table.slice(nums, 1, mid))\n    local right = merge_sort(table.slice(nums, mid + 1))\n    return merge(left, right)\n  end\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(res, {nums1[i], nums2[j]})\n    end\n  end\n  res = merge_sort(res)\n  return table.slice(res, 1, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp40e_v1xp.lua:31: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp40e_v1xp.lua:31: in local 'merge_sort'\n\t/tmp/tmp40e_v1xp.lua:41: in local 'candidate'\n\t/tmp/tmp40e_v1xp.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i, num1 in ipairs(nums1) do\n    for j, num2 in ipairs(nums2) do\n      table.insert(products, num1 * num2)\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa82n85bi.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpa82n85bi.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function find_kth(nums1, nums2, k)\n    local m, n = #nums1, #nums2\n    if m > n then\n      return find_kth(nums2, nums1, k)\n    end\n    if m == 0 then\n      return nums2[k]\n    end\n    if k == 1 then\n      return math.min(nums1[1], nums2[1])\n    end\n    local i = math.min(m, k / 2)\n    local j = math.min(n, k / 2)\n    if nums1[i] > nums2[j] then\n      return find_kth(nums1, {unpack(nums2, j + 1)}, k - j)\n    else\n      return find_kth({unpack(nums1, i + 1)}, nums2, k - i)\n    end\n  end\n  local function find_kth_pair(nums1, nums2, k)\n    local m, n = #nums1, #nums2\n    if m > n then\n      return find_kth_pair(nums2, nums1, k)\n    end\n    if m == 0 then\n      return nums2[k], nums2[k]\n    end\n    if k == 1 then\n      return math.min(nums1[1], nums2[1]), math.max(nums1[1], nums2[1])\n    end\n    local i = math.min(m, k / 2)\n    local j = math.min(n, k / 2)\n    if nums1[i] > nums2[j] then\n      return find_kth_pair(nums1, {unpack(nums2, j + 1)}, k - j)\n    else\n      return find_kth_pair({unpack(nums1, i + 1)}, nums2, k - i)\n    end\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr6yorokx.lua:53: 'end' expected (to close 'function' at line 25) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function comp(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local heap = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local pair = {nums1[i], nums2[j]}\n      if #heap < N then\n        table.insert(heap, pair)\n        table.sort(heap, comp)\n      elseif pair[1] * pair[2] > heap[1][1] * heap[1][2] then\n        heap[1] = pair\n        table.sort(heap, comp)\n      end\n    end\n  end\n  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lcpneym.lua:25: expected: {60, 54, 50}\nactual: {{6, 10}, {1, 6}, {1, 3}}\nstack traceback:\n\t/tmp/tmp1lcpneym.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[#products - i + 1])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local heap = {}\n  local heap_size = 0\n  local function heap_push(x)\n    heap_size = heap_size + 1\n    heap[heap_size] = x\n    local i = heap_size\n    while i > 1 do\n      local j = math.floor(i / 2)\n      if heap[j] < heap[i] then\n        heap[j], heap[i] = heap[i], heap[j]\n        i = j\n      else\n        break\n      end\n    end\n  end\n  local function heap_pop()\n    local x = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    while i * 2 <= heap_size do\n      local j = i * 2\n      if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n        j = j + 1\n      end\n      if heap[i] < heap[j] then\n        heap[i], heap[j] = heap[j], heap[i]\n        i = j\n      else\n        break\n      end\n    end\n    return x\n  end\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local x = nums1[i] * nums2[j]\n      if heap_size < N then\n        heap_push(x)\n      elseif x > heap[1] then\n        heap_pop()\n        heap_push(x)\n      end\n    end\n  end\n  local res = {}\n  while heap_size > 0 do\n    res[#res + 1] = heap_pop()\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3jrghhn.lua:59: expected: {60, 54, 50}\nactual: {60, 6, 3}\nstack traceback:\n\t/tmp/tmpa3jrghhn.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, N do\n    local max_product = 0\n    local max_i, max_j\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        local product = nums1[i] * nums2[j]\n        if product > max_product then\n          max_product = product\n          max_i = i\n          max_j = j\n        end\n      end\n    end\n    table.insert(result, max_product)\n    nums1[max_i] = 0\n    nums2[max_j] = 0\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacfund6k.lua:27: expected: {60, 54, 50}\nactual: {60, 45, 32}\nstack traceback:\n\t/tmp/tmpacfund6k.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(nums1, nums2)\n    local res = {}\n    for i = 1, #nums1 do\n      for j = 1, #nums2 do\n        table.insert(res, {nums1[i], nums2[j]})\n      end\n    end\n    return res\n  end\n  local function find(nums, N)\n    table.sort(nums, compare)\n    local res = {}\n    for i = 1, N do\n      table.insert(res, nums[i])\n    end\n    return res\n  end\n  local nums = merge(nums1, nums2)\n  return find(nums, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvdu5rmmw.lua:30: expected: {60, 54, 50}\nactual: {{6, 10}, {6, 9}, {5, 10}}\nstack traceback:\n\t/tmp/tmpvdu5rmmw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, n1 in ipairs(nums1) do\n    for _, n2 in ipairs(nums2) do\n      table.insert(products, n1 * n2)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for _, n1 in ipairs(nums1) do\n    for _, n2 in ipairs(nums2) do\n      table.insert(result, n1 * n2)\n    end\n  end\n  table.sort(result)\n  return result[#result - N + 1], result[#result - N + 2], result[#result - N + 3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw9b1_qy.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpgw9b1_qy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local p = nums1[i] * nums2[j]\n      if #res < N then\n        table.insert(res, p)\n        table.sort(res)\n      elseif p > res[1] then\n        res[1] = p\n        table.sort(res)\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kdfkci7.lua:22: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmp8kdfkci7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = 1, N do\n    result[i] = products[#products - i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local n1, n2 = #nums1, #nums2\n  local i, j = 1, 1\n  local max_product = nums1[1] * nums2[1]\n  local max_i, max_j = 1, 1\n  local products = {}\n  for k = 1, N do\n    if nums1[i] * nums2[j] > max_product then\n      max_product = nums1[i] * nums2[j]\n      max_i, max_j = i, j\n    end\n    if i == n1 then\n      j = j + 1\n    elseif j == n2 then\n      i = i + 1\n    elseif nums1[i + 1] * nums2[j] > nums1[i] * nums2[j + 1] then\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return max_i, max_j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubhxgef1.lua:29: expected: {60, 54, 50}\nactual: 2\nstack traceback:\n\t/tmp/tmpubhxgef1.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  local result = {}\n  for i = 1, N do\n    table.insert(result, products[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local result = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #result < N then\n        table.insert(result, product)\n      elseif product > result[1] then\n        table.remove(result, 1)\n        table.insert(result, product)\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp482dod3n.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmp482dod3n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local heap = {}\n    local heap_size = 0\n    local function heap_insert(x)\n        heap_size = heap_size + 1\n        heap[heap_size] = x\n        local i = heap_size\n        while i > 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n    end\n    local function heap_pop()\n        local x = heap[1]\n        heap[1] = heap[heap_size]\n        heap_size = heap_size - 1\n        local i = 1\n        while i * 2 <= heap_size do\n            local j = i * 2\n            if j + 1 <= heap_size and heap[j + 1] > heap[j] then\n                j = j + 1\n            end\n            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n                break\n            end\n        end\n        return x\n    end\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            local x = nums1[i] * nums2[j]\n            if heap_size < N then\n                heap_insert(x)\n            elseif x > heap[1] then\n                heap_pop()\n                heap_insert(x)\n            end\n        end\n    end\n    local result = {}\n    for i = 1, N do\n        result[i] = heap_pop()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux8egwq3.lua:59: expected: {60, 54, 50}\nactual: {60, 6, 3}\nstack traceback:\n\t/tmp/tmpux8egwq3.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function cmp(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local t = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      t[#t + 1] = {nums1[i], nums2[j]}\n    end\n  end\n  table.sort(t, cmp)\n  local r = {}\n  for i = 1, N do\n    r[#r + 1] = t[i]\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpme285vk2.lua:23: expected: {60, 54, 50}\nactual: {{6, 10}, {6, 9}, {5, 10}}\nstack traceback:\n\t/tmp/tmpme285vk2.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if #products < N then\n        table.insert(products, product)\n      elseif product > products[1] then\n        table.remove(products, 1)\n        table.insert(products, product)\n      end\n    end\n  end\n  return products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg92xc_ga.lua:21: expected: {60, 54, 50}\nactual: {48, 54, 60}\nstack traceback:\n\t/tmp/tmpg92xc_ga.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function cmp(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function cmp2(a, b)\n    return a[1] > b[1]\n  end\n  local res = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(res, {nums1[i], nums2[j]})\n    end\n  end\n  table.sort(res, cmp)\n  local res2 = {}\n  for i = 1, N do\n    table.insert(res2, res[i])\n  end\n  table.sort(res2, cmp2)\n  return res2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kluns0i.lua:27: expected: {60, 54, 50}\nactual: {{6, 10}, {6, 9}, {5, 10}}\nstack traceback:\n\t/tmp/tmp6kluns0i.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for _, n1 in ipairs(nums1) do\n        for _, n2 in ipairs(nums2) do\n            table.insert(products, n1 * n2)\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsttyhctm.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpsttyhctm.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function compare(a, b)\n    return a[1] * a[2] > b[1] * b[2]\n  end\n  local function merge(a, b)\n    local i, j = 1, 1\n    local c = {}\n    while i <= #a and j <= #b do\n      if compare(a[i], b[j]) then\n        c[#c + 1] = a[i]\n        i = i + 1\n      else\n        c[#c + 1] = b[j]\n        j = j + 1\n      end\n    end\n    while i <= #a do\n      c[#c + 1] = a[i]\n      i = i + 1\n    end\n    while j <= #b do\n      c[#c + 1] = b[j]\n      j = j + 1\n    end\n    return c\n  end\n  local function merge_sort(a)\n    if #a <= 1 then\n      return a\n    end\n    local mid = math.floor(#a / 2)\n    local left = merge_sort(a, 1, mid)\n    local right = merge_sort(a, mid + 1, #a)\n    return merge(left, right)\n  end\n  local function find_largest(a, b, N)\n    local c = {}\n    for i = 1, #a do\n      for j = 1, #b do\n        c[#c + 1] = {a[i], b[j]}\n      end\n    end\n    c = merge_sort(c)\n    local result = {}\n    for i = 1, N do\n      result[#result + 1] = c[i]\n    end\n    return result\n  end\n  local a = merge_sort(nums1)\n  local b = merge_sort(nums2)\n  return find_largest(a, b, N)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7c5kue4.lua:32: stack overflow\nstack traceback:\n\t/tmp/tmpe7c5kue4.lua:32: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t/tmp/tmpe7c5kue4.lua:33: in upvalue 'merge_sort'\n\t...\t(skipping 333293 levels)\n\t/tmp/tmpe7c5kue4.lua:51: in local 'candidate'\n\t/tmp/tmpe7c5kue4.lua:59: in function 'test_humaneval'\n\nRan 1 tests in 0.190 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local max_products = {}\n  local max_product = 0\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if product > max_product then\n        max_product = product\n        max_products[#max_products + 1] = {product, nums1[i], nums2[j]}\n      end\n    end\n  end\n  table.sort(max_products, function(a, b) return a[1] > b[1] end)\n  local result = {}\n  for i = 1, N do\n    result[#result + 1] = max_products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn80om0aj.lua:25: expected: {60, 54, 50}\nactual: {{60, 6, 10}, {54, 6, 9}, {50, 5, 10}}\nstack traceback:\n\t/tmp/tmpn80om0aj.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = 1, N do\n    result[i] = products[#products - i + 1]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local function find_max(nums, N)\n    local max_nums = {}\n    local max_num = nums[1]\n    local max_index = 1\n    for i = 1, N do\n      max_nums[i] = max_num\n      for j = max_index + 1, #nums do\n        if nums[j] > max_num then\n          max_num = nums[j]\n          max_index = j\n        end\n      end\n    end\n    return max_nums\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_oa6gsx6.lua:27: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for _, num1 in ipairs(nums1) do\n    for _, num2 in ipairs(nums2) do\n      table.insert(products, num1 * num2)\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[1], products[2], products[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdw32ofk.lua:16: expected: {60, 54, 50}\nactual: 60\nstack traceback:\n\t/tmp/tmpgdw32ofk.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      table.insert(products, nums1[i] * nums2[j])\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrw5wiex.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpzrw5wiex.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  local result = {}\n  for i = #products - N + 1, #products do\n    result[#result + 1] = products[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc4qaxxp.lua:20: expected: {60, 54, 50}\nactual: {50, 54, 60}\nstack traceback:\n\t/tmp/tmpnc4qaxxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[1], products[2], products[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjy7e5m9n.lua:16: expected: {60, 54, 50}\nactual: 60\nstack traceback:\n\t/tmp/tmpjy7e5m9n.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            table.insert(products, nums1[i] * nums2[j])\n        end\n    end\n    table.sort(products, function(a, b) return a > b end)\n    local result = {}\n    for i = 1, N do\n        table.insert(result, products[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local products = {}\n    for i = 1, #nums1 do\n        for j = 1, #nums2 do\n            products[#products + 1] = nums1[i] * nums2[j]\n        end\n    end\n    table.sort(products)\n    return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqm87kcy.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpvqm87kcy.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local max_products = {}\n  local max_product = 0\n  local max_i = 0\n  local max_j = 0\n  local max_k = 0\n  local max_l = 0\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      if product > max_product then\n        max_product = product\n        max_i = i\n        max_j = j\n      end\n    end\n  end\n  max_products[1] = {max_i, max_j}\n  for k = 1, #nums1 do\n    for l = 1, #nums2 do\n      if k ~= max_i and l ~= max_j then\n        local product = nums1[k] * nums2[l]\n        if product > max_product then\n          max_product = product\n          max_k = k\n          max_l = l\n        end\n      end\n    end\n  end\n  max_products[2] = {max_k, max_l}\n  return max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb73ojbu.lua:39: expected: {60, 54, 50}\nactual: {{6, 5}, {0, 0}}\nstack traceback:\n\t/tmp/tmpkb73ojbu.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products, function(a, b) return a > b end)\n  return products[N]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027714,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7667yox.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpq7667yox.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local function compare(a, b)\n        return a > b\n    end\n    table.sort(nums1, compare)\n    table.sort(nums2, compare)\n    local result = {}\n    local i, j = 1, 1\n    while N > 0 do\n        local p1 = nums1[i] * nums2[1]\n        local p2 = nums1[1] * nums2[j]\n        if p1 > p2 then\n            table.insert(result, p1)\n            i = i + 1\n        else\n            table.insert(result, p2)\n            j = j + 1\n        end\n        N = N - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan_85yze.lua:28: expected: {60, 54, 50}\nactual: {60, 60, 54}\nstack traceback:\n\t/tmp/tmpan_85yze.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      products[#products + 1] = nums1[i] * nums2[j]\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122871,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1wcv9bj.lua:16: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpx1wcv9bj.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n  local N = N or 1\n  local products = {}\n  for i = 1, #nums1 do\n    for j = 1, #nums2 do\n      local product = nums1[i] * nums2[j]\n      table.insert(products, product)\n    end\n  end\n  table.sort(products)\n  return products[#products - N + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeelfo1dy.lua:18: expected: {60, 54, 50}\nactual: 50\nstack traceback:\n\t/tmp/tmpeelfo1dy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the specified number of largest products from two given tables, selecting one factor from each table.\nlocal function large_product(nums1, nums2, N)\n    local max_products = {}\n    local max_product = 0\n    for _, num1 in ipairs(nums1) do\n        for _, num2 in ipairs(nums2) do\n            local product = num1 * num2\n            if product > max_product then\n                max_product = product\n                table.insert(max_products, {num1, num2})\n            end\n        end\n    end\n    return max_products\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = large_product\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3), {60, 54, 50})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4), {60, 54, 50, 48})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5), {60, 54, 50, 48, 45})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122872,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y1psepr.lua:20: expected: \n{60, 54, 50}\nactual: \n{\n    {1, 3},\n    {1, 6},\n    {1, 8},\n    {1, 9},\n    {1, 10},\n    {2, 6},\n    {2, 8},\n    {2, 9},\n    {2, 10},\n    {3, 8},\n    {3, 9},\n    {3, 10},\n    {4, 8},\n    {4, 9},\n    {4, 10},\n    {5, 9},\n    {5, 10},\n    {6, 9},\n    {6, 10}\n}\nstack traceback:\n\t/tmp/tmp6y1psepr.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}