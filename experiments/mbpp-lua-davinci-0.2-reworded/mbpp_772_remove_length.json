{
  "name": "mbpp_772_remove_length",
  "language": "lua",
  "prompt": "-- Write a function to remove all the words with k length in the given string.\nlocal function remove_length(test_str, K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_length\n    lu.assertEquals(candidate('The person is most value tet', 3), 'person is most value')\n    lu.assertEquals(candidate('If you told me about this ok', 4), 'If you me about ok')\n    lu.assertEquals(candidate('Forces of darkeness is come into the play', 4), 'Forces of darkeness is the')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal str_list = {}\n\tfor word in string.gmatch(test_str, \"%S+\") do\n\t\tif string.len(word) ~= K then\n\t\t\ttable.insert(str_list, word)\n\t\tend\n\tend\n\treturn table.concat(str_list, \" \")\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, '%w+') do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, ' ')\nend",
    "    local str = test_str\n    local len = string.len(str)\n    local new_str = \"\"\n    local word = \"\"\n    for i = 1, len do\n        local char = string.sub(str, i, i)\n        if char ~= \" \" then\n            word = word .. char\n        else\n            if string.len(word) ~= K then\n                new_str = new_str .. word .. \" \"\n            end\n            word = \"\"\n        end\n    end\n    if string.len(word) ~= K then\n        new_str = new_str .. word\n    end\n    return new_str\nend",
    "    local str = \"\"\n    for word in string.gmatch(test_str, \"%S+\") do\n        if string.len(word) ~= K then\n            str = str .. word .. \" \"\n        end\n    end\n    return str\nend",
    "    local str_tab = {}\n    for word in string.gmatch(test_str, \"%S+\") do\n        if string.len(word) ~= K then\n            table.insert(str_tab, word)\n        end\n    end\n    return table.concat(str_tab, \" \")\nend",
    "\tlocal str = \"\"\n\tfor word in string.gmatch(test_str, \"%w+\") do\n\t\tif string.len(word) ~= K then\n\t\t\tstr = str .. word .. \" \"\n\t\tend\n\tend\n\treturn str\nend",
    "    local str_list = string.split(test_str, \" \")\n    local new_list = {}\n    for i, v in ipairs(str_list) do\n        if string.len(v) ~= K then\n            table.insert(new_list, v)\n        end\n    end\n    return table.concat(new_list, \" \")\nend",
    "\tlocal words = {}\n\tlocal i = 1\n\tfor word in string.gmatch(test_str, \"%w+\") do\n\t\twords[i] = word\n\t\ti = i + 1\n\tend\n\tlocal new_str = \"\"\n\tfor i = 1, #words do\n\t\tif #words[i] ~= K then\n\t\t\tnew_str = new_str .. words[i] .. \" \"\n\t\tend\n\tend\n\treturn new_str\nend",
    "    local res = {}\n    local str = string.gsub(test_str, \"%s+\", \" \")\n    for word in string.gmatch(str, \"%S+\") do\n        if string.len(word) ~= K then\n            table.insert(res, word)\n        end\n    end\n    return table.concat(res, \" \")\nend",
    "    local words = {}\n    local index = 1\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            words[index] = word\n            index = index + 1\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%S+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "\tlocal str = \"\"\n\tlocal str_table = {}\n\tfor word in string.gmatch(test_str, \"%w+\") do\n\t\ttable.insert(str_table, word)\n\tend\n\tfor i = 1, #str_table do\n\t\tif #str_table[i] ~= K then\n\t\t\tstr = str .. str_table[i] .. \" \"\n\t\tend\n\tend\n\treturn str\nend",
    "\tlocal str = test_str\n\tlocal len = string.len(str)\n\tlocal new_str = \"\"\n\tlocal word = \"\"\n\tfor i = 1, len do\n\t\tif string.sub(str, i, i) == \" \" then\n\t\t\tif string.len(word) ~= K then\n\t\t\t\tnew_str = new_str .. word .. \" \"\n\t\t\tend\n\t\t\tword = \"\"\n\t\telse\n\t\t\tword = word .. string.sub(str, i, i)\n\t\tend\n\tend\n\tif string.len(word) ~= K then\n\t\tnew_str = new_str .. word\n\tend\n\treturn new_str\nend",
    "\tlocal new_str = \"\"\n\tlocal words = string.split(test_str, \" \")\n\tfor _, word in ipairs(words) do\n\t\tif #word ~= K then\n\t\t\tnew_str = new_str .. word .. \" \"\n\t\tend\n\tend\n\treturn new_str\nend",
    "    local words = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if #word ~= K then\n            table.insert(words, word)\n        end\n    end\n    return table.concat(words, \" \")\nend",
    "    local str_tbl = {}\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            table.insert(str_tbl, word)\n        end\n    end\n    return table.concat(str_tbl, \" \")\nend",
    "    local str_list = string.split(test_str, \" \")\n    local new_str = \"\"\n    for _, v in ipairs(str_list) do\n        if string.len(v) ~= K then\n            new_str = new_str .. v .. \" \"\n        end\n    end\n    return new_str\nend",
    "    local str_table = {}\n    local str_table_index = 1\n    local str_table_len = 0\n    local str_table_len_index = 1\n    local str_table_len_index_value = 0\n    local str_table_len_index_value_index = 1\n    local str_table_len_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = 1\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0\n    local str_table_len_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = 1\n    local str_table_len",
    "    local str = \"\"\n    for word in string.gmatch(test_str, \"%w+\") do\n        if string.len(word) ~= K then\n            str = str..word..\" \"\n        end\n    end\n    return str\nend",
    "    local str_list = split(test_str, \" \")\n    local new_list = {}\n    for _, v in ipairs(str_list) do\n        if #v ~= K then\n            table.insert(new_list, v)\n        end\n    end\n    return table.concat(new_list, \" \")\nend"
  ]
}