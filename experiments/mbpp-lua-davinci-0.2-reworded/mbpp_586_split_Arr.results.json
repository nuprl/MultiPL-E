{
  "name": "mbpp_586_split_Arr",
  "language": "lua",
  "prompt": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal ret = {}\n\tfor i = 1, n do\n\t\tret[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(ret, l[i])\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpwrg6v5.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpwpwrg6v5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #a do\n    l[#l + 1] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18sb8rwb.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp18sb8rwb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a, b = {}, {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    b[i - n] = l[i]\n  end\n  for i = 1, #a do\n    b[#b + 1] = a[i]\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = 1, #l - n do\n\t\tl[i] = l[i + n]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx8z82g7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcx8z82g7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc980wip0.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpc980wip0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmhi04o1.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpvmhi04o1.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6bnsonn.lua:18: expected: {5, 6, 52, 36, 12, 10}\nactual: nil\nstack traceback:\n\t/tmp/tmpt6bnsonn.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = n + 1, #l do\n\t\ttable.insert(t, l[i])\n\tend\n\tfor i = 1, n do\n\t\ttable.insert(t, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i=1,n do\n        a[i] = l[i]\n    end\n    for i=n+1,#l do\n        l[i-n] = l[i]\n    end\n    for i=1,n do\n        l[#l+1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph92bhqgc.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmph92bhqgc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp376crw10.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp376crw10.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc980wip0.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpc980wip0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i=1,n do\n        table.insert(a, l[i])\n    end\n    for i=1,#a do\n        table.remove(l, 1)\n    end\n    for i=1,#a do\n        table.insert(l, a[i])\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcoozif9.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpgcoozif9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6bnsonn.lua:18: expected: {5, 6, 52, 36, 12, 10}\nactual: nil\nstack traceback:\n\t/tmp/tmpt6bnsonn.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65n3liyd.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp65n3liyd.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = 1, #l - n do\n    l[i] = l[i + n]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i=1,n do\n    a[i] = l[i]\n  end\n  for i=n+1,#l do\n    table.insert(a, l[i])\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, l[i])\n    end\n    for i = 1, n do\n        table.remove(l, 1)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ev8ecep.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmp1ev8ecep.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = 1, #l - n do\n\t\tl[i] = l[i + n]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx8z82g7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcx8z82g7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i=1,n do\n    t[i] = l[i]\n  end\n  for i=n+1,#l do\n    l[i-n] = l[i]\n  end\n  for i=1,n do\n    l[#l+1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpbwyl9u.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpwpbwyl9u.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  local b = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    b[i - n] = l[i]\n  end\n  for i = 1, #b do\n    a[#a + 1] = b[i]\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtk8zy59.lua:20: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmprtk8zy59.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = #l - n + 1, #l do\n        l[i] = a[i - #l + n]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local l1 = {}\n  local l2 = {}\n  for i = 1, n do\n    l1[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l2[i - n] = l[i]\n  end\n  for i = 1, #l1 do\n    l2[#l2 + 1] = l1[i]\n  end\n  return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, i - n, l[i])\n    end\n    for i = 1, n do\n        table.remove(l)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbdkey5h.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpfbdkey5h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, l[i])\n    end\n    for i = 1, n do\n        table.remove(l, 1)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ev8ecep.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmp1ev8ecep.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[n + i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqls9pcg.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpqqls9pcg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(t, l[i])\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaps30bh.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpkaps30bh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4dfqyd8.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpk4dfqyd8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmhi04o1.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpvmhi04o1.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = 1, #l - n do\n\t\tl[i] = l[i + n]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx8z82g7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcx8z82g7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i=1,n do\n        a[i] = l[i]\n    end\n    for i=1,#l-n do\n        l[i] = l[n+i]\n    end\n    for i=1,#a do\n        l[#l+1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlm0hcz9.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpwlm0hcz9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = #l - n + 1, #l do\n        l[i] = a[i - #l + n]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, #l do\n\t\tt[i] = l[i]\n\tend\n\tfor i = 1, n do\n\t\ttable.insert(t, table.remove(t, 1))\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = 1, #l - n do\n\t\tl[i] = l[i + n]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcx8z82g7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcx8z82g7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, 1, l[i])\n    end\n    for i = 1, n do\n        table.remove(l)\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhnzkbiq.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 5, 5, 5, 12, 10, 5, 6}\nstack traceback:\n\t/tmp/tmpdhnzkbiq.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i=n+1, #l do\n\t\ttable.insert(t, l[i])\n\tend\n\tfor i=1, n do\n\t\ttable.insert(t, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  local b = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    b[i - n] = l[i]\n  end\n  for i = 1, #b do\n    table.insert(a, b[i])\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpds0zd0u2.lua:20: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpds0zd0u2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp376crw10.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp376crw10.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a, b = {}, {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tb[i - n] = l[i]\n\tend\n\tfor i = 1, #a do\n\t\tb[#b + 1] = a[i]\n\tend\n\treturn b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n+1, #l do\n\t\tl[i-n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l+1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0f2udg8.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpx0f2udg8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a, b = {}, {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    b[i - n] = l[i]\n  end\n  for i = 1, #b do\n    a[#a + 1] = b[i]\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbecp5uai.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpbecp5uai.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #b do\n        a[#a + 1] = b[i]\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprehoe5y0.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmprehoe5y0.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a, b = {}, {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tb[i - n] = l[i]\n\tend\n\tfor i = 1, #a do\n\t\tb[#b + 1] = a[i]\n\tend\n\treturn b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9actelx.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpe9actelx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #a do\n    l[#l + 1] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18sb8rwb.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp18sb8rwb.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = table.remove(l, 1)\n\tend\n\tfor i = 1, n do\n\t\ttable.insert(l, t[i])\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp376crw10.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp376crw10.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9actelx.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpe9actelx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(a, l[i])\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0g35sk7.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpn0g35sk7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local res = {}\n  for i = 1, n do\n    res[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = res[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2lm4hvz.lua:18: expected: {5, 6, 52, 36, 12, 10}\nactual: nil\nstack traceback:\n\t/tmp/tmps2lm4hvz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, 1, l[i])\n    end\n    for i = 1, n do\n        table.remove(l)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_kkwxr7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpf_kkwxr7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\tfor i = 1, n do\n\t\ttable.remove(l, 1)\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppl2x1t7h.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmppl2x1t7h.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6bnsonn.lua:18: expected: {5, 6, 52, 36, 12, 10}\nactual: nil\nstack traceback:\n\t/tmp/tmpt6bnsonn.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = n + 1, #l do\n\t\tt[#t + 1] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tt[#t + 1] = l[i]\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tlocal i = 1\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wesje59.lua:20: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp3wesje59.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i=1,n do\n        a[i] = l[i]\n    end\n    for i=n+1,#l do\n        table.insert(a, l[i])\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhrlyb0n.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpbhrlyb0n.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #b do\n        a[#a + 1] = b[i]\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyoouflw.lua:20: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpnyoouflw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz5jhfke.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcz5jhfke.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = n + 1, #l do\n\t\tt[#t + 1] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tt[#t + 1] = l[i]\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[n + i]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e3z0hz3.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp6e3z0hz3.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9actelx.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpe9actelx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = a[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a, b = {}, {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    b[i - n] = l[i]\n  end\n  for i = 1, #a do\n    b[#b + 1] = a[i]\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i=1,n do\n    a[i] = l[i]\n  end\n  for i=n+1,#l do\n    l[i-n] = l[i]\n  end\n  for i=1,#a do\n    l[#l+1] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrdikukl.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpbrdikukl.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local l1, l2 = {}, {}\n  for i = 1, n do\n    l1[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l2[i - n] = l[i]\n  end\n  for i = 1, #l1 do\n    l2[#l2 + 1] = l1[i]\n  end\n  return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(t, l[i])\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaps30bh.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpkaps30bh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = 1, #l - n do\n    l[i] = l[i + n]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc980wip0.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpc980wip0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4dfqyd8.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpk4dfqyd8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal first = {}\n\tlocal second = {}\n\tfor i = 1, n do\n\t\tfirst[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tsecond[i - n] = l[i]\n\tend\n\tfor i = 1, #first do\n\t\tsecond[#second + 1] = first[i]\n\tend\n\treturn second\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = 1, #l - n do\n    l[i] = l[i + n]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4dfqyd8.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpk4dfqyd8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc980wip0.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpc980wip0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = a[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = a[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfp9_7vp9.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpfp9_7vp9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcoozif9.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpgcoozif9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal first = {}\n\tlocal second = {}\n\tfor i = 1, n do\n\t\tfirst[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tsecond[i - n] = l[i]\n\tend\n\tfor i = 1, #first do\n\t\tsecond[#second + 1] = first[i]\n\tend\n\treturn second\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tlocal len = #l\n\tfor i = n + 1, len do\n\t\tt[#t + 1] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tt[#t + 1] = l[i]\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9actelx.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpe9actelx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = n + 1, #l do\n\t\tt[#t + 1] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tt[#t + 1] = l[i]\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[n + i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqls9pcg.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpqqls9pcg.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[#b + 1] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i=1,n do\n        a[i] = l[i]\n    end\n    for i=1,#l-n do\n        l[i] = l[n+i]\n    end\n    for i=1,#a do\n        l[#l+1] = a[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlm0hcz9.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpwlm0hcz9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4dfqyd8.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpk4dfqyd8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, #a do\n        l[#l + 1] = a[i]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wwt9arq.lua:18: expected: {5, 6, 52, 36, 12, 10}\nactual: nil\nstack traceback:\n\t/tmp/tmp9wwt9arq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = #l - n + 1, #l do\n        l[i] = t[i - #l + n]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = 1, #l - n do\n    l[i] = l[i + n]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[#t + 1] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7skx_e7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp_7skx_e7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = n + 1, #l do\n\t\ttable.insert(t, l[i])\n\tend\n\tfor i = 1, n do\n\t\ttable.insert(t, l[i])\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local l1 = {}\n  local l2 = {}\n  for i = 1, n do\n    l1[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l2[i - n] = l[i]\n  end\n  for i = 1, #l1 do\n    l2[#l2 + 1] = l1[i]\n  end\n  return l2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l + 1 - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj47swhrc.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 12, 10}\nstack traceback:\n\t/tmp/tmpj47swhrc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(t, l[i])\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaps30bh.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpkaps30bh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        table.insert(t, l[i])\n    end\n    for i = n + 1, #l do\n        table.insert(l, 1, l[i])\n    end\n    for i = 1, n do\n        table.remove(l)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_kkwxr7.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpf_kkwxr7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal a = {}\n\tfor i = 1, n do\n\t\ta[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\ttable.insert(l, l[i])\n\tend\n\tfor i = 1, n do\n\t\ttable.remove(l, 1)\n\tend\n\treturn a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsad52w37.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpsad52w37.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz5jhfke.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcz5jhfke.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    table.insert(t, l[i])\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqw8e2l8.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmplqw8e2l8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = 1, #l - n do\n        l[i] = l[i + n]\n    end\n    for i = 1, #t do\n        l[#l + 1] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcz5jhfke.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpcz5jhfke.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local t = {}\n    for i = 1, n do\n        t[i] = l[i]\n    end\n    for i = n + 1, #l do\n        l[i - n] = l[i]\n    end\n    for i = 1, n do\n        l[#l - n + i] = t[i]\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    table.insert(t, l[i])\n  end\n  for i = n + 1, #l do\n    table.insert(l, l[i])\n  end\n  for i = 1, n do\n    table.remove(l, 1)\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnphrkmo1.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10}\nstack traceback:\n\t/tmp/tmpnphrkmo1.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm0505za.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmprm0505za.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a, b = {}, {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        table.insert(a, l[i])\n    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0g35sk7.lua:16: expected: {5, 6, 52, 36, 12, 10}\nactual: {12, 10, 5, 6, 52, 36}\nstack traceback:\n\t/tmp/tmpn0g35sk7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t, i = {}, 1\n\tfor _, v in ipairs(l) do\n\t\tif i <= n then\n\t\t\tt[i] = v\n\t\t\ti = i + 1\n\t\telse\n\t\t\ttable.insert(l, v)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n    local a = {}\n    local b = {}\n    for i = 1, n do\n        a[i] = l[i]\n    end\n    for i = n + 1, #l do\n        b[i - n] = l[i]\n    end\n    for i = 1, #a do\n        b[#b + 1] = a[i]\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local a = {}\n  for i = 1, n do\n    a[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, n do\n    l[#l - n + i] = a[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n  local t = {}\n  for i = 1, n do\n    t[i] = l[i]\n  end\n  for i = n + 1, #l do\n    l[i - n] = l[i]\n  end\n  for i = 1, #t do\n    l[#l + 1] = t[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9actelx.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpe9actelx.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = #l - n + 1, #l do\n\t\tl[i] = t[i - #l + n]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, n do\n\t\tl[#l - n + i] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[#t + 1] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122404,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltmp0wsh.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmpltmp0wsh.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to split a table at the nth eelment and add the first part to the end.\nlocal function split_Arr(l, n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tt[i] = l[i]\n\tend\n\tfor i = n + 1, #l do\n\t\tl[i - n] = l[i]\n\tend\n\tfor i = 1, #t do\n\t\tl[#l + 1] = t[i]\n\tend\n\treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_Arr\n    lu.assertEquals(candidate({12, 10, 5, 6, 52, 36}, 2), {5, 6, 52, 36, 12, 10})\n    lu.assertEquals(candidate({1, 2, 3, 4}, 1), {2, 3, 4, 1})\n    lu.assertEquals(candidate({0, 1, 2, 3, 4, 5, 6, 7}, 3), {3, 4, 5, 6, 7, 0, 1, 2})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027867,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8baej_7w.lua:19: expected: {5, 6, 52, 36, 12, 10}\nactual: {5, 6, 52, 36, 52, 36, 12, 10}\nstack traceback:\n\t/tmp/tmp8baej_7w.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}