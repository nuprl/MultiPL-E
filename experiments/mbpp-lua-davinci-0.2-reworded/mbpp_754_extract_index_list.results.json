{
  "name": "mbpp_754_extract_index_list",
  "language": "lua",
  "prompt": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc56yamo.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpwc56yamo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdllqy5o.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzdllqy5o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2rxeb9p.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpt2rxeb9p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(list, i)\n\t\tend\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu1ik3z7.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpxu1ik3z7.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96m19mbt.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp96m19mbt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      index_list[#index_list + 1] = i\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_9mi3m2.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj_9mi3m2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in pairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru_cmr0e.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpru_cmr0e.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i, v in ipairs(l1) do\n    if v == l2[i] and v == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtk5fakn.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqtk5fakn.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i, v in ipairs(l1) do\n    if l2[i] == v and l3[i] == v then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh4nwrtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmh4nwrtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local t = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip3854wv.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpip3854wv.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqwvh975.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkqwvh975.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      index_list[#index_list + 1] = i\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_9mi3m2.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj_9mi3m2.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy8p_4ej.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmy8p_4ej.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i, v in ipairs(l1) do\n    if l2[i] == v and l3[i] == v then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmh4nwrtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmh4nwrtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy8p_4ej.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmy8p_4ej.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy8p_4ej.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmy8p_4ej.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2rxeb9p.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpt2rxeb9p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc56yamo.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpwc56yamo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local res = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(res, v)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppekyo89.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpppekyo89.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfy5noy1.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmptfy5noy1.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyza8um0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoyza8um0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyza8um0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoyza8um0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\tresult[#result + 1] = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdllqy5o.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzdllqy5o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqjj2_1z.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqqjj2_1z.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2rxeb9p.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpt2rxeb9p.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9yxl9hb.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj9yxl9hb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l1[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiargr6z.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpyiargr6z.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdllqy5o.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzdllqy5o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9yxl9hb.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj9yxl9hb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyza8um0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoyza8um0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tindex_list[#index_list + 1] = i\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7hu2y57.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpv7hu2y57.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz15ti6hr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpz15ti6hr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyza8um0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoyza8um0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tindex_list[#index_list + 1] = i\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7hu2y57.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpv7hu2y57.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9yxl9hb.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj9yxl9hb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l1[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsegw4yue.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpsegw4yue.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal result = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\tresult[#result + 1] = i\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc56yamo.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpwc56yamo.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local result = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyza8um0.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoyza8um0.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i, v in ipairs(l1) do\n\t\tif l2[i] == v and l3[i] == v then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuihu2oj.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmphuihu2oj.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz15ti6hr.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpz15ti6hr.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96m19mbt.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp96m19mbt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l1[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9yxl9hb.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpj9yxl9hb.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if v == l2[i] and v == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxkiow26.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpoxkiow26.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdllqy5o.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpzdllqy5o.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i, v in ipairs(l1) do\n    if l2[i] == v and l3[i] == v then\n      index_list[#index_list + 1] = i\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsm0_64jf.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpsm0_64jf.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5n6k82h4.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp5n6k82h4.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n\tlocal index_list = {}\n\tfor i = 1, #l1 do\n\t\tif l1[i] == l2[i] and l2[i] == l3[i] then\n\t\t\ttable.insert(index_list, i)\n\t\tend\n\tend\n\treturn index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t2xxckp.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp9t2xxckp.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo02v9y4b.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpo02v9y4b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(index_list, i)\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxhcddtw.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpkxhcddtw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n  local index_list = {}\n  for i = 1, #l1 do\n    if l1[i] == l2[i] and l2[i] == l3[i] then\n      table.insert(index_list, i)\n    end\n  end\n  return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqccs66as.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpqccs66as.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local result = {}\n    for i = 1, #l1 do\n        if l1[i] == l2[i] and l2[i] == l3[i] then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123110,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy8p_4ej.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmpmy8p_4ej.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- We say that an element is common for tables l1, l2, l3 if it appears in all three tables under the same index. Write a function to find common elements from three tables. The function should return a table.\nlocal function extract_index_list(l1, l2, l3)\n    local index_list = {}\n    for i, v in ipairs(l1) do\n        if l2[i] == v and l3[i] == v then\n            index_list[#index_list + 1] = i\n        end\n    end\n    return index_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = extract_index_list\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 7})\n    lu.assertEquals(candidate({1, 1, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 6, 5}, {0, 1, 2, 3, 4, 6, 7}), {1, 6})\n    lu.assertEquals(candidate({1, 1, 3, 4, 6, 5, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {1, 5})\n    lu.assertEquals(candidate({1, 2, 3, 4, 6, 6, 6}, {0, 1, 2, 3, 4, 5, 7}, {0, 1, 2, 3, 4, 5, 7}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027797,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96m19mbt.lua:15: expected: {1, 7}\nactual: {2, 7}\nstack traceback:\n\t/tmp/tmp96m19mbt.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}