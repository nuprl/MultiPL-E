{
  "name": "mbpp_57_find_Max_Num",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the largest number that can be formed with the given table of digits.\nlocal function find_Max_Num(arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_Max_Num\n    lu.assertEquals(candidate({1, 2, 3}), 321)\n    lu.assertEquals(candidate({4, 5, 6, 1}), 6541)\n    lu.assertEquals(candidate({1, 2, 3, 9}), 9321)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local max = 0\n  for i = 1, #arr do\n    local num = 0\n    for j = 1, #arr[i] do\n      num = num * 10 + arr[i][j]\n    end\n    if num > max then\n      max = num\n    end\n  end\n  return max\nend",
    "    local max = 0\n    for i,v in ipairs(arr) do\n        max = math.max(max, v)\n    end\n    return max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tfor j = 1, #arr do\n\t\t\tif j ~= i then\n\t\t\t\tnum = num * 10 + arr[j]\n\t\t\tend\n\t\tend\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "    local max = 0\n    for i = 1, #arr do\n        max = math.max(max, arr[i])\n    end\n    return max\nend",
    "  local max = 0\n  for i = 1, #arr do\n    local num = 0\n    for j = 1, #arr[i] do\n      num = num * 10 + arr[i][j]\n    end\n    if num > max then\n      max = num\n    end\n  end\n  return max\nend",
    "    local max_num = 0\n    for i = 1, #arr do\n        local num = 0\n        for j = 1, #arr do\n            if arr[j] ~= -1 then\n                num = num * 10 + arr[j]\n                arr[j] = -1\n                break\n            end\n        end\n        max_num = num\n    end\n    return max_num\nend",
    "\tlocal max_num = 0\n\tfor i=1,#arr do\n\t\tlocal num = arr[i]\n\t\tfor j=1,#arr do\n\t\t\tif i ~= j then\n\t\t\t\tnum = num * 10 + arr[j]\n\t\t\tend\n\t\tend\n\t\tif num > max_num then\n\t\t\tmax_num = num\n\t\tend\n\tend\n\treturn max_num\nend",
    "    local max = 0\n    for i = 1, #arr do\n        local num = 0\n        for j = 1, #arr do\n            if arr[j] > arr[i] then\n                num = num * 10 + arr[j]\n            end\n        end\n        if num > max then\n            max = num\n        end\n    end\n    return max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = 0\n\t\tfor j = 1, #arr[i] do\n\t\t\tnum = num * 10 + arr[i][j]\n\t\tend\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "  local max = 0\n  for i = 1, #arr do\n    max = math.max(max, arr[i])\n  end\n  return max\nend",
    "    local max = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local str = tostring(num)\n        local len = #str\n        local temp = 0\n        for j = 1, len do\n            local digit = tonumber(str:sub(j, j))\n            temp = temp * 10 + digit\n        end\n        if temp > max then\n            max = temp\n        end\n    end\n    return max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = 0\n\t\tfor j = 1, #arr[i] do\n\t\t\tnum = num * 10 + arr[i][j]\n\t\tend\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "    local max_num = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local num_str = tostring(num)\n        local num_len = string.len(num_str)\n        local num_arr = {}\n        for j = 1, num_len do\n            num_arr[j] = string.sub(num_str, j, j)\n        end\n        table.sort(num_arr, function(a, b) return a > b end)\n        local num_str_sorted = table.concat(num_arr)\n        local num_sorted = tonumber(num_str_sorted)\n        if num_sorted > max_num then\n            max_num = num_sorted\n        end\n    end\n    return max_num\nend",
    "    local max = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        if num > max then\n            max = num\n        end\n    end\n    return max\nend",
    "    local max_num = 0\n    for i,v in ipairs(arr) do\n        max_num = max_num * 10 + v\n    end\n    return max_num\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = 0\n\t\tfor j = 1, #arr[i] do\n\t\t\tnum = num * 10 + arr[i][j]\n\t\tend\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tfor j = i + 1, #arr do\n\t\t\tnum = num * 10 + arr[j]\n\t\tend\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tlocal num_str = tostring(num)\n\t\tlocal num_len = #num_str\n\t\tlocal num_arr = {}\n\t\tfor j = 1, num_len do\n\t\t\tnum_arr[j] = tonumber(string.sub(num_str, j, j))\n\t\tend\n\t\ttable.sort(num_arr, function(a, b) return a > b end)\n\t\tlocal num_str = \"\"\n\t\tfor j = 1, num_len do\n\t\t\tnum_str = num_str .. tostring(num_arr[j])\n\t\tend\n\t\tnum = tonumber(num_str)\n\t\tif num > max then\n\t\t\tmax = num\n\t\tend\n\tend\n\treturn max\nend",
    "    local max = 0\n    local len = #arr\n    for i = 1, len do\n        local num = 0\n        for j = 1, len do\n            if arr[j] > num then\n                num = arr[j]\n                arr[j] = arr[i]\n                arr[i] = num\n            end\n        end\n        max = max * 10 + num\n    end\n    return max\nend",
    "\tlocal max = 0\n\tfor i = 1, #arr do\n\t\tlocal num = arr[i]\n\t\tlocal num_str = tostring(num)\n\t\tfor j = 1, #num_str do\n\t\t\tlocal digit = tonumber(num_str:sub(j, j))\n\t\t\tif digit > max then\n\t\t\t\tmax = digit\n\t\t\tend\n\t\tend\n\tend\n\treturn max\nend"
  ]
}