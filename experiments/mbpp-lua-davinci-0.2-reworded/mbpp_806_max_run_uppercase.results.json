{
  "name": "mbpp_806_max_run_uppercase",
  "language": "lua",
  "prompt": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghu210oc.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpghu210oc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      run = run + 1\n    else\n      run = 0\n    end\n    if run > max_run then\n      max_run = run\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksndt7e5.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpksndt7e5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s6q2l4y.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp6s6q2l4y.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3fry88b.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpe3fry88b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local curr_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            curr_run = curr_run + 1\n        else\n            if curr_run > max_run then\n                max_run = curr_run\n            end\n            curr_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm3y9vtx.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpbm3y9vtx.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_len = 0\n    local cur_len = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            cur_len = cur_len + 1\n        else\n            if cur_len > max_len then\n                max_len = cur_len\n            end\n            cur_len = 0\n        end\n    end\n    if cur_len > max_len then\n        max_len = cur_len\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp220ytqtr.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp220ytqtr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal cur_run = 0\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str:sub(i, i), \"%u\") then\n\t\t\tcur_run = cur_run + 1\n\t\telse\n\t\t\tif cur_run > max_run then\n\t\t\t\tmax_run = cur_run\n\t\t\tend\n\t\t\tcur_run = 0\n\t\tend\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77n_ai0a.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp77n_ai0a.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i,i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local char = test_str:sub(i, i)\n    if char:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_h2to17.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp3_h2to17.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:find(\"%u\") then\n            run = run + 1\n        else\n            max_run = math.max(run, max_run)\n            run = 0\n        end\n    end\n    max_run = math.max(run, max_run)\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal cur_run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\tcur_run = cur_run + 1\n\t\telse\n\t\t\tcur_run = 0\n\t\tend\n\t\tif cur_run > max_run then\n\t\t\tmax_run = cur_run\n\t\tend\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    if cur_run > max_run then\n        max_run = cur_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run, run = 0, 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_cgmg5d.lua:21: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpq_cgmg5d.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3fry88b.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpe3fry88b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local current_run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      current_run = current_run + 1\n    else\n      if current_run > max_run then\n        max_run = current_run\n      end\n      current_run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm82qsus.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpwm82qsus.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local current_run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      current_run = current_run + 1\n    else\n      if current_run > max_run then\n        max_run = current_run\n      end\n      current_run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm82qsus.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpwm82qsus.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n            if current_run > max_run then\n                max_run = current_run\n            end\n        else\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_len = 0\n    local cur_len = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            cur_len = cur_len + 1\n        else\n            max_len = math.max(max_len, cur_len)\n            cur_len = 0\n        end\n    end\n    max_len = math.max(max_len, cur_len)\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i,i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wog8zov.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp7wog8zov.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i=1, #test_str do\n        local c = test_str:sub(i,i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local cur_run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"%u\") then\n      cur_run = cur_run + 1\n    else\n      if cur_run > max_run then\n        max_run = cur_run\n      end\n      cur_run = 0\n    end\n  end\n  if cur_run > max_run then\n    max_run = cur_run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = string.sub(test_str, i, i)\n        if string.match(char, \"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i, i)\n    if c:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i,i)\n    if c:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ixsz6b6.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4ixsz6b6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tif test_str:sub(i, i):match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i,i):find(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7iptqris.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp7iptqris.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if ch == ch:upper() then\n            run = run + 1\n        else\n            max_run = math.max(max_run, run)\n            run = 0\n        end\n    end\n    return math.max(max_run, run)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    local c = test_str:sub(i,i)\n    if c:match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i=1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            max_run = math.max(max_run, current_run)\n            current_run = 0\n        end\n    end\n    return math.max(max_run, current_run)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local current_run = 0\n  for i = 1, #test_str do\n    if string.match(test_str:sub(i, i), \"%u\") then\n      current_run = current_run + 1\n    else\n      if current_run > max_run then\n        max_run = current_run\n      end\n      current_run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54ie96k7.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp54ie96k7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local ch = test_str:sub(i, i)\n        if ch:match(\"%u\") then\n            current_run = current_run + 1\n            if current_run > max_run then\n                max_run = current_run\n            end\n        else\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3fry88b.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpe3fry88b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            cur_run = cur_run + 1\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n        else\n            cur_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal current_run = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif char:match(\"%u\") then\n\t\t\tcurrent_run = current_run + 1\n\t\telse\n\t\t\tif current_run > max_run then\n\t\t\t\tmax_run = current_run\n\t\t\tend\n\t\t\tcurrent_run = 0\n\t\tend\n\tend\n\tif current_run > max_run then\n\t\tmax_run = current_run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i,i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_len = 0\n    local cur_len = 0\n    local cur_char = nil\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char == cur_char then\n            cur_len = cur_len + 1\n        else\n            cur_char = char\n            cur_len = 1\n        end\n        if cur_len > max_len then\n            max_len = cur_len\n        end\n    end\n    return max_len\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1yoam514.lua:24: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp1yoam514.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            current_run = 0\n        end\n        if current_run > max_run then\n            max_run = current_run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3fry88b.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpe3fry88b.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    if cur_run > max_run then\n        max_run = cur_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            cur_run = cur_run + 1\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n        else\n            cur_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            cur_run = cur_run + 1\n        else\n            cur_run = 0\n        end\n        if cur_run > max_run then\n            max_run = cur_run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal current_run = 0\n\tfor i = 1, #test_str do\n\t\tlocal char = test_str:sub(i, i)\n\t\tif char:match(\"%u\") then\n\t\t\tcurrent_run = current_run + 1\n\t\telse\n\t\t\tif current_run > max_run then\n\t\t\t\tmax_run = current_run\n\t\t\tend\n\t\t\tcurrent_run = 0\n\t\tend\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmywprvz.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmmywprvz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksndt7e5.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpksndt7e5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      run = run + 1\n    else\n      if run > max_run then\n        max_run = run\n      end\n      run = 0\n    end\n  end\n  if run > max_run then\n    max_run = run\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tmax_run = math.max(max_run, run)\n\t\t\trun = 0\n\t\tend\n\tend\n\tmax_run = math.max(max_run, run)\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    local str_len = string.len(test_str)\n    for i = 1, str_len do\n        local char = string.sub(test_str, i, i)\n        if string.match(char, \"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    if cur_run > max_run then\n        max_run = cur_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i,i)\n        if c:match(\"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dspyycv.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp7dspyycv.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local curr_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            curr_run = curr_run + 1\n        else\n            curr_run = 0\n        end\n        if curr_run > max_run then\n            max_run = curr_run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i,i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:find(\"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3cubbd3.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpi3cubbd3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local current_char = test_str:sub(i, i)\n        if current_char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1ikow1s.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpz1ikow1s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksndt7e5.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpksndt7e5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tif string.match(test_str:sub(i,i), \"%u\") then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0stgtsub.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp0stgtsub.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match('%u') then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n  local max_run = 0\n  local run = 0\n  for i = 1, #test_str do\n    if test_str:sub(i, i):match(\"%u\") then\n      run = run + 1\n      if run > max_run then\n        max_run = run\n      end\n    else\n      run = 0\n    end\n  end\n  return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    if cur_run > max_run then\n        max_run = cur_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00m51itl.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp00m51itl.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nrg8_sv.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp3nrg8_sv.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd1um6fij.lua:14: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            max_run = math.max(max_run, run)\n            run = 0\n        end\n    end\n    return math.max(max_run, run)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    if current_run > max_run then\n        max_run = current_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjp5uweg.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpgjp5uweg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_h2to17.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp3_h2to17.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngm5k8ao.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpngm5k8ao.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            max_run = math.max(max_run, run)\n            run = 0\n        end\n    end\n    return math.max(max_run, run)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local cur_run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match('%u') then\n            cur_run = cur_run + 1\n        else\n            if cur_run > max_run then\n                max_run = cur_run\n            end\n            cur_run = 0\n        end\n    end\n    if cur_run > max_run then\n        max_run = cur_run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n\tlocal max_run = 0\n\tlocal run = 0\n\tfor i = 1, #test_str do\n\t\tlocal c = test_str:sub(i, i)\n\t\tif c:match('%u') then\n\t\t\trun = run + 1\n\t\telse\n\t\t\tif run > max_run then\n\t\t\t\tmax_run = run\n\t\t\tend\n\t\t\trun = 0\n\t\tend\n\tend\n\tif run > max_run then\n\t\tmax_run = run\n\tend\n\treturn max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpctnunu.lua:23: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpmpctnunu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksndt7e5.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmpksndt7e5.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ixsz6b6.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4ixsz6b6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        local c = test_str:sub(i, i)\n        if c:match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n            if run > max_run then\n                max_run = run\n            end\n        else\n            run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ixsz6b6.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4ixsz6b6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        local char = test_str:sub(i, i)\n        if char:match(\"%u\") then\n            current_run = current_run + 1\n            if current_run > max_run then\n                max_run = current_run\n            end\n        else\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            run = run + 1\n        else\n            run = 0\n        end\n        if run > max_run then\n            max_run = run\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            run = run + 1\n        else\n            if run > max_run then\n                max_run = run\n            end\n            run = 0\n        end\n    end\n    if run > max_run then\n        max_run = run\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if test_str:sub(i, i):match(\"%u\") then\n            current_run = current_run + 1\n        else\n            if current_run > max_run then\n                max_run = current_run\n            end\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ixsz6b6.lua:22: expected: 6, actual: 4\nstack traceback:\n\t/tmp/tmp4ixsz6b6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find maximum run of uppercase characters in the given string.\nlocal function max_run_uppercase(test_str)\n    local max_run = 0\n    local current_run = 0\n    for i = 1, #test_str do\n        if string.match(test_str:sub(i, i), \"%u\") then\n            current_run = current_run + 1\n            if current_run > max_run then\n                max_run = current_run\n            end\n        else\n            current_run = 0\n        end\n    end\n    return max_run\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_run_uppercase\n    lu.assertEquals(candidate('GeMKSForGERksISBESt'), 5)\n    lu.assertEquals(candidate('PrECIOusMOVemENTSYT'), 6)\n    lu.assertEquals(candidate('GooGLEFluTTER'), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123294,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}