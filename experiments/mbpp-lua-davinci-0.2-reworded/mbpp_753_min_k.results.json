{
  "name": "mbpp_753_min_k",
  "language": "lua",
  "prompt": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        local test_case = test_list[i]\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_case\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_k_list_size do\n                if min_k_list[j].score > min_k_list[max_index].score then\n                    max_index = j\n                end\n            end\n            if min_k_list[max_index].score > test_case.score then\n                min_k_list[max_index] = test_case\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjof7omd.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmprjof7omd.lua:13: in function 'candidate'\n\t/tmp/tmprjof7omd.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(test_list, compare)\n    local result = {}\n    for i = 1, K do\n        result[i] = test_list[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdjx1e16.lua:19: expected: {{\"Ayesha\", 9}}\nactual: {{\"Amer\", 11}}\nstack traceback:\n\t/tmp/tmpmdjx1e16.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local min_index = 0\n            local min_value = test.value\n            for j = 1, min_list_size do\n                if min_list[j].value < min_value then\n                    min_index = j\n                    min_value = min_list[j].value\n                end\n            end\n            if min_index > 0 then\n                min_list[min_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsu278mo.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmphsu278mo.lua:14: in function 'candidate'\n\t/tmp/tmphsu278mo.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_k_list = {}\n\tlocal min_k_list_size = 0\n\tfor i = 1, #test_list do\n\t\tif min_k_list_size < K then\n\t\t\tmin_k_list[min_k_list_size + 1] = test_list[i]\n\t\t\tmin_k_list_size = min_k_list_size + 1\n\t\t\tif min_k_list_size == K then\n\t\t\t\ttable.sort(min_k_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\telse\n\t\t\tif test_list[i].id < min_k_list[K].id then\n\t\t\t\tmin_k_list[K] = test_list[i]\n\t\t\t\ttable.sort(min_k_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp772w07yi.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp772w07yi.lua:10: in function </tmp/tmp772w07yi.lua:10>\n\t[C]: in function 'sort'\n\t/tmp/tmp772w07yi.lua:10: in function 'candidate'\n\t/tmp/tmp772w07yi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local test_list_size = #test_list\n  local test_list_index = 1\n  local test_list_item = nil\n  local min_k_list_item = nil\n  local min_k_list_item_index = nil\n  local min_k_list_item_value = nil\n  local min_k_list_item_value_index = nil\n  local min_k_list_item_value_index_value = nil\n  local min_k_list_item_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_value_index_value_index_value_index_value_index_value_index_value_index_value_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "",
      "stderr": "lua: /tmp/tmpewcxb7mr.lua:35: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_value = 0\n  local min_list_max_value_index = 0\n  local min_list_max_value_index_set = false\n  local min_list_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index = 0\n  local min_list_max_value_index_set_count_max_value_index_set = false\n  local min_list_max_value_index_set_count_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set = false\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max = K\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max_value = 0\n  local min_list_max_value_index_set_count_max_value_index_set_count_max_value_index_set_count_max_value_index = 0\n  local min_list\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3y3113qs.lua:33: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_value = test_list[1]\n    local min_index = 1\n    for i = 2, #test_list do\n      if test_list[i] < min_value then\n        min_value = test_list[i]\n        min_index = i\n      end\n    end\n    table.insert(min_list, min_value)\n    table.remove(test_list, min_index)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4qelo5w.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmph4qelo5w.lua:11: in function </tmp/tmph4qelo5w.lua:3>\n\t(tail call): ?\n\t/tmp/tmph4qelo5w.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if #min_list < K then\n      table.insert(min_list, test)\n    else\n      local max_test = min_list[1]\n      for j = 2, #min_list do\n        if min_list[j].score > max_test.score then\n          max_test = min_list[j]\n        end\n      end\n      if test.score < max_test.score then\n        for j = 1, #min_list do\n          if min_list[j] == max_test then\n            min_list[j] = test\n            break\n          end\n        end\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvki52x9g.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpvki52x9g.lua:11: in function 'candidate'\n\t/tmp/tmpvki52x9g.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min_val = math.huge\n\t\tlocal min_idx = 0\n\t\tfor j = 1, #test_list do\n\t\t\tif test_list[j] < min_val then\n\t\t\t\tmin_val = test_list[j]\n\t\t\t\tmin_idx = j\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = min_val\n\t\ttable.remove(test_list, min_idx)\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wy41egs.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp2wy41egs.lua:8: in function 'candidate'\n\t/tmp/tmp2wy41egs.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n      local min_val = math.huge\n      local min_index = 0\n      for j = 1, #test_list do\n        if test_list[j] < min_val then\n          min_val = test_list[j]\n          min_index = j\n        end\n      end\n      min_k_list[i] = min_val\n      table.remove(test_list, min_index)\n    end\n    return min_k_list\n  end\n  local min_k_list = min_k_helper(test_list, K)\n  table.sort(min_k_list)\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn75uqktw.lua:9: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpn75uqktw.lua:9: in function 'min_k_helper'\n\t/tmp/tmpn75uqktw.lua:19: in function 'candidate'\n\t/tmp/tmpn75uqktw.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i, test in ipairs(test_list) do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_test = min_k_list[1]\n            local max_test_index = 1\n            for j, test_2 in ipairs(min_k_list) do\n                if test_2.score > max_test.score then\n                    max_test = test_2\n                    max_test_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_k_list[max_test_index] = test\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ob8fe_5.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2ob8fe_5.lua:13: in function 'candidate'\n\t/tmp/tmp2ob8fe_5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then\n      return min_list\n    end\n    local min_val, min_idx = math.huge, 0\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val, min_idx = v, i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_xurvrei.lua:9: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp_xurvrei.lua:9: in function </tmp/tmp_xurvrei.lua:3>\n\t(tail call): ?\n\t/tmp/tmp_xurvrei.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_rec(test_list, K, min_list)\n\t\tif K == 0 then\n\t\t\treturn min_list\n\t\tend\n\t\tlocal min_val = math.huge\n\t\tlocal min_index = 0\n\t\tfor i = 1, #test_list do\n\t\t\tif test_list[i] < min_val then\n\t\t\t\tmin_val = test_list[i]\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\t\ttable.insert(min_list, min_val)\n\t\ttable.remove(test_list, min_index)\n\t\treturn min_k_rec(test_list, K - 1, min_list)\n\tend\n\treturn min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuviyu5ll.lua:10: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpuviyu5ll.lua:10: in function </tmp/tmpuviyu5ll.lua:3>\n\t(tail call): ?\n\t/tmp/tmpuviyu5ll.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min = math.huge\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        if test_list[i] < min then\n            min = test_list[i]\n            min_list_size = 1\n            min_list[1] = min\n        elseif test_list[i] == min then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = min\n        end\n    end\n    return min_list[K]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpai42qaef.lua:7: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpai42qaef.lua:7: in function 'candidate'\n\t/tmp/tmpai42qaef.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val = math.huge\n    local min_idx = nil\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.remove(test_list, min_idx)\n    table.insert(min_list, min_val)\n    return min_k_rec(test_list, K-1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_4rdwm2.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpn_4rdwm2.lua:8: in function </tmp/tmpn_4rdwm2.lua:3>\n\t(tail call): ?\n\t/tmp/tmpn_4rdwm2.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    if #min_list < K then\n      min_list[#min_list + 1] = test_case\n    else\n      local max_index = 1\n      local max_value = min_list[1].value\n      for j = 2, #min_list do\n        if min_list[j].value > max_value then\n          max_index = j\n          max_value = min_list[j].value\n        end\n      end\n      if test_case.value < max_value then\n        min_list[max_index] = test_case\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ngw8hol.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp4ngw8hol.lua:12: in function 'candidate'\n\t/tmp/tmp4ngw8hol.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_k_list)\n    if #test_list == 0 then\n      return min_k_list\n    end\n    local min_k_list = min_k_list or {}\n    local min_k_list_len = #min_k_list\n    local test_list_len = #test_list\n    local test_list_item = test_list[1]\n    local test_list_item_val = test_list_item[2]\n    local min_k_list_item = min_k_list[1]\n    local min_k_list_item_val = min_k_list_item and min_k_list_item[2] or math.huge\n    if min_k_list_len < K then\n      table.insert(min_k_list, test_list_item)\n      table.sort(min_k_list, function(a, b) return a[2] < b[2] end)\n    elseif test_list_item_val < min_k_list_item_val then\n      table.remove(min_k_list, min_k_list_len)\n      table.insert(min_k_list, test_list_item)\n      table.sort(min_k_list, function(a, b) return a[2] < b[2] end)\n    end\n    table.remove(test_list, 1)\n    return min_k_helper(test_list, K, min_k_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph794cj83.lua:32: expected: {{\"Akash\", 3}, {\"Angat\", 5}, {\"Nepin\", 9}}\nactual: {{\"Akash\", 3}, {\"Angat\", 5}, {\"Sanjeev\", 11}}\nstack traceback:\n\t/tmp/tmph794cj83.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_helper(test_list, K, min_k_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_k_list\n\t\tend\n\t\tlocal min_k_list = min_k_list or {}\n\t\tlocal min_k_list_len = #min_k_list\n\t\tlocal min_k_list_len_less_k = min_k_list_len < K\n\t\tlocal test_list_len = #test_list\n\t\tlocal test_list_len_less_k = test_list_len < K\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k = min_k_list_len_less_k and test_list_len_less_k\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len = min_k_list_len_less_k_and_test_list_len_less_k and test_list_len < min_k_list_len\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_list_len_less_k = min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len and min_k_list_len < K\n\t\tif min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_list_len_less_k then\n\t\t\treturn min_k_list\n\t\tend\n\t\tlocal min_k_list_len_less_k_and_test_list_len_less_k_and_test_list_len_less_min_k_list_len_and_min_k_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm7rml8h2.lua:28: 'end' expected (to close 'function' at line 3) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local function insert_min_list(test_case)\n    if min_list_size < min_list_max_size then\n      min_list[min_list_size] = test_case\n      min_list_size = min_list_size + 1\n      return\n    end\n    local min_value = min_list[0].value\n    local min_index = 0\n    for i = 1, min_list_size - 1 do\n      if min_list[i].value < min_value then\n        min_value = min_list[i].value\n        min_index = i\n      end\n    end\n    if test_case.value < min_value then\n      min_list[min_index] = test_case\n    end\n  end\n  for i = 1, #test_list do\n    insert_min_list(test_list[i])\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhqkdels.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbhqkdels.lua:15: in function 'insert_min_list'\n\t/tmp/tmpbhqkdels.lua:25: in function 'candidate'\n\t/tmp/tmpbhqkdels.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_item = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_item\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_item = min_k_list[1]\n      local max_item_index = 1\n      for j = 2, min_k_list_size do\n        if max_item < min_k_list[j] then\n          max_item = min_k_list[j]\n          max_item_index = j\n        end\n      end\n      if max_item > test_item then\n        min_k_list[max_item_index] = test_item\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltzr3giu.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpltzr3giu.lua:14: in function 'candidate'\n\t/tmp/tmpltzr3giu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if K == 0 then\n      return min_list\n    end\n    local min_val = math.huge\n    local min_idx = 0\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_helper(test_list, K - 1, min_list)\n  end\n  return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmvlq7os.lua:10: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpjmvlq7os.lua:10: in function </tmp/tmpjmvlq7os.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpjmvlq7os.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_val = min_list[1]\n    local max_ind = 1\n    for j = 2, K do\n      if min_list[j] > max_val then\n        max_val = min_list[j]\n        max_ind = j\n      end\n    end\n    if test_list[i] < max_val then\n      min_list[max_ind] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpftrlr1de.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpftrlr1de.lua:11: in local 'candidate'\n\t/tmp/tmpftrlr1de.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_k = {}\n\tlocal min_k_size = 0\n\tfor i = 1, #test_list do\n\t\tlocal test = test_list[i]\n\t\tif min_k_size < K then\n\t\t\tmin_k[min_k_size + 1] = test\n\t\t\tmin_k_size = min_k_size + 1\n\t\t\tif min_k_size == K then\n\t\t\t\ttable.sort(min_k, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\telse\n\t\t\tif test.id < min_k[K].id then\n\t\t\t\tmin_k[K] = test\n\t\t\t\ttable.sort(min_k, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppp_br3qn.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmppp_br3qn.lua:11: in function </tmp/tmppp_br3qn.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppp_br3qn.lua:11: in local 'candidate'\n\t/tmp/tmppp_br3qn.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_rec(test_list, K)\n\t\tif K == 1 then\n\t\t\tlocal min = test_list[1]\n\t\t\tfor i = 2, #test_list do\n\t\t\t\tif test_list[i] < min then\n\t\t\t\t\tmin = test_list[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn min\n\t\telse\n\t\t\tlocal min = min_k_rec(test_list, K - 1)\n\t\t\tlocal new_list = {}\n\t\t\tfor i = 1, #test_list do\n\t\t\t\tif test_list[i] > min then\n\t\t\t\t\tnew_list[#new_list + 1] = test_list[i]\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn min_k_rec(new_list, K - 1)\n\t\tend\n\tend\n\treturn min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6er1plgv.lua:7: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp6er1plgv.lua:7: in upvalue 'min_k_rec'\n\t/tmp/tmp6er1plgv.lua:13: in function </tmp/tmp6er1plgv.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp6er1plgv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, #test_list do\n    if #min_list < K then\n      table.insert(min_list, test_list[i])\n    else\n      table.sort(min_list, function(a, b) return a < b end)\n      if test_list[i] > min_list[K] then\n        min_list[K] = test_list[i]\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbuag_0z.lua:8: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpxbuag_0z.lua:8: in function </tmp/tmpxbuag_0z.lua:8>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpxbuag_0z.lua:8: in local 'candidate'\n\t/tmp/tmpxbuag_0z.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test\n      min_k_size = min_k_size + 1\n    else\n      local max_i = 1\n      for j = 2, min_k_size do\n        if min_k[j].time > min_k[max_i].time then\n          max_i = j\n        end\n      end\n      if test.time < min_k[max_i].time then\n        min_k[max_i] = test\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwpc4phu.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpwwpc4phu.lua:13: in local 'candidate'\n\t/tmp/tmpwwpc4phu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_len = 0\n    for i = 1, #test_list do\n        local test_list_i = test_list[i]\n        if min_k_list_len < K then\n            min_k_list[min_k_list_len + 1] = test_list_i\n            min_k_list_len = min_k_list_len + 1\n        else\n            local max_idx = 1\n            for j = 2, min_k_list_len do\n                if min_k_list[j] > min_k_list[max_idx] then\n                    max_idx = j\n                end\n            end\n            if min_k_list[max_idx] > test_list_i then\n                min_k_list[max_idx] = test_list_i\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfws1ot2_.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpfws1ot2_.lua:13: in local 'candidate'\n\t/tmp/tmpfws1ot2_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      local max_value = min_list[1].value\n      for j = 2, min_list_size do\n        if min_list[j].value > max_value then\n          max_index = j\n          max_value = min_list[j].value\n        end\n      end\n      if test.value < max_value then\n        min_list[max_index] = test\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpft_8qx7i.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpft_8qx7i.lua:14: in local 'candidate'\n\t/tmp/tmpft_8qx7i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_list[i]\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_idx = 1\n            local max_val = min_k_list[1]\n            for j = 1, min_k_list_size do\n                if min_k_list[j] > max_val then\n                    max_idx = j\n                    max_val = min_k_list[j]\n                end\n            end\n            if test_list[i] < max_val then\n                min_k_list[max_idx] = test_list[i]\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplg4tncdv.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmplg4tncdv.lua:13: in local 'candidate'\n\t/tmp/tmplg4tncdv.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local result = {}\n  for i = 1, #test_list do\n    if #result < K then\n      table.insert(result, test_list[i])\n    else\n      table.sort(result, function(a, b) return a[2] < b[2] end)\n      if result[K][2] > test_list[i][2] then\n        result[K] = test_list[i]\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test_list_i = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_list_i\n            min_list_size = min_list_size + 1\n        else\n            local min_list_i = min_list[1]\n            for j = 2, min_list_size do\n                if min_list[j] < min_list_i then\n                    min_list_i = min_list[j]\n                end\n            end\n            if test_list_i < min_list_i then\n                for j = 1, min_list_size do\n                    if min_list[j] == min_list_i then\n                        min_list[j] = test_list_i\n                        break\n                    end\n                end\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9sfya60r.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp9sfya60r.lua:13: in local 'candidate'\n\t/tmp/tmp9sfya60r.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_index = 1\n    for j = 2, K do\n      if min_list[j] > min_list[max_index] then\n        max_index = j\n      end\n    end\n    if test_list[i] < min_list[max_index] then\n      min_list[max_index] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ecafswl.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp0ecafswl.lua:10: in local 'candidate'\n\t/tmp/tmp0ecafswl.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list_len = #min_list\n    if min_list_len < K then\n      table.insert(min_list, test_list[1])\n    elseif min_list[min_list_len] > test_list[1] then\n      min_list[min_list_len] = test_list[1]\n    end\n    table.remove(test_list, 1)\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjq1rxe3p.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpjq1rxe3p.lua:10: in function </tmp/tmpjq1rxe3p.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpjq1rxe3p.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    table.sort(min_k_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_k_list[K] then\n            min_k_list[K] = test_list[i]\n            table.sort(min_k_list)\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function cmp(a, b)\n    return a.age < b.age\n  end\n  table.sort(test_list, cmp)\n  local res = {}\n  for i = 1, K do\n    res[i] = test_list[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xwhpkjz.lua:4: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1xwhpkjz.lua:4: in function </tmp/tmp1xwhpkjz.lua:3>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp1xwhpkjz.lua:6: in local 'candidate'\n\t/tmp/tmp1xwhpkjz.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local t = {}\n    for i = 1, #test_list do\n        t[i] = {test_list[i], i}\n    end\n    table.sort(t, function(a, b) return a[1] < b[1] end)\n    local res = {}\n    for i = 1, K do\n        res[i] = t[i][2]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_atkec66.lua:7: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp_atkec66.lua:7: in function </tmp/tmp_atkec66.lua:7>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp_atkec66.lua:7: in local 'candidate'\n\t/tmp/tmp_atkec66.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    if #min_list == K then return min_list end\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiae5iwyv.lua:9: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpiae5iwyv.lua:9: in function </tmp/tmpiae5iwyv.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpiae5iwyv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_helper(test_list, K, min_list)\n        if K == 0 then\n            return min_list\n        end\n        local min_value = math.huge\n        local min_index = -1\n        for i,v in ipairs(test_list) do\n            if v < min_value then\n                min_value = v\n                min_index = i\n            end\n        end\n        table.insert(min_list, min_value)\n        table.remove(test_list, min_index)\n        return min_k_helper(test_list, K-1, min_list)\n    end\n    return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzgzyxs28.lua:10: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpzgzyxs28.lua:10: in function </tmp/tmpzgzyxs28.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpzgzyxs28.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then\n      return min_list\n    end\n    local min_val = math.huge\n    local min_idx = nil\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppsq4q9vc.lua:10: attempt to compare table with number\nstack traceback:\n\t/tmp/tmppsq4q9vc.lua:10: in function </tmp/tmppsq4q9vc.lua:3>\n\t(...tail calls...)\n\t/tmp/tmppsq4q9vc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  for i = 1, K do\n    min_k[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_idx = 1\n    for j = 2, K do\n      if min_k[j] > min_k[max_idx] then\n        max_idx = j\n      end\n    end\n    if test_list[i] < min_k[max_idx] then\n      min_k[max_idx] = test_list[i]\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnjnj9ggd.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpnjnj9ggd.lua:10: in local 'candidate'\n\t/tmp/tmpnjnj9ggd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    for i = K + 1, #test_list do\n        local max_index = 1\n        for j = 2, K do\n            if min_list[j] > min_list[max_index] then\n                max_index = j\n            end\n        end\n        if test_list[i] < min_list[max_index] then\n            min_list[max_index] = test_list[i]\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tpn71v1.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp7tpn71v1.lua:10: in local 'candidate'\n\t/tmp/tmp7tpn71v1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function _min_k(test_list, K)\n    local len = #test_list\n    if len < K then\n      return test_list\n    end\n    local pivot = test_list[1]\n    local left = {}\n    local right = {}\n    for i = 2, len do\n      if test_list[i] < pivot then\n        left[#left + 1] = test_list[i]\n      else\n        right[#right + 1] = test_list[i]\n      end\n    end\n    if #left >= K then\n      return _min_k(left, K)\n    elseif #left + 1 == K then\n      return left, pivot\n    else\n      return left, pivot, _min_k(right, K - #left - 1)\n    end\n  end\n  return _min_k(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzr3l34_w.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpzr3l34_w.lua:12: in function </tmp/tmpzr3l34_w.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpzr3l34_w.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_test = min_list[1]\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j].score > max_test.score then\n                    max_test = min_list[j]\n                    max_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyytj6xxl.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpyytj6xxl.lua:14: in local 'candidate'\n\t/tmp/tmpyytj6xxl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_rec(test_list, K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_y7ncv3.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpd_y7ncv3.lua:11: in function </tmp/tmpd_y7ncv3.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpd_y7ncv3.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_helper(test_list, K, min_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_list\n\t\tend\n\t\tlocal min_list = min_list or {}\n\t\tlocal min_list_len = #min_list\n\t\tlocal min_list_max = min_list_len > 0 and min_list[min_list_len][1] or nil\n\t\tlocal test_list_len = #test_list\n\t\tlocal test_list_max = test_list_len > 0 and test_list[test_list_len][1] or nil\n\t\tif min_list_len < K then\n\t\t\tif test_list_max == nil then\n\t\t\t\treturn min_list\n\t\t\telse\n\t\t\t\ttable.insert(min_list, table.remove(test_list))\n\t\t\t\treturn min_k_helper(test_list, K, min_list)\n\t\t\tend\n\t\telseif min_list_max == nil then\n\t\t\treturn min_list\n\t\telseif test_list_max == nil then\n\t\t\treturn min_list\n\t\telseif test_list_max < min_list_max then\n\t\t\ttable.insert(min_list, table.remove(test_list))\n\t\t\ttable.remove(min_list)\n\t\t\treturn min_k_helper(test_list, K, min_list)\n\t\telse\n\t\t\treturn min_list\n\t\tend\n\tend\n\treturn min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn01ly_9_.lua:37: expected: {{\"Akash\", 2}, {\"Akshat\", 4}}\nactual: {{\"Nikhil\", 8}, {\"Akash\", 2}}\nstack traceback:\n\t/tmp/tmpn01ly_9_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list, function(a, b) return a < b end)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list, function(a, b) return a < b end)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf7ff6n6.lua:7: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpsf7ff6n6.lua:7: in function </tmp/tmpsf7ff6n6.lua:7>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpsf7ff6n6.lua:7: in local 'candidate'\n\t/tmp/tmpsf7ff6n6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for _, test in ipairs(test_list) do\n        local min = test[1]\n        for _, v in ipairs(test) do\n            if v < min then\n                min = v\n            end\n        end\n        min_list[#min_list+1] = min\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qpwukng.lua:7: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp4qpwukng.lua:7: in local 'candidate'\n\t/tmp/tmp4qpwukng.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_max_size = K\n    local min_k_list_max_value = math.huge\n    for i = 1, #test_list do\n        local test_value = test_list[i]\n        if min_k_list_size < min_k_list_max_size then\n            min_k_list_size = min_k_list_size + 1\n            min_k_list[min_k_list_size] = test_value\n            if test_value > min_k_list_max_value then\n                min_k_list_max_value = test_value\n            end\n        elseif test_value < min_k_list_max_value then\n            min_k_list[min_k_list_size] = test_value\n            min_k_list_max_value = test_value\n            for j = 1, min_k_list_size - 1 do\n                if min_k_list[j] > min_k_list_max_value then\n                    min_k_list[j], min_k_list[min_k_list_size] = min_k_list[min_k_list_size], min_k_list[j]\n                    min_k_list_max_value = min_k_list[j]\n                end\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrurv2j9.lua:12: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpxrurv2j9.lua:12: in local 'candidate'\n\t/tmp/tmpxrurv2j9.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tfor i = 1, #test_list do\n\t\tlocal test = test_list[i]\n\t\tif #min_list < K then\n\t\t\ttable.insert(min_list, test)\n\t\telse\n\t\t\tlocal max_test = min_list[1]\n\t\t\tfor j = 2, #min_list do\n\t\t\t\tif min_list[j].score > max_test.score then\n\t\t\t\t\tmax_test = min_list[j]\n\t\t\t\tend\n\t\t\tend\n\t\t\tif test.score < max_test.score then\n\t\t\t\tfor j = 1, #min_list do\n\t\t\t\t\tif min_list[j] == max_test then\n\t\t\t\t\t\tmin_list[j] = test\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqy3_ei8.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpiqy3_ei8.lua:11: in local 'candidate'\n\t/tmp/tmpiqy3_ei8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    for i = K + 1, #test_list do\n        local max_val = min_k_list[1]\n        local max_idx = 1\n        for j = 2, K do\n            if min_k_list[j] > max_val then\n                max_val = min_k_list[j]\n                max_idx = j\n            end\n        end\n        if test_list[i] < max_val then\n            min_k_list[max_idx] = test_list[i]\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2wf54vi.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmps2wf54vi.lua:11: in local 'candidate'\n\t/tmp/tmps2wf54vi.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i = 1, #test_list do\n    local test_item = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test_item\n      min_list_size = min_list_size + 1\n    else\n      local max_item = min_list[1]\n      local max_item_index = 1\n      for j = 2, min_list_size do\n        if min_list[j] > max_item then\n          max_item = min_list[j]\n          max_item_index = j\n        end\n      end\n      if test_item < max_item then\n        min_list[max_item_index] = test_item\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcabiwdbr.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpcabiwdbr.lua:14: in local 'candidate'\n\t/tmp/tmpcabiwdbr.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if #min_list < K then\n            table.insert(min_list, test)\n        else\n            local max_test = min_list[1]\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j].score > max_test.score then\n                    max_test = min_list[j]\n                    max_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jp_rxek.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1jp_rxek.lua:12: in local 'candidate'\n\t/tmp/tmp1jp_rxek.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_value = nil\n  local min_list_max_value_index = nil\n  local min_list_min_value = nil\n  local min_list_min_value_index = nil\n  for i, test in ipairs(test_list) do\n    if min_list_size < min_list_max_size then\n      min_list[min_list_size + 1] = test\n      min_list_size = min_list_size + 1\n      if min_list_max_value == nil or test > min_list_max_value then\n        min_list_max_value = test\n        min_list_max_value_index = min_list_size\n      end\n      if min_list_min_value == nil or test < min_list_min_value then\n        min_list_min_value = test\n        min_list_min_value_index = min_list_size\n      end\n    else\n      if test < min_list_max_value then\n        min_list[min_list_max_value_index] = test\n        min_list_max_value = test\n        for i, test in ipairs(min_list) do\n          if test > min_list_max_value then\n            min_list_max_value = test\n            min_list_max_value_index = i\n          end\n        end\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7s2q8q3.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpc7s2q8q3.lua:14: in local 'candidate'\n\t/tmp/tmpc7s2q8q3.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    local min_value = nil\n    local min_index = nil\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[#min_list + 1] = v\n            min_list_size = min_list_size + 1\n            if min_value == nil or min_value > v then\n                min_value = v\n                min_index = #min_list\n            end\n        else\n            if v > min_value then\n                min_list[min_index] = v\n                min_value = min_list[1]\n                min_index = 1\n                for i, v in ipairs(min_list) do\n                    if min_value > v then\n                        min_value = v\n                        min_index = i\n                    end\n                end\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pw5jxgq.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp9pw5jxgq.lua:11: in local 'candidate'\n\t/tmp/tmp9pw5jxgq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val = math.huge\n    local min_idx = nil\n    for i = 1, #test_list do\n      if test_list[i] < min_val then\n        min_val = test_list[i]\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_helper(test_list, K - 1, min_list)\n  end\n  return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdptt7ok4.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpdptt7ok4.lua:8: in function </tmp/tmpdptt7ok4.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpdptt7ok4.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    else\n      local min_val = test_list[1]\n      local min_index = 1\n      for i = 2, #test_list do\n        if test_list[i] < min_val then\n          min_val = test_list[i]\n          min_index = i\n        end\n      end\n      table.remove(test_list, min_index)\n      table.insert(min_list, min_val)\n      if #min_list == K then\n        return min_list\n      else\n        return min_k_rec(test_list, K, min_list)\n      end\n    end\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3d8_9nu.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpt3d8_9nu.lua:10: in function </tmp/tmpt3d8_9nu.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpt3d8_9nu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_list[i]\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_idx = 1\n      for j = 2, min_k_list_size do\n        if min_k_list[j] > min_k_list[max_idx] then\n          max_idx = j\n        end\n      end\n      if test_list[i] < min_k_list[max_idx] then\n        min_k_list[max_idx] = test_list[i]\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkpd7zqp6.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpkpd7zqp6.lua:12: in local 'candidate'\n\t/tmp/tmpkpd7zqp6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_list_len = #min_list\n    local test_list_len = #test_list\n    local min_list_len_less_K = min_list_len < K\n    local test_list_len_less_K = test_list_len < K\n    local min_list_len_less_K_and_test_list_len_less_K = min_list_len_less_K and test_list_len_less_K\n    local min_list_len_less_K_and_test_list_len_less_K_or_test_list_len_less_K = min_list_len_less_K_and_test_list_len_less_K or test_list_len_less_K\n    if min_list_len_less_K_and_test_list_len_less_K_or_test_list_len_less_K then\n      for i = 1, test_list_len do\n        table.insert(min_list, test_list[i])\n      end\n      return min_list\n    end\n    local min_list_len_less_K_and_test_list_len_less_K_or_min_list_len_less_K = min_list_len_less_K_and_test_list_len_less_K or min_list_len_less_K\n    if min_list_len_less_K_and_test_list_len_less_K_or_min_list_len_less_K then\n      for i = 1, K do\n        table.insert(min_list, test_list[i])\n      end\n      return min_list\n    end\n    local min_list_len_less_K_and_test_list_len_less_K_or_min_list_len_less_K_or_test_list_len_less_K = min_list_len_less_K_and_test_list_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpftce4jrg.lua:35: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_k_list = {}\n\tlocal min_k_list_size = 0\n\tfor i = 1, #test_list do\n\t\tif min_k_list_size < K then\n\t\t\tmin_k_list[min_k_list_size + 1] = test_list[i]\n\t\t\tmin_k_list_size = min_k_list_size + 1\n\t\t\tif min_k_list_size == K then\n\t\t\t\ttable.sort(min_k_list)\n\t\t\tend\n\t\telse\n\t\t\tif test_list[i] < min_k_list[K] then\n\t\t\t\tmin_k_list[K] = test_list[i]\n\t\t\t\ttable.sort(min_k_list)\n\t\t\tend\n\t\tend\n\tend\n\treturn min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local test_list_size = #test_list\n  for i = 1, test_list_size do\n    local test_value = test_list[i]\n    if min_k_list_size < min_k_list_max_size then\n      min_k_list_size = min_k_list_size + 1\n      min_k_list[min_k_list_size] = test_value\n      if min_k_list_max_value == nil or min_k_list_max_value > test_value then\n        min_k_list_max_value = test_value\n      end\n    elseif test_value < min_k_list_max_value then\n      local min_k_list_max_value_index = nil\n      for j = 1, min_k_list_size do\n        if min_k_list_max_value == min_k_list[j] then\n          min_k_list_max_value_index = j\n          break\n        end\n      end\n      min_k_list[min_k_list_max_value_index] = test_value\n      min_k_list_max_value = min_k_list[1]\n      for j = 2, min_k_list_size do\n        local min_k_list_value = min_k_list[j]\n        if min_k_list_max_value > min_k_list_value then\n          min_k_list_max_value = min_k_list_value\n        end\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsziqg2mn.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpsziqg2mn.lua:13: in local 'candidate'\n\t/tmp/tmpsziqg2mn.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test\n      min_k_size = min_k_size + 1\n    else\n      local max_idx = 1\n      for j = 2, K do\n        if min_k[j].id > min_k[max_idx].id then\n          max_idx = j\n        end\n      end\n      if test.id < min_k[max_idx].id then\n        min_k[max_idx] = test\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9h6im3sr.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp9h6im3sr.lua:13: in local 'candidate'\n\t/tmp/tmp9h6im3sr.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val = math.huge\n    local min_idx = nil\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.remove(test_list, min_idx)\n    table.insert(min_list, min_val)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq93g07r.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpiq93g07r.lua:8: in function </tmp/tmpiq93g07r.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpiq93g07r.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    local test_size = #test\n    if min_k_size < K then\n      min_k[test_size] = min_k[test_size] or {}\n      table.insert(min_k[test_size], test)\n      min_k_size = min_k_size + 1\n    elseif test_size < min_k_size then\n      local min_k_test = min_k[min_k_size][1]\n      min_k[min_k_size] = nil\n      min_k[test_size] = min_k[test_size] or {}\n      table.insert(min_k[test_size], test)\n      min_k_size = test_size\n    end\n  end\n  local min_k_list = {}\n  for size, test_list in pairs(min_k) do\n    for i = 1, #test_list do\n      table.insert(min_k_list, test_list[i])\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplycru33e.lua:32: expected: {{\"Akash\", 2}, {\"Akshat\", 4}}\nactual: {{\"Manjeet\", 10}, {\"Akshat\", 4}}\nstack traceback:\n\t/tmp/tmplycru33e.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_helper(test_list, K, min_list)\n        if #test_list == 0 then\n            return min_list\n        end\n        local min_list = min_list or {}\n        local min_val = test_list[1]\n        local min_idx = 1\n        for i = 2, #test_list do\n            if test_list[i] < min_val then\n                min_val = test_list[i]\n                min_idx = i\n            end\n        end\n        table.insert(min_list, min_val)\n        table.remove(test_list, min_idx)\n        if #min_list == K then\n            return min_list\n        else\n            return min_k_helper(test_list, K, min_list)\n        end\n    end\n    return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqkp_8w2.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmppqkp_8w2.lua:11: in function </tmp/tmppqkp_8w2.lua:3>\n\t(...tail calls...)\n\t/tmp/tmppqkp_8w2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_index = 1\n    for j = 2, K do\n      if min_list[j] > min_list[max_index] then\n        max_index = j\n      end\n    end\n    if test_list[i] < min_list[max_index] then\n      min_list[max_index] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ecafswl.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp0ecafswl.lua:10: in local 'candidate'\n\t/tmp/tmp0ecafswl.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tmin_list[i] = test_list[i]\n\tend\n\tfor i = K + 1, #test_list do\n\t\tlocal max = min_list[1]\n\t\tlocal max_index = 1\n\t\tfor j = 2, K do\n\t\t\tif min_list[j] > max then\n\t\t\t\tmax = min_list[j]\n\t\t\t\tmax_index = j\n\t\t\tend\n\t\tend\n\t\tif test_list[i] < max then\n\t\t\tmin_list[max_index] = test_list[i]\n\t\tend\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttv695ha.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpttv695ha.lua:11: in local 'candidate'\n\t/tmp/tmpttv695ha.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            table.insert(min_list, v)\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_list_size do\n                if min_list[j] > min_list[max_index] then\n                    max_index = j\n                end\n            end\n            if min_list[max_index] > v then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96y0g18m.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp96y0g18m.lua:12: in local 'candidate'\n\t/tmp/tmp96y0g18m.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local result = {}\n  local min_k = {}\n  local min_k_count = 0\n  for i, v in ipairs(test_list) do\n    if min_k_count < K then\n      min_k[v] = true\n      min_k_count = min_k_count + 1\n    else\n      local min_k_max = -math.huge\n      local min_k_max_key\n      for k, _ in pairs(min_k) do\n        if k > min_k_max then\n          min_k_max = k\n          min_k_max_key = k\n        end\n      end\n      if v < min_k_max then\n        min_k[min_k_max_key] = nil\n        min_k[v] = true\n      end\n    end\n  end\n  for k, _ in pairs(min_k) do\n    table.insert(result, k)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsta1s7t.lua:14: attempt to compare number with table\nstack traceback:\n\t/tmp/tmphsta1s7t.lua:14: in local 'candidate'\n\t/tmp/tmphsta1s7t.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    for _, v in ipairs(test_list) do\n        if min_k_size < K then\n            min_k[min_k_size + 1] = v\n            min_k_size = min_k_size + 1\n        else\n            local max_index = 1\n            for i = 2, min_k_size do\n                if min_k[i] > min_k[max_index] then\n                    max_index = i\n                end\n            end\n            if min_k[max_index] > v then\n                min_k[max_index] = v\n            end\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc65_r75y.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpc65_r75y.lua:12: in local 'candidate'\n\t/tmp/tmpc65_r75y.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_len = 0\n    local min_k_list_max = K\n    local min_k_list_min = math.huge\n    local min_k_list_min_index = 0\n    local test_list_len = #test_list\n    for i = 1, test_list_len do\n        local test_list_i = test_list[i]\n        if min_k_list_len < min_k_list_max then\n            min_k_list_len = min_k_list_len + 1\n            min_k_list[min_k_list_len] = test_list_i\n            if test_list_i < min_k_list_min then\n                min_k_list_min = test_list_i\n                min_k_list_min_index = min_k_list_len\n            end\n        elseif test_list_i < min_k_list_min then\n            min_k_list[min_k_list_min_index] = test_list_i\n            min_k_list_min = test_list_i\n            for j = 1, min_k_list_len do\n                local min_k_list_j = min_k_list[j]\n                if min_k_list_j < min_k_list_min then\n                    min_k_list_min = min_k_list_j\n                    min_k_list_min_index = j\n                end\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfwaqi7i.lua:14: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpwfwaqi7i.lua:14: in local 'candidate'\n\t/tmp/tmpwfwaqi7i.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_val = nil\n  local min_list_max_idx = nil\n  local min_list_max_val_idx = nil\n  for i,v in ipairs(test_list) do\n    if min_list_size < min_list_max_size then\n      min_list[#min_list+1] = v\n      min_list_size = min_list_size + 1\n      if min_list_max_val == nil or v > min_list_max_val then\n        min_list_max_val = v\n        min_list_max_idx = #min_list\n      end\n    else\n      if v < min_list_max_val then\n        min_list[min_list_max_idx] = v\n        min_list_max_val = v\n        for i,v in ipairs(min_list) do\n          if v > min_list_max_val then\n            min_list_max_val = v\n            min_list_max_idx = i\n          end\n        end\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsv1ro9fr.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpsv1ro9fr.lua:13: in local 'candidate'\n\t/tmp/tmpsv1ro9fr.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_heap = {}\n    local heap_size = 0\n    local min_heap_insert = function(x)\n        heap_size = heap_size + 1\n        min_heap[heap_size] = x\n        local i = heap_size\n        while i > 1 and min_heap[i // 2] > min_heap[i] do\n            min_heap[i], min_heap[i // 2] = min_heap[i // 2], min_heap[i]\n            i = i // 2\n        end\n    end\n    local min_heap_extract_min = function()\n        local min = min_heap[1]\n        min_heap[1] = min_heap[heap_size]\n        heap_size = heap_size - 1\n        local i = 1\n        while 2 * i <= heap_size do\n            local j = 2 * i\n            if j < heap_size and min_heap[j] > min_heap[j + 1] then\n                j = j + 1\n            end\n            if min_heap[i] <= min_heap[j] then\n                break\n            end\n            min_heap[i], min_heap[j] = min_heap[j], min_heap[i]\n            i = j\n        end\n        return min\n    end\n    for _, x in ipairs(test_list) do\n        if heap_size < K then\n            min_heap_insert(x)\n        elseif x < min_heap[1] then\n            min_heap_extract_min()\n            min_heap_insert(x)\n        end\n    end\n    local result = {}\n    for i = 1, K do\n        result[i] = min_heap_extract_min()\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5reregvr.lua:9: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp5reregvr.lua:9: in local 'min_heap_insert'\n\t/tmp/tmp5reregvr.lua:34: in local 'candidate'\n\t/tmp/tmp5reregvr.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_test = min_k_list[1]\n      local max_test_index = 1\n      for j = 2, K do\n        if min_k_list[j].score > max_test.score then\n          max_test = min_k_list[j]\n          max_test_index = j\n        end\n      end\n      if test.score < max_test.score then\n        min_k_list[max_test_index] = test\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2a82csda.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2a82csda.lua:14: in local 'candidate'\n\t/tmp/tmp2a82csda.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        local min_value = math.huge\n        local min_index = -1\n        for j = 1, #test_list do\n            if test_list[j] < min_value then\n                min_value = test_list[j]\n                min_index = j\n            end\n        end\n        min_k_list[i] = min_value\n        table.remove(test_list, min_index)\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lwr1oym.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp0lwr1oym.lua:8: in local 'candidate'\n\t/tmp/tmp0lwr1oym.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if #min_list < K then\n            table.insert(min_list, test)\n        else\n            local max_test = min_list[1]\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j].score > max_test.score then\n                    max_test = min_list[j]\n                    max_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jp_rxek.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1jp_rxek.lua:12: in local 'candidate'\n\t/tmp/tmp1jp_rxek.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_count = 0\n  local min_k_list_max = K\n  local min_k_list_min = nil\n  for i = 1, #test_list do\n    local test_value = test_list[i]\n    if min_k_list_count < min_k_list_max then\n      min_k_list_count = min_k_list_count + 1\n      min_k_list[min_k_list_count] = test_value\n      if min_k_list_min == nil or test_value < min_k_list_min then\n        min_k_list_min = test_value\n      end\n    elseif test_value > min_k_list_min then\n      local min_k_list_min_index = nil\n      for j = 1, min_k_list_count do\n        if min_k_list[j] == min_k_list_min then\n          min_k_list_min_index = j\n          break\n        end\n      end\n      min_k_list[min_k_list_min_index] = test_value\n      min_k_list_min = test_value\n      for j = 1, min_k_list_count do\n        if min_k_list[j] < min_k_list_min then\n          min_k_list_min = min_k_list[j]\n        end\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp14fqt7z1.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp14fqt7z1.lua:12: in local 'candidate'\n\t/tmp/tmp14fqt7z1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K)\n    if K == 0 then return {} end\n    if #test_list == 0 then return {} end\n    local min_k_rec_rest = min_k_rec(test_list, K-1)\n    local min_k_rec_rest_min = min_k_rec_rest[1]\n    local min_k_rec_rest_min_idx = min_k_rec_rest[2]\n    local min_k_rec_rest_rest = min_k_rec_rest[3]\n    local min_k_rec_rest_rest_min = min_k_rec_rest_rest[1]\n    local min_k_rec_rest_rest_min_idx = min_k_rec_rest_rest[2]\n    local min_k_rec_rest_rest_rest = min_k_rec_rest_rest[3]\n    local min_k_rec_rest_rest_rest_min = min_k_rec_rest_rest_rest[1]\n    local min_k_rec_rest_rest_rest_min_idx = min_k_rec_rest_rest_rest[2]\n    local min_k_rec_rest_rest_rest_rest = min_k_rec_rest_rest_rest[3]\n    local min_k_rec_rest_rest_rest_rest_min = min_k_rec_rest_rest_rest_rest[1]\n    local min_k_rec_rest_rest_rest_rest_min_idx = min_k_rec_rest_rest_rest_rest[2]\n    local min_k_rec_rest_rest_rest_rest_rest = min_k_rec_rest_rest_rest_rest[3]\n    local min_k_rec_rest_rest_rest_rest_rest_min = min_k_rec_rest_rest_rest_rest_rest[1]\n    local min_k_rec_rest_rest_rest_rest_rest_min_idx = min_k_rec_rest_rest_rest_rest_rest[2]\n    local min_k_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5z2_arwd.lua:31: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_k_list = {}\n\tlocal min_k_list_len = 0\n\tlocal min_k_list_max_len = K\n\tlocal test_list_len = #test_list\n\tlocal test_list_max_len = test_list_len\n\tfor i = 1, test_list_len do\n\t\tlocal test_list_i = test_list[i]\n\t\tlocal test_list_i_len = #test_list_i\n\t\tif test_list_i_len > 0 then\n\t\t\tlocal test_list_i_1 = test_list_i[1]\n\t\t\tif min_k_list_len < min_k_list_max_len then\n\t\t\t\tmin_k_list_len = min_k_list_len + 1\n\t\t\t\tmin_k_list[min_k_list_len] = test_list_i_1\n\t\t\telse\n\t\t\t\tlocal min_k_list_max_len_1 = min_k_list_max_len - 1\n\t\t\t\tlocal min_k_list_max_len_1_1 = min_k_list_max_len_1 + 1\n\t\t\t\tlocal min_k_list_max_len_1_2 = min_k_list_max_len_1 + 2\n\t\t\t\tlocal min_k_list_max_len_1_3 = min_k_list_max_len_1 + 3\n\t\t\t\tlocal min_k_list_max_len_1_4 = min_k_list_max_len_1 + 4\n\t\t\t\tlocal min_k_list_max_len_1_5 = min_k_list_max_len_1 + 5\n\t\t\t\tlocal min_k_list_max_len_1_6 = min_k_list_max_len_1 + 6\n\t\t\t\tlocal min_k_list_max_len_1_7 = min_k_list_max_len_1 + 7\n\t\t\t\tlocal min_k_list_max_len_1_8 = min_k_list_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9nzxlha0.lua:35: 'end' expected (to close 'if' at line 13) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  table.sort(min_k_list)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k_list[K] then\n      min_k_list[K] = test_list[i]\n      table.sort(min_k_list)\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    for _, test in ipairs(test_list) do\n        if min_k_size < K then\n            min_k[min_k_size + 1] = test\n            min_k_size = min_k_size + 1\n            if min_k_size == K then\n                table.sort(min_k, function(a, b) return a.id < b.id end)\n            end\n        else\n            if test.id < min_k[K].id then\n                min_k[K] = test\n                table.sort(min_k, function(a, b) return a.id < b.id end)\n            end\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1r8wvy0j.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1r8wvy0j.lua:10: in function </tmp/tmp1r8wvy0j.lua:10>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp1r8wvy0j.lua:10: in local 'candidate'\n\t/tmp/tmp1r8wvy0j.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    min_list = sort_list(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i] > min_list[K] then\n            min_list[K] = test_list[i]\n            min_list = sort_list(min_list)\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvwmn3ru.lua:7: attempt to call a nil value (global 'sort_list')\nstack traceback:\n\t/tmp/tmptvwmn3ru.lua:7: in local 'candidate'\n\t/tmp/tmptvwmn3ru.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test_case\n      min_k_size = min_k_size + 1\n    else\n      local max_idx = 1\n      for j = 2, #min_k do\n        if min_k[j].time > min_k[max_idx].time then\n          max_idx = j\n        end\n      end\n      if test_case.time < min_k[max_idx].time then\n        min_k[max_idx] = test_case\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglm_3t4f.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpglm_3t4f.lua:13: in local 'candidate'\n\t/tmp/tmpglm_3t4f.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local test_list_size = #test_list\n  for i = 1, test_list_size do\n    local test_list_i = test_list[i]\n    if min_k_list_size < K then\n      min_k_list_size = min_k_list_size + 1\n      min_k_list[min_k_list_size] = test_list_i\n    else\n      local min_k_list_max = min_k_list[1]\n      local min_k_list_max_index = 1\n      for j = 2, min_k_list_size do\n        local min_k_list_j = min_k_list[j]\n        if min_k_list_j > min_k_list_max then\n          min_k_list_max = min_k_list_j\n          min_k_list_max_index = j\n        end\n      end\n      if min_k_list_max > test_list_i then\n        min_k_list[min_k_list_max_index] = test_list_i\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93o1y2c5.lua:16: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp93o1y2c5.lua:16: in local 'candidate'\n\t/tmp/tmp93o1y2c5.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    for i = 2, #test_list do\n      if test_list[i] < min_val then min_val = test_list[i] end\n    end\n    table.insert(min_list, min_val)\n    local new_test_list = {}\n    for i = 1, #test_list do\n      if test_list[i] ~= min_val then table.insert(new_test_list, test_list[i]) end\n    end\n    if #min_list == K then return min_list end\n    return min_k_helper(new_test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiet3po9s.lua:8: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpiet3po9s.lua:8: in function </tmp/tmpiet3po9s.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpiet3po9s.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_test = min_list[1]\n            local max_test_index = 1\n            for j = 2, K do\n                if min_list[j].time > max_test.time then\n                    max_test = min_list[j]\n                    max_test_index = j\n                end\n            end\n            if test.time < max_test.time then\n                min_list[max_test_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphjfg8tkw.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmphjfg8tkw.lua:14: in local 'candidate'\n\t/tmp/tmphjfg8tkw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_helper(test_list, K, min_list)\n        if #test_list == 0 then\n            return min_list\n        end\n        local min_list = min_list or {}\n        local min_list_len = #min_list\n        local min_list_max = min_list_len > 0 and min_list[min_list_len] or math.huge\n        local test_list_len = #test_list\n        local test_list_max = test_list[test_list_len]\n        if test_list_max < min_list_max then\n            if min_list_len < K then\n                table.insert(min_list, test_list_max)\n            else\n                table.remove(min_list)\n                table.insert(min_list, test_list_max)\n            end\n        end\n        table.remove(test_list)\n        return min_k_helper(test_list, K, min_list)\n    end\n    return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplt5gutui.lua:12: attempt to compare table with number\nstack traceback:\n\t/tmp/tmplt5gutui.lua:12: in function </tmp/tmplt5gutui.lua:3>\n\t(...tail calls...)\n\t/tmp/tmplt5gutui.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    if #min_list < K then\n      min_list[#min_list + 1] = test_list[1]\n      return min_k_rec(test_list:sub(2), K, min_list)\n    end\n    local max_index = 1\n    for i = 2, #min_list do\n      if min_list[i] > min_list[max_index] then\n        max_index = i\n      end\n    end\n    if test_list[1] < min_list[max_index] then\n      min_list[max_index] = test_list[1]\n    end\n    return min_k_rec(test_list:sub(2), K, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnh6wsu5g.lua:9: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpnh6wsu5g.lua:9: in function </tmp/tmpnh6wsu5g.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpnh6wsu5g.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_rec(test_list, K)\n\t\tlocal min_k_rec_list = {}\n\t\tfor i = 1, K do\n\t\t\tlocal min_k_rec_list_i = test_list[i]\n\t\t\tfor j = i + 1, #test_list do\n\t\t\t\tif test_list[j] < min_k_rec_list_i then\n\t\t\t\t\tmin_k_rec_list_i = test_list[j]\n\t\t\t\tend\n\t\t\tend\n\t\t\tmin_k_rec_list[i] = min_k_rec_list_i\n\t\tend\n\t\treturn min_k_rec_list\n\tend\n\tlocal function min_k_rec_list_sort(min_k_rec_list)\n\t\tlocal min_k_rec_list_sort_list = {}\n\t\tfor i = 1, #min_k_rec_list do\n\t\t\tlocal min_k_rec_list_sort_list_i = min_k_rec_list[i]\n\t\t\tfor j = i + 1, #min_k_rec_list do\n\t\t\t\tif min_k_rec_list[j] < min_k_rec_list_sort_list_i then\n\t\t\t\t\tmin_k_rec_list_sort_list_i = min_k_rec_list[j]\n\t\t\t\tend\n\t\t\tend\n\t\t\tmin_k_rec_list_sort_list[i] = min_k_rec_list_sort_list_i\n\t\tend\n\t\treturn min_k_rec_list_sort_list\n\tend\n\treturn min_k_rec_list_sort(min_k_rec(test_list, K))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabymkkgr.lua:8: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpabymkkgr.lua:8: in local 'min_k_rec'\n\t/tmp/tmpabymkkgr.lua:29: in local 'candidate'\n\t/tmp/tmpabymkkgr.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw5g43z7_.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test_case\n      min_list_size = min_list_size + 1\n    else\n      local min_test_case = min_list[1]\n      local min_index = 1\n      for j = 2, #min_list do\n        local cur_test_case = min_list[j]\n        if cur_test_case.time < min_test_case.time then\n          min_test_case = cur_test_case\n          min_index = j\n        end\n      end\n      if test_case.time < min_test_case.time then\n        min_list[min_index] = test_case\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgfjhwn4b.lua:15: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgfjhwn4b.lua:15: in local 'candidate'\n\t/tmp/tmpgfjhwn4b.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i=2,#test_list do\n      if test_list[i] < min_val then\n        min_val = test_list[i]\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwzpz5fh.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmphwzpz5fh.lua:11: in function </tmp/tmphwzpz5fh.lua:3>\n\t(...tail calls...)\n\t/tmp/tmphwzpz5fh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    local test_list_size = #test_list\n    for i = 1, test_list_size do\n        local test_list_i = test_list[i]\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_list_i\n            min_k_list_size = min_k_list_size + 1\n        else\n            local min_k_list_max = min_k_list[min_k_list_size]\n            if test_list_i < min_k_list_max then\n                min_k_list[min_k_list_size] = test_list_i\n                for j = min_k_list_size - 1, 1, -1 do\n                    local min_k_list_j = min_k_list[j]\n                    if min_k_list_j > test_list_i then\n                        min_k_list[j + 1] = min_k_list_j\n                        min_k_list[j] = test_list_i\n                    else\n                        break\n                    end\n                end\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qiadztn.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp9qiadztn.lua:13: in local 'candidate'\n\t/tmp/tmp9qiadztn.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test_list[i]\n      min_k_size = min_k_size + 1\n    else\n      local max_index = 1\n      for j = 2, min_k_size do\n        if min_k[j] > min_k[max_index] then\n          max_index = j\n        end\n      end\n      if test_list[i] < min_k[max_index] then\n        min_k[max_index] = test_list[i]\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp730ij_71.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp730ij_71.lua:12: in local 'candidate'\n\t/tmp/tmp730ij_71.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_value = math.huge\n    local min_index = 0\n    for i, v in ipairs(test_list) do\n      if v < min_value then\n        min_value = v\n        min_index = i\n      end\n    end\n    table.insert(min_list, min_value)\n    table.remove(test_list, min_index)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2m0sktb.lua:11: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpy2m0sktb.lua:11: in function </tmp/tmpy2m0sktb.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpy2m0sktb.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test_case\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      local max_value = min_list[1].value\n      for j = 2, min_list_size do\n        if min_list[j].value > max_value then\n          max_index = j\n          max_value = min_list[j].value\n        end\n      end\n      if test_case.value < max_value then\n        min_list[max_index] = test_case\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjagsvfh3.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpjagsvfh3.lua:14: in local 'candidate'\n\t/tmp/tmpjagsvfh3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for _, test in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      for i = 2, K do\n        if min_list[i].score > min_list[max_index].score then\n          max_index = i\n        end\n      end\n      if min_list[max_index].score > test.score then\n        min_list[max_index] = test\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kwf70w9.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6kwf70w9.lua:12: in local 'candidate'\n\t/tmp/tmp6kwf70w9.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_value = nil\n  local min_list_max_value_index = nil\n  for i, v in ipairs(test_list) do\n    if min_list_size < min_list_max_size then\n      min_list_size = min_list_size + 1\n      min_list[min_list_size] = v\n      if min_list_max_value == nil then\n        min_list_max_value = v\n        min_list_max_value_index = min_list_size\n      elseif v > min_list_max_value then\n        min_list_max_value = v\n        min_list_max_value_index = min_list_size\n      end\n    elseif v < min_list_max_value then\n      min_list[min_list_max_value_index] = v\n      min_list_max_value = v\n      for j, w in ipairs(min_list) do\n        if w > min_list_max_value then\n          min_list_max_value = w\n          min_list_max_value_index = j\n        end\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2ebr42r.lua:15: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpf2ebr42r.lua:15: in local 'candidate'\n\t/tmp/tmpf2ebr42r.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_index = 0\n    for i,v in ipairs(test_list) do\n        if min_k_list_size < K then\n            min_k_list_size = min_k_list_size + 1\n            min_k_list[min_k_list_size] = v\n        else\n            local min = min_k_list[1]\n            local min_index = 1\n            for j = 2, min_k_list_size do\n                if min_k_list[j] < min then\n                    min = min_k_list[j]\n                    min_index = j\n                end\n            end\n            if v > min then\n                min_k_list[min_index] = v\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dcywzsq.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp7dcywzsq.lua:14: in local 'candidate'\n\t/tmp/tmp7dcywzsq.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    table.sort(min_k_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_k_list[K] then\n            min_k_list[K] = test_list[i]\n            table.sort(min_k_list)\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i, v in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = v\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      for j = 2, K do\n        if min_list[j] > min_list[max_index] then\n          max_index = j\n        end\n      end\n      if min_list[max_index] > v then\n        min_list[max_index] = v\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11c1qdly.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp11c1qdly.lua:12: in local 'candidate'\n\t/tmp/tmp11c1qdly.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_helper(test_list, K, min_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_list\n\t\tend\n\t\tlocal min_value = test_list[1]\n\t\tlocal min_index = 1\n\t\tfor i = 2, #test_list do\n\t\t\tif test_list[i] < min_value then\n\t\t\t\tmin_value = test_list[i]\n\t\t\t\tmin_index = i\n\t\t\tend\n\t\tend\n\t\ttable.remove(test_list, min_index)\n\t\ttable.insert(min_list, min_value)\n\t\tif #min_list == K then\n\t\t\treturn min_list\n\t\tend\n\t\treturn min_k_helper(test_list, K, min_list)\n\tend\n\treturn min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1f1uo5r.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpv1f1uo5r.lua:10: in function </tmp/tmpv1f1uo5r.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpv1f1uo5r.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_value = test_list[1]\n    local min_index = 1\n    for i = 2, #test_list do\n      if test_list[i] < min_value then\n        min_value = test_list[i]\n        min_index = i\n      end\n    end\n    table.insert(min_list, min_value)\n    table.remove(test_list, min_index)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027761,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4qelo5w.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmph4qelo5w.lua:11: in function </tmp/tmph4qelo5w.lua:3>\n\t(tail call): ?\n\t/tmp/tmph4qelo5w.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test\n      min_k_size = min_k_size + 1\n    else\n      local max_idx = 1\n      for j = 2, min_k_size do\n        if min_k[j].score > min_k[max_idx].score then\n          max_idx = j\n        end\n      end\n      if test.score < min_k[max_idx].score then\n        min_k[max_idx] = test\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmrjg9gs.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmphmrjg9gs.lua:13: in local 'candidate'\n\t/tmp/tmphmrjg9gs.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    local min_k_max_idx = 0\n    local min_k_max_val = 0\n    local min_k_max_idx_in_test_list = 0\n    local min_k_max_val_in_test_list = 0\n    local min_k_max_idx_in_min_k = 0\n    local min_k_max_val_in_min_k = 0\n    local min_k_max_idx_in_min_k_in_test_list = 0\n    local min_k_max_val_in_min_k_in_test_list = 0\n    local min_k_max_idx_in_min_k_in_min_k = 0\n    local min_k_max_val_in_min_k_in_min_k = 0\n    local min_k_max_idx_in_min_k_in_min_k_in_test_list = 0\n    local min_k_max_val_in_min_k_in_min_k_in_test_list = 0\n    local min_k_max_idx_in_min_k_in_min_k_in_min_k = 0\n    local min_k_max_val_in_min_k_in_min_k_in_min_k = 0\n    local min_k_max_idx_in_min_k_in_min_k_in_min_k_in_test_list = 0\n    local min_k_max_val_in_min_k_in_min_k_in_min_k_in_test_list = 0\n    local min_k_max_idx_in_min_k_in_min_k_in_min_k_in_min_k = 0\n    local min_k_max_val_in_min_k_in_min_k_in_min_k_in_min_k = 0\n    local min_k_max_idx_in_min_k_in_min_k_in_min_k\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkv5nq1g1.lua:33: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i = 2, #test_list do\n      if test_list[i] < min_val then\n        min_val = test_list[i]\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_rec(test_list, K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_gd_ajg.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpf_gd_ajg.lua:11: in function </tmp/tmpf_gd_ajg.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpf_gd_ajg.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i, test in ipairs(test_list) do\n        if i <= K then\n            min_list[i] = test\n        else\n            local min_test = min_list[1]\n            for j, min_test in ipairs(min_list) do\n                if test.score < min_test.score then\n                    min_test = test\n                    min_list[j] = test\n                    break\n                end\n            end\n            if min_test.score > test.score then\n                for j, min_test in ipairs(min_list) do\n                    if min_test.score > test.score then\n                        min_list[j] = test\n                        break\n                    end\n                end\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpib33bp5k.lua:10: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpib33bp5k.lua:10: in local 'candidate'\n\t/tmp/tmpib33bp5k.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n   local function min_k_helper(test_list, K, min_list)\n      if #test_list == 0 then\n         return min_list\n      end\n      local min_list = min_list or {}\n      local min_val = test_list[1]\n      for i = 2, #test_list do\n         if test_list[i] < min_val then\n            min_val = test_list[i]\n         end\n      end\n      table.insert(min_list, min_val)\n      local new_test_list = {}\n      for i = 1, #test_list do\n         if test_list[i] ~= min_val then\n            table.insert(new_test_list, test_list[i])\n         end\n      end\n      if #min_list == K then\n         return min_list\n      end\n      return min_k_helper(new_test_list, K, min_list)\n   end\n   return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26zqjeab.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp26zqjeab.lua:10: in function </tmp/tmp26zqjeab.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp26zqjeab.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local test_item = test_list[1]\n    local min_list_len = #min_list\n    if min_list_len < K then\n      table.insert(min_list, test_item)\n      table.sort(min_list, function(a, b) return a < b end)\n    elseif test_item < min_list[K] then\n      min_list[K] = test_item\n      table.sort(min_list, function(a, b) return a < b end)\n    end\n    return min_k_rec(table.slice(test_list, 2), K, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswb2to0d.lua:16: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpswb2to0d.lua:16: in function </tmp/tmpswb2to0d.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpswb2to0d.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    for i = 1, K do\n        min_k[i] = test_list[i]\n    end\n    for i = K + 1, #test_list do\n        local max = min_k[1]\n        local max_index = 1\n        for j = 2, K do\n            if min_k[j] > max then\n                max = min_k[j]\n                max_index = j\n            end\n        end\n        if test_list[i] < max then\n            min_k[max_index] = test_list[i]\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxvygoct.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpxxvygoct.lua:11: in local 'candidate'\n\t/tmp/tmpxxvygoct.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local min_k_list_max_value_index = nil\n  for i = 1, #test_list do\n    local test_value = test_list[i]\n    if min_k_list_size < min_k_list_max_size then\n      min_k_list_size = min_k_list_size + 1\n      min_k_list[min_k_list_size] = test_value\n      if min_k_list_max_value == nil or test_value > min_k_list_max_value then\n        min_k_list_max_value = test_value\n        min_k_list_max_value_index = min_k_list_size\n      end\n    elseif test_value < min_k_list_max_value then\n      min_k_list[min_k_list_max_value_index] = test_value\n      min_k_list_max_value = test_value\n      for j = 1, min_k_list_size do\n        if min_k_list[j] > min_k_list_max_value then\n          min_k_list_max_value = min_k_list[j]\n          min_k_list_max_value_index = j\n        end\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9s9wal2_.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp9s9wal2_.lua:13: in local 'candidate'\n\t/tmp/tmp9s9wal2_.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_helper(test_list, K, min_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_list\n\t\tend\n\t\tlocal min_list_size = #min_list\n\t\tif min_list_size < K then\n\t\t\tmin_list[min_list_size + 1] = test_list[1]\n\t\t\treturn min_k_helper(test_list.slice(2), K, min_list)\n\t\tend\n\t\tlocal max_val = min_list[1]\n\t\tlocal max_index = 1\n\t\tfor i = 2, min_list_size do\n\t\t\tif min_list[i] > max_val then\n\t\t\t\tmax_val = min_list[i]\n\t\t\t\tmax_index = i\n\t\t\tend\n\t\tend\n\t\tif test_list[1] < max_val then\n\t\t\tmin_list[max_index] = test_list[1]\n\t\tend\n\t\treturn min_k_helper(test_list.slice(2), K, min_list)\n\tend\n\treturn min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7iy5g0s.lua:10: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmpq7iy5g0s.lua:10: in function </tmp/tmpq7iy5g0s.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpq7iy5g0s.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_rec(test_list, K)\n        if #test_list == 0 then\n            return {}\n        end\n        local min_k_rec_helper = function(test_list, K, min_k_list)\n            if #test_list == 0 then\n                return min_k_list\n            end\n            local min_k_list_new = {}\n            local min_k_list_new_idx = 1\n            local min_k_list_idx = 1\n            local test_list_idx = 1\n            while test_list_idx <= #test_list and min_k_list_idx <= #min_k_list do\n                if test_list[test_list_idx] < min_k_list[min_k_list_idx] then\n                    min_k_list_new[min_k_list_new_idx] = test_list[test_list_idx]\n                    min_k_list_new_idx = min_k_list_new_idx + 1\n                    test_list_idx = test_list_idx + 1\n                else\n                    min_k_list_new[min_k_list_new_idx] = min_k_list[min_k_list_idx]\n                    min_k_list_new_idx = min_k_list_new_idx + 1\n                    min_k_list_idx = min_k_list_idx + 1\n                end\n            end\n            while test_list_idx <= #test_list do\n                min_k_list_new[min_k_list_new_idx] = test_list[test_list_idx]\n                min_k_list_new_idx = min_k_list_new_idx + 1\n                test_list_idx = test_list_idx + 1\n            end\n            while min_k_list_idx <= #min_k_list do\n                min_k_list_new[min_k_list_new_idx] = min_k_list[min_k_list_idx]\n                min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpntf8cg1j.lua:34: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tmin_list[i] = test_list[i]\n\tend\n\ttable.sort(min_list)\n\tfor i = K + 1, #test_list do\n\t\tif test_list[i] < min_list[K] then\n\t\t\tmin_list[K] = test_list[i]\n\t\t\ttable.sort(min_list)\n\t\tend\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i, test in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, K do\n                if min_list[j].score > min_list[max_index].score then\n                    max_index = j\n                end\n            end\n            if test.score < min_list[max_index].score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj48rde7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpbj48rde7.lua:12: in local 'candidate'\n\t/tmp/tmpbj48rde7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_k_size < K then\n            min_k[min_k_size + 1] = test\n            min_k_size = min_k_size + 1\n        else\n            local max_test = min_k[1]\n            local max_test_index = 1\n            for j = 2, #min_k do\n                if min_k[j].score > max_test.score then\n                    max_test = min_k[j]\n                    max_test_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_k[max_test_index] = test\n            end\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1ka2wqg.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpy1ka2wqg.lua:14: in local 'candidate'\n\t/tmp/tmpy1ka2wqg.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local t = {}\n  for i = 1, #test_list do\n    t[i] = test_list[i]\n  end\n  table.sort(t)\n  local res = {}\n  for i = 1, K do\n    res[i] = t[i]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_k_list)\n    if #test_list == 0 then return min_k_list end\n    local min_k_list = min_k_list or {}\n    local min_k_list_len = #min_k_list\n    local test_list_len = #test_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n    local min_k_list_len = #min_k_list\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyfvh3ujq.lua:43: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_list[i]\n      min_k_list_size = min_k_list_size + 1\n      if min_k_list_size == K then\n        table.sort(min_k_list)\n      end\n    else\n      if min_k_list[K] < test_list[i] then\n        min_k_list[K] = test_list[i]\n        table.sort(min_k_list)\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, K do\n        min_list[i] = test_list[i]\n    end\n    table.sort(min_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_list[K] then\n            min_list[K] = test_list[i]\n            table.sort(min_list)\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_rec(test_list, K, min_list)\n        if #test_list == 0 then\n            return min_list\n        end\n        local min_list = min_list or {}\n        local min_list_len = #min_list\n        local min_list_max = min_list_len > 0 and min_list[min_list_len] or math.huge\n        local test_list_len = #test_list\n        local test_list_max = test_list[test_list_len]\n        if test_list_max < min_list_max then\n            table.insert(min_list, test_list_max)\n            table.remove(test_list, test_list_len)\n            if #min_list > K then\n                table.remove(min_list, 1)\n            end\n        else\n            table.remove(test_list, test_list_len)\n        end\n        return min_k_rec(test_list, K, min_list)\n    end\n    return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpirevmq9x.lua:12: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpirevmq9x.lua:12: in function </tmp/tmpirevmq9x.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpirevmq9x.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    local test = test_list[i]\n    if min_k_size < K then\n      min_k_size = min_k_size + 1\n      min_k[min_k_size] = test\n    else\n      local max_test = min_k[1]\n      local max_test_index = 1\n      for j = 2, min_k_size do\n        if min_k[j].score > max_test.score then\n          max_test = min_k[j]\n          max_test_index = j\n        end\n      end\n      if test.score < max_test.score then\n        min_k[max_test_index] = test\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_jhd2rv.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpq_jhd2rv.lua:14: in local 'candidate'\n\t/tmp/tmpq_jhd2rv.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_list_i = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_list_i\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_i = 1\n      for j = 2, min_k_list_size do\n        if min_k_list[j] > min_k_list[max_i] then\n          max_i = j\n        end\n      end\n      if test_list_i < min_k_list[max_i] then\n        min_k_list[max_i] = test_list_i\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgg030uq.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpjgg030uq.lua:13: in local 'candidate'\n\t/tmp/tmpjgg030uq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, K do\n        local min = math.huge\n        local min_index = 0\n        for j = 1, #test_list do\n            if test_list[j] < min then\n                min = test_list[j]\n                min_index = j\n            end\n        end\n        min_list[i] = min\n        table.remove(test_list, min_index)\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6yif76nr.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp6yif76nr.lua:8: in local 'candidate'\n\t/tmp/tmp6yif76nr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val, min_index = math.huge, 0\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_index = i\n      end\n    end\n    table.remove(test_list, min_index)\n    table.insert(min_list, min_val)\n    return min_k_helper(test_list, K - 1, min_list)\n  end\n  return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7og1w9qk.lua:7: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp7og1w9qk.lua:7: in function </tmp/tmp7og1w9qk.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp7og1w9qk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    local min_k_list_max_size = K\n    local min_k_list_max_value = nil\n    for i, v in ipairs(test_list) do\n        if min_k_list_size < min_k_list_max_size then\n            table.insert(min_k_list, v)\n            min_k_list_size = min_k_list_size + 1\n            if min_k_list_max_value == nil then\n                min_k_list_max_value = v\n            elseif min_k_list_max_value < v then\n                min_k_list_max_value = v\n            end\n        elseif v < min_k_list_max_value then\n            local min_k_list_max_value_index = nil\n            for j, w in ipairs(min_k_list) do\n                if w == min_k_list_max_value then\n                    min_k_list_max_value_index = j\n                    break\n                end\n            end\n            min_k_list[min_k_list_max_value_index] = v\n            min_k_list_max_value = v\n            for j, w in ipairs(min_k_list) do\n                if w > min_k_list_max_value then\n                    min_k_list_max_value = w\n                end\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_nrm0mbk.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp_nrm0mbk.lua:13: in local 'candidate'\n\t/tmp/tmp_nrm0mbk.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    local min_list_max_size = K\n    local min_list_max_index = 0\n    local min_list_max_value = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < min_list_max_size then\n            min_list_size = min_list_size + 1\n            min_list[min_list_size] = v\n            if v > min_list_max_value then\n                min_list_max_value = v\n                min_list_max_index = min_list_size\n            end\n        elseif v < min_list_max_value then\n            min_list[min_list_max_index] = v\n            min_list_max_value = v\n            for j = 1, min_list_size do\n                if min_list[j] > min_list_max_value then\n                    min_list_max_value = min_list[j]\n                    min_list_max_index = j\n                end\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2iybyp1w.lua:12: attempt to compare number with table\nstack traceback:\n\t/tmp/tmp2iybyp1w.lua:12: in local 'candidate'\n\t/tmp/tmp2iybyp1w.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_test = min_list[1]\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j].score > max_test.score then\n                    max_test = min_list[j]\n                    max_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pcktcyk.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0pcktcyk.lua:14: in local 'candidate'\n\t/tmp/tmp0pcktcyk.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_index = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min_list_index_end = 0\n  local min_list_index_start = 0\n  local min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsmd0fy3p.lua:56: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_idx = 0\n        for j = 1, #test_list do\n            if test_list[j] < min_val then\n                min_val = test_list[j]\n                min_idx = j\n            end\n        end\n        table.insert(min_k, min_val)\n        table.remove(test_list, min_idx)\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6mz4a119.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp6mz4a119.lua:8: in local 'candidate'\n\t/tmp/tmp6mz4a119.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        local min_val = math.huge\n        local min_idx = -1\n        for j = 1, #test_list do\n            if test_list[j] < min_val then\n                min_val = test_list[j]\n                min_idx = j\n            end\n        end\n        table.insert(min_k_list, min_val)\n        table.remove(test_list, min_idx)\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28_du6zi.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp28_du6zi.lua:8: in local 'candidate'\n\t/tmp/tmp28_du6zi.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_list[i]\n            min_k_list_size = min_k_list_size + 1\n            if min_k_list_size == K then\n                table.sort(min_k_list)\n            end\n        else\n            if test_list[i] < min_k_list[K] then\n                min_k_list[K] = test_list[i]\n                table.sort(min_k_list)\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tlocal min_list_size = 0\n\tfor i = 1, #test_list do\n\t\tlocal test = test_list[i]\n\t\tif min_list_size < K then\n\t\t\tmin_list[min_list_size + 1] = test\n\t\t\tmin_list_size = min_list_size + 1\n\t\t\tif min_list_size == K then\n\t\t\t\ttable.sort(min_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\telse\n\t\t\tif test.id < min_list[K].id then\n\t\t\t\tmin_list[K] = test\n\t\t\t\ttable.sort(min_list, function(a, b) return a.id < b.id end)\n\t\t\tend\n\t\tend\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpra3mp2uj.lua:11: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpra3mp2uj.lua:11: in function </tmp/tmpra3mp2uj.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpra3mp2uj.lua:11: in local 'candidate'\n\t/tmp/tmpra3mp2uj.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for _, test in ipairs(test_list) do\n    if min_k_size < K then\n      min_k[#min_k + 1] = test\n      min_k_size = min_k_size + 1\n    else\n      local max_test = min_k[1]\n      local max_test_index = 1\n      for i = 2, #min_k do\n        if min_k[i].score > max_test.score then\n          max_test = min_k[i]\n          max_test_index = i\n        end\n      end\n      if test.score < max_test.score then\n        min_k[max_test_index] = test\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0r2o6mo0.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0r2o6mo0.lua:13: in local 'candidate'\n\t/tmp/tmp0r2o6mo0.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    for i = 1, K do\n        min_k[i] = test_list[i]\n    end\n    table.sort(min_k, function(a, b) return a.score < b.score end)\n    for i = K + 1, #test_list do\n        if test_list[i].score < min_k[K].score then\n            min_k[K] = test_list[i]\n            table.sort(min_k, function(a, b) return a.score < b.score end)\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2z21et2.lua:7: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpc2z21et2.lua:7: in function </tmp/tmpc2z21et2.lua:7>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpc2z21et2.lua:7: in local 'candidate'\n\t/tmp/tmpc2z21et2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for _, test in ipairs(test_list) do\n    local min_val = test[1]\n    for i = 2, #test do\n      if test[i] < min_val then\n        min_val = test[i]\n      end\n    end\n    table.insert(min_list, min_val)\n  end\n  table.sort(min_list)\n  return min_list[K]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88wyqfzi.lua:7: attempt to compare number with string\nstack traceback:\n\t/tmp/tmp88wyqfzi.lua:7: in local 'candidate'\n\t/tmp/tmp88wyqfzi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  for i = 1, #test_list do\n    local test_case = test_list[i]\n    local min_k_list = {}\n    for j = 1, #test_case do\n      local test_case_item = test_case[j]\n      if #min_k_list < K then\n        table.insert(min_k_list, test_case_item)\n      else\n        local max_item = min_k_list[1]\n        local max_item_index = 1\n        for k = 2, #min_k_list do\n          local min_k_item = min_k_list[k]\n          if min_k_item > max_item then\n            max_item = min_k_item\n            max_item_index = k\n          end\n        end\n        if test_case_item < max_item then\n          min_k_list[max_item_index] = test_case_item\n        end\n      end\n    end\n    print(table.concat(min_k_list, \" \"))\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "Manjeet 10\nAkshat 4\nAkash 2\nNikhil 8\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetv8ag0d.lua:33: expected: {{\"Akash\", 2}, {\"Akshat\", 4}}\nactual: nil\nstack traceback:\n\t/tmp/tmpetv8ag0d.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = math.huge\n  local min_k_list_max_index = 0\n  local min_k_list_max_value_index = 0\n  for i = 1, #test_list do\n    local value = test_list[i]\n    if min_k_list_size < min_k_list_max_size then\n      min_k_list_size = min_k_list_size + 1\n      min_k_list[min_k_list_size] = value\n      if value > min_k_list_max_value then\n        min_k_list_max_value = value\n        min_k_list_max_index = min_k_list_size\n      end\n    else\n      if value < min_k_list_max_value then\n        min_k_list[min_k_list_max_index] = value\n        min_k_list_max_value = math.huge\n        for j = 1, min_k_list_size do\n          local value = min_k_list[j]\n          if value > min_k_list_max_value then\n            min_k_list_max_value = value\n            min_k_list_max_index = j\n          end\n        end\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeonns_o8.lua:14: attempt to compare number with table\nstack traceback:\n\t/tmp/tmpeonns_o8.lua:14: in local 'candidate'\n\t/tmp/tmpeonns_o8.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_list_i = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_list_i\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_i = 1\n      for j = 2, min_k_list_size do\n        if min_k_list[j] > min_k_list[max_i] then\n          max_i = j\n        end\n      end\n      if min_k_list[max_i] > test_list_i then\n        min_k_list[max_i] = test_list_i\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmd7z67pu.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpmd7z67pu.lua:13: in local 'candidate'\n\t/tmp/tmpmd7z67pu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    for i = 1, #test_list do\n        local test_case = test_list[i]\n        local min_val = test_case[1]\n        local min_idx = 1\n        for j = 2, #test_case do\n            if test_case[j] < min_val then\n                min_val = test_case[j]\n                min_idx = j\n            end\n        end\n        min_list[i] = {min_val, min_idx}\n    end\n    table.sort(min_list, function(a, b) return a[1] < b[1] end)\n    return min_list[K][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvz8xhrz.lua:9: attempt to compare number with string\nstack traceback:\n\t/tmp/tmpqvz8xhrz.lua:9: in local 'candidate'\n\t/tmp/tmpqvz8xhrz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  for i = 1, K do\n    min_k[i] = test_list[i]\n  end\n  table.sort(min_k)\n  for i = K + 1, #test_list do\n    if test_list[i] < min_k[K] then\n      min_k[K] = test_list[i]\n      table.sort(min_k)\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            table.insert(min_list, test)\n            min_list_size = min_list_size + 1\n        else\n            local max_test = min_list[1]\n            local max_test_index = 1\n            for j = 2, #min_list do\n                if min_list[j].score > max_test.score then\n                    max_test = min_list[j]\n                    max_test_index = j\n                end\n            end\n            if test.score < max_test.score then\n                min_list[max_test_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5y7fwmf.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpn5y7fwmf.lua:14: in local 'candidate'\n\t/tmp/tmpn5y7fwmf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_list_i = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_list_i\n      min_k_list_size = min_k_list_size + 1\n    else\n      local min_k_list_i = min_k_list[min_k_list_size]\n      if test_list_i < min_k_list_i then\n        min_k_list[min_k_list_size] = test_list_i\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzjmm278.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpgzjmm278.lua:12: in local 'candidate'\n\t/tmp/tmpgzjmm278.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_len = 0\n  for i = 1, #test_list do\n    local test_list_i = test_list[i]\n    if min_k_list_len < K then\n      min_k_list[min_k_list_len + 1] = test_list_i\n      min_k_list_len = min_k_list_len + 1\n    else\n      local max_i = 1\n      local max_val = min_k_list[1]\n      for j = 2, min_k_list_len do\n        local min_k_list_j = min_k_list[j]\n        if min_k_list_j > max_val then\n          max_i = j\n          max_val = min_k_list_j\n        end\n      end\n      if test_list_i < max_val then\n        min_k_list[max_i] = test_list_i\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_si7zqmz.lua:15: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp_si7zqmz.lua:15: in local 'candidate'\n\t/tmp/tmp_si7zqmz.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_index = 1\n  local min_list_index_max = K\n  local min_list_index_min = 1\n  local min_list_index_min_max = K\n  local min_list_index_max_min = 1\n  local min_list_index_min_max_min = 1\n  local min_list_index_max_min_max = 1\n  local min_list_index_min_max_min_max = 1\n  local min_list_index_max_min_max_min = 1\n  local min_list_index_min_max_min_max_min = 1\n  local min_list_index_max_min_max_min_max = 1\n  local min_list_index_min_max_min_max_min_max = 1\n  local min_list_index_max_min_max_min_max_min = 1\n  local min_list_index_min_max_min_max_min_max_min = 1\n  local min_list_index_max_min_max_min_max_min_max = 1\n  local min_list_index_min_max_min_max_min_max_min_max = 1\n  local min_list_index_max_min_max_min_max_min_max_min = 1\n  local min_list_index_min_max_min_max_min_max_min_max_min = 1\n  local min_list_index_max_min_max_min_max_min_max_min_max = 1\n  local min_list_index_min_max_min_max_min_max_min_max_min_max = 1\n  local min_list_index_max_min_max_min_max_min_max_min_max_min = 1\n  local min_list_index_min_max_min_max_min_max_min_max_min_max_min = 1\n  local min_list_index_max_min_max_min_max_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmp91eniogv.lua:38: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i=1,#test_list do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size+1] = test_list[i]\n            min_k_list_size = min_k_list_size + 1\n            if min_k_list_size == K then\n                table.sort(min_k_list)\n            end\n        else\n            if test_list[i] < min_k_list[K] then\n                min_k_list[K] = test_list[i]\n                table.sort(min_k_list)\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_rec(test_list, K)\n        if K == 0 then\n            return {}\n        end\n        local min_k_rec_list = min_k_rec(test_list, K-1)\n        local min_k_rec_list_len = #min_k_rec_list\n        local min_k_rec_list_min = min_k_rec_list[min_k_rec_list_len]\n        local min_k_rec_list_min_idx = min_k_rec_list_len\n        for i = 1, #test_list do\n            local test_list_i = test_list[i]\n            if test_list_i < min_k_rec_list_min then\n                min_k_rec_list_min = test_list_i\n                min_k_rec_list_min_idx = i\n            end\n        end\n        min_k_rec_list[min_k_rec_list_len+1] = min_k_rec_list_min\n        table.remove(test_list, min_k_rec_list_min_idx)\n        return min_k_rec_list\n    end\n    return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb1ixjw6e.lua:13: attempt to compare table with nil\nstack traceback:\n\t/tmp/tmpb1ixjw6e.lua:13: in upvalue 'min_k_rec'\n\t/tmp/tmpb1ixjw6e.lua:7: in function </tmp/tmpb1ixjw6e.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpb1ixjw6e.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_val = math.huge\n    local min_idx = nil\n    for i,v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    if #min_list == K then return min_list end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6rd5o6o.lua:9: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpk6rd5o6o.lua:9: in function </tmp/tmpk6rd5o6o.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpk6rd5o6o.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max = min_list[1]\n    local max_index = 1\n    for j = 2, K do\n      if min_list[j] > max then\n        max = min_list[j]\n        max_index = j\n      end\n    end\n    if test_list[i] < max then\n      min_list[max_index] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmperibdo1m.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmperibdo1m.lua:11: in local 'candidate'\n\t/tmp/tmperibdo1m.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local test = test_list[1]\n    local min_list = min_list or {}\n    if #min_list < K then\n      table.insert(min_list, test)\n    else\n      local max_test = min_list[1]\n      local max_index = 1\n      for i, test in ipairs(min_list) do\n        if test > max_test then\n          max_test = test\n          max_index = i\n        end\n      end\n      if test < max_test then\n        min_list[max_index] = test\n      end\n    end\n    return min_k_helper(table.slice(test_list, 2), K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hwsok93.lua:24: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp6hwsok93.lua:24: in function </tmp/tmp6hwsok93.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp6hwsok93.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test_case = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_case\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1].value\n            for j = 2, min_list_size do\n                if min_list[j].value > max_value then\n                    max_index = j\n                    max_value = min_list[j].value\n                end\n            end\n            if test_case.value < max_value then\n                min_list[max_index] = test_case\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zhysjdl.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp4zhysjdl.lua:14: in local 'candidate'\n\t/tmp/tmp4zhysjdl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for _, test in ipairs(test_list) do\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test\n      min_list_size = min_list_size + 1\n    else\n      local min_index = 1\n      for i = 2, K do\n        if min_list[i].score < min_list[min_index].score then\n          min_index = i\n        end\n      end\n      if test.score < min_list[min_index].score then\n        min_list[min_index] = test\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp725f_je7.lua:12: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp725f_je7.lua:12: in local 'candidate'\n\t/tmp/tmp725f_je7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local min_k_list_max_value_index = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmptsew34m3.lua:17: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min = test_list[1]\n    for i = 2, #test_list do\n      if test_list[i] < min then\n        min = test_list[i]\n      end\n    end\n    table.insert(min_list, min)\n    local new_test_list = {}\n    for i = 1, #test_list do\n      if test_list[i] ~= min then\n        table.insert(new_test_list, test_list[i])\n      end\n    end\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_helper(new_test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqe7w9fsj.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpqe7w9fsj.lua:10: in function </tmp/tmpqe7w9fsj.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpqe7w9fsj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_size = 0\n    for i = 1, #test_list do\n        if min_k_list_size < K then\n            min_k_list[min_k_list_size + 1] = test_list[i]\n            min_k_list_size = min_k_list_size + 1\n        else\n            local max_idx = 1\n            for j = 2, min_k_list_size do\n                if min_k_list[j] > min_k_list[max_idx] then\n                    max_idx = j\n                end\n            end\n            if min_k_list[max_idx] > test_list[i] then\n                min_k_list[max_idx] = test_list[i]\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcw1y4gx0.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpcw1y4gx0.lua:12: in local 'candidate'\n\t/tmp/tmpcw1y4gx0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_k_list)\n    if #test_list == 0 then\n      return min_k_list\n    end\n    local min_k_list = min_k_list or {}\n    local min_k_list_size = #min_k_list\n    local min_k_list_size_less_k = min_k_list_size < K\n    local min_k_list_size_less_k_or_test_list_size_less_k = min_k_list_size_less_k or #test_list < K\n    local min_k_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k = min_k_list_size_less_k_or_test_list_size_less_k or #test_list < K or #test_list < K\n    local min_k_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k = min_k_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k or #test_list < K or #test_list < K or #test_list < K\n    local min_k_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k = min_k_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k_or_test_list_size_less_k or #test_list < K or #test_list <\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmprka5kox6.lua:14: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    if #min_list == K then return min_list end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdg83kf6u.lua:9: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpdg83kf6u.lua:9: in function </tmp/tmpdg83kf6u.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpdg83kf6u.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i = 1, #test_list do\n    if min_k_size < K then\n      min_k[min_k_size + 1] = test_list[i]\n      min_k_size = min_k_size + 1\n    else\n      local max_index = 1\n      for j = 2, min_k_size do\n        if min_k[j] > min_k[max_index] then\n          max_index = j\n        end\n      end\n      if test_list[i] < min_k[max_index] then\n        min_k[max_index] = test_list[i]\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp730ij_71.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp730ij_71.lua:12: in local 'candidate'\n\t/tmp/tmp730ij_71.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local result = {}\n    for i = 1, K do\n        local min = math.huge\n        local min_index = -1\n        for j = 1, #test_list do\n            if test_list[j] < min then\n                min = test_list[j]\n                min_index = j\n            end\n        end\n        result[i] = min\n        test_list[min_index] = math.huge\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpli8e23y0.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpli8e23y0.lua:8: in local 'candidate'\n\t/tmp/tmpli8e23y0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_helper(test_list, K)\n        if K == 0 then\n            return {}\n        end\n        if #test_list == 0 then\n            return {}\n        end\n        local min_val = test_list[1]\n        local min_idx = 1\n        for i = 2, #test_list do\n            if test_list[i] < min_val then\n                min_val = test_list[i]\n                min_idx = i\n            end\n        end\n        local res = min_k_helper(test_list, K - 1)\n        table.insert(res, min_val)\n        table.remove(test_list, min_idx)\n        return res\n    end\n    return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vintl6n.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp5vintl6n.lua:13: in function </tmp/tmp5vintl6n.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp5vintl6n.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    local min_k_list_len = 0\n    for i = 1, #test_list do\n        local test_list_i = test_list[i]\n        if min_k_list_len < K then\n            min_k_list[min_k_list_len + 1] = test_list_i\n            min_k_list_len = min_k_list_len + 1\n        else\n            local max_index = 1\n            for j = 1, min_k_list_len do\n                if min_k_list[j] > min_k_list[max_index] then\n                    max_index = j\n                end\n            end\n            if min_k_list[max_index] > test_list_i then\n                min_k_list[max_index] = test_list_i\n            end\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmploe_muuu.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmploe_muuu.lua:13: in local 'candidate'\n\t/tmp/tmploe_muuu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test_case = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test_case\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1].value\n            for j = 2, min_list_size do\n                if min_list[j].value > max_value then\n                    max_index = j\n                    max_value = min_list[j].value\n                end\n            end\n            if test_case.value < max_value then\n                min_list[max_index] = test_case\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zhysjdl.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp4zhysjdl.lua:14: in local 'candidate'\n\t/tmp/tmp4zhysjdl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_max_size = K\n  local min_list_max_size_plus_one = K + 1\n  local min_list_max_size_minus_one = K - 1\n  local min_list_max_size_minus_two = K - 2\n  local min_list_max_size_minus_three = K - 3\n  local min_list_max_size_minus_four = K - 4\n  local min_list_max_size_minus_five = K - 5\n  local min_list_max_size_minus_six = K - 6\n  local min_list_max_size_minus_seven = K - 7\n  local min_list_max_size_minus_eight = K - 8\n  local min_list_max_size_minus_nine = K - 9\n  local min_list_max_size_minus_ten = K - 10\n  local min_list_max_size_minus_eleven = K - 11\n  local min_list_max_size_minus_twelve = K - 12\n  local min_list_max_size_minus_thirteen = K - 13\n  local min_list_max_size_minus_fourteen = K - 14\n  local min_list_max_size_minus_fifteen = K - 15\n  local min_list_max_size_minus_sixteen = K - 16\n  local min_list_max_size_minus_seventeen = K - 17\n  local min_list_max_size_minus_eighteen = K - 18\n  local min_list_max_size_minus_nineteen = K - 19\n  local min_list_max_size_minus_twenty = K - 20\n  local min_list_max_size_minus_twenty_one = K - 21\n  local min_list_max_size_minus_twenty_two = K - 22\n  local min_list_max_size_minus_twenty_three = K - 23\n  local min_list_max_size_minus_twenty_four = K - 24\n  local min_list_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpukpy74zd.lua:41: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_k_size < K then\n            min_k[min_k_size + 1] = test\n            min_k_size = min_k_size + 1\n        else\n            local max_index = 1\n            for j = 2, min_k_size do\n                if min_k[j].score > min_k[max_index].score then\n                    max_index = j\n                end\n            end\n            if min_k[max_index].score > test.score then\n                min_k[max_index] = test\n            end\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jbria67.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp5jbria67.lua:13: in local 'candidate'\n\t/tmp/tmp5jbria67.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_length = 0\n  local min_k_list_max_length = K\n  local test_list_length = #test_list\n  local test_list_index = 1\n  local test_list_item = test_list[test_list_index]\n  local test_list_item_value = test_list_item.value\n  local test_list_item_index = test_list_item.index\n  local min_k_list_item_value = nil\n  local min_k_list_item_index = nil\n  local min_k_list_item_index_value = nil\n  local min_k_list_item_index_value_index = nil\n  local min_k_list_item_index_value_index_value = nil\n  local min_k_list_item_index_value_index_value_index = nil\n  local min_k_list_item_index_value_index_value_index_value = nil\n  local min_k_list_item_index_value_index_value_index_value_index = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index_value_index_value_index = nil\n  local min_k_list_item_index_value_index_value_index_value_index_value_index_value_index_value_index_value = nil\n  local min_k\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9y5d1fk3.lua:36: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local heap = {}\n  local heap_size = 0\n  local function heap_insert(val)\n    heap_size = heap_size + 1\n    heap[heap_size] = val\n    local i = heap_size\n    local parent = math.floor(i / 2)\n    while parent > 0 and heap[parent] > heap[i] do\n      heap[i], heap[parent] = heap[parent], heap[i]\n      i = parent\n      parent = math.floor(i / 2)\n    end\n  end\n  local function heap_pop()\n    local ret = heap[1]\n    heap[1] = heap[heap_size]\n    heap_size = heap_size - 1\n    local i = 1\n    local child = i * 2\n    while child <= heap_size do\n      if child + 1 <= heap_size and heap[child + 1] < heap[child] then\n        child = child + 1\n      end\n      if heap[i] <= heap[child] then\n        break\n      end\n      heap[i], heap[child] = heap[child], heap[i]\n      i = child\n      child = i * 2\n    end\n    return ret\n  end\n  for i = 1, #test_list do\n    if i <= K then\n      heap_insert(test_list[i])\n    else\n      if test_list[i] < heap[1] then\n        heap_pop()\n        heap_insert(test_list[i])\n      end\n    end\n  end\n  local ret = {}\n  for i = 1, K do\n    ret[i] = heap_pop()\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwt4o0xta.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpwt4o0xta.lua:10: in local 'heap_insert'\n\t/tmp/tmpwt4o0xta.lua:37: in local 'candidate'\n\t/tmp/tmpwt4o0xta.lua:55: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal min_list = {}\n\tfor i = 1, K do\n\t\tlocal min = test_list[i]\n\t\tfor j = i + 1, #test_list do\n\t\t\tif test_list[j] < min then\n\t\t\t\tmin = test_list[j]\n\t\t\tend\n\t\tend\n\t\tmin_list[i] = min\n\tend\n\treturn min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3snzogw.lua:7: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpy3snzogw.lua:7: in local 'candidate'\n\t/tmp/tmpy3snzogw.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 1, min_list_size do\n                if min_list[j].score > min_list[max_index].score then\n                    max_index = j\n                end\n            end\n            if min_list[max_index].score > test.score then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7j6m18qg.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp7j6m18qg.lua:13: in local 'candidate'\n\t/tmp/tmp7j6m18qg.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    table.sort(min_k_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_k_list[K] then\n            min_k_list[K] = test_list[i]\n            table.sort(min_k_list)\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  for i = 1, #test_list do\n    local test_item = test_list[i]\n    if min_list_size < K then\n      min_list[min_list_size + 1] = test_item\n      min_list_size = min_list_size + 1\n    else\n      local max_index = 1\n      for j = 2, #min_list do\n        if min_list[j] > min_list[max_index] then\n          max_index = j\n        end\n      end\n      if min_list[max_index] > test_item then\n        min_list[max_index] = test_item\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8df3f_sq.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp8df3f_sq.lua:13: in local 'candidate'\n\t/tmp/tmp8df3f_sq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local min_k_list_max_value_index = nil\n  local test_list_size = #test_list\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv29f6cme.lua:18: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function compare(a, b)\n        return a[1] < b[1]\n    end\n    table.sort(test_list, compare)\n    local res = {}\n    for i = 1, K do\n        res[i] = test_list[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqnq1rh8.lua:19: expected: {{\"Ayesha\", 9}}\nactual: {{\"Amer\", 11}}\nstack traceback:\n\t/tmp/tmpkqnq1rh8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    for i = 2, #test_list do\n      if test_list[i] < min_val then\n        min_val = test_list[i]\n      end\n    end\n    table.insert(min_list, min_val)\n    local new_test_list = {}\n    for i = 1, #test_list do\n      if test_list[i] ~= min_val then\n        table.insert(new_test_list, test_list[i])\n      end\n    end\n    if #min_list == K then\n      return min_list\n    end\n    return min_k_rec(new_test_list, K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqn5mguyu.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpqn5mguyu.lua:10: in function </tmp/tmpqn5mguyu.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpqn5mguyu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k = {}\n  local min_k_size = 0\n  for i, v in ipairs(test_list) do\n    if min_k_size < K then\n      min_k[min_k_size + 1] = v\n      min_k_size = min_k_size + 1\n    else\n      local max_index = 1\n      for j = 1, min_k_size do\n        if min_k[j] > min_k[max_index] then\n          max_index = j\n        end\n      end\n      if min_k[max_index] > v then\n        min_k[max_index] = v\n      end\n    end\n  end\n  return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1clcw8ca.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp1clcw8ca.lua:12: in local 'candidate'\n\t/tmp/tmp1clcw8ca.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_heap = {}\n  local heap_size = 0\n  for i = 1, #test_list do\n    if heap_size < K then\n      heap_size = heap_size + 1\n      min_heap[heap_size] = test_list[i]\n      min_heapify(min_heap, heap_size)\n    else\n      if test_list[i] > min_heap[1] then\n        min_heap[1] = test_list[i]\n        min_heapify(min_heap, heap_size)\n      end\n    end\n  end\n  return min_heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp371cnvub.lua:9: attempt to call a nil value (global 'min_heapify')\nstack traceback:\n\t/tmp/tmp371cnvub.lua:9: in local 'candidate'\n\t/tmp/tmp371cnvub.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then\n      return min_list\n    end\n    local min_list = min_list or {}\n    local min_val = math.huge\n    local min_idx = nil\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiaxphn2d.lua:11: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpiaxphn2d.lua:11: in function </tmp/tmpiaxphn2d.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpiaxphn2d.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local function min_k_helper(test_list, K, min_list)\n        if K == 0 then\n            return min_list\n        end\n        local min_value = math.huge\n        local min_index = -1\n        for i, v in ipairs(test_list) do\n            if v < min_value then\n                min_value = v\n                min_index = i\n            end\n        end\n        table.insert(min_list, min_value)\n        table.remove(test_list, min_index)\n        return min_k_helper(test_list, K - 1, min_list)\n    end\n    return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36e0_gln.lua:10: attempt to compare table with number\nstack traceback:\n\t/tmp/tmp36e0_gln.lua:10: in function </tmp/tmp36e0_gln.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp36e0_gln.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function compare(a, b)\n    return a.value < b.value\n  end\n  table.sort(test_list, compare)\n  local min_k_list = {}\n  for i = 1, K do\n    min_k_list[i] = test_list[i]\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqjnsb2pr.lua:4: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpqjnsb2pr.lua:4: in function </tmp/tmpqjnsb2pr.lua:3>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpqjnsb2pr.lua:6: in local 'candidate'\n\t/tmp/tmpqjnsb2pr.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    local min_k_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_k_size < K then\n            min_k[min_k_size + 1] = test\n            min_k_size = min_k_size + 1\n        else\n            local max = min_k[1]\n            local max_index = 1\n            for j = 2, min_k_size do\n                if min_k[j] > max then\n                    max = min_k[j]\n                    max_index = j\n                end\n            end\n            if test < max then\n                min_k[max_index] = test\n            end\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmploq18lkl.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmploq18lkl.lua:14: in local 'candidate'\n\t/tmp/tmploq18lkl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i, v in ipairs(test_list) do\n        if min_list_size < K then\n            min_list[min_list_size + 1] = v\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            local max_value = min_list[1]\n            for j = 2, min_list_size do\n                if min_list[j] > max_value then\n                    max_index = j\n                    max_value = min_list[j]\n                end\n            end\n            if v < max_value then\n                min_list[max_index] = v\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0l8v4lt.lua:13: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpq0l8v4lt.lua:13: in local 'candidate'\n\t/tmp/tmpq0l8v4lt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_size = 0\n  local min_list_index = 0\n  local min_list_index_max = K - 1\n  local min_list_index_min = 0\n  local min_list_index_min_max = K - 2\n  local min_list_index_min_min = 0\n  local min_list_index_max_max = K - 1\n  local min_list_index_max_min = 0\n  local min_list_index_min_min_max = K - 3\n  local min_list_index_min_min_min = 0\n  local min_list_index_max_max_max = K - 1\n  local min_list_index_max_max_min = 0\n  local min_list_index_min_min_min_max = K - 4\n  local min_list_index_min_min_min_min = 0\n  local min_list_index_max_max_max_max = K - 1\n  local min_list_index_max_max_max_min = 0\n  local min_list_index_min_min_min_min_max = K - 5\n  local min_list_index_min_min_min_min_min = 0\n  local min_list_index_max_max_max_max_max = K - 1\n  local min_list_index_max_max_max_max_min = 0\n  local min_list_index_min_min_min_min_min_max = K - 6\n  local min_list_index_min_min_min_min_min_min = 0\n  local min_list_index_max_max_max_max_max_max = K - 1\n  local min_list_index_max_max_max_max_max_min = 0\n  local min_list_index_min_min_min_min_min_min_max = K - 7\n  local min_list_index_min_min_min_min_min_min_min = 0\n  local min_list_index_max_max_max_max_max_max_max = K - 1\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2_ktsphc.lua:41: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n\tlocal function min_k_helper(test_list, K, min_k_list)\n\t\tif #test_list == 0 then\n\t\t\treturn min_k_list\n\t\tend\n\t\tif #min_k_list < K then\n\t\t\ttable.insert(min_k_list, test_list[1])\n\t\telse\n\t\t\tlocal max_val = min_k_list[1]\n\t\t\tlocal max_idx = 1\n\t\t\tfor i = 1, #min_k_list do\n\t\t\t\tif min_k_list[i] > max_val then\n\t\t\t\t\tmax_val = min_k_list[i]\n\t\t\t\t\tmax_idx = i\n\t\t\t\tend\n\t\t\tend\n\t\t\tif test_list[1] < max_val then\n\t\t\t\tmin_k_list[max_idx] = test_list[1]\n\t\t\tend\n\t\tend\n\t\treturn min_k_helper(table.slice(test_list, 2), K, min_k_list)\n\tend\n\treturn min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89zx7z3n.lua:22: attempt to call a nil value (field 'slice')\nstack traceback:\n\t/tmp/tmp89zx7z3n.lua:22: in function </tmp/tmp89zx7z3n.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp89zx7z3n.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local min_k_list_max_value_index = nil\n  for i, v in ipairs(test_list) do\n    if min_k_list_size < min_k_list_max_size then\n      min_k_list[min_k_list_size+1] = v\n      min_k_list_size = min_k_list_size + 1\n      if min_k_list_max_value == nil or v > min_k_list_max_value then\n        min_k_list_max_value = v\n        min_k_list_max_value_index = min_k_list_size\n      end\n    elseif v < min_k_list_max_value then\n      min_k_list[min_k_list_max_value_index] = v\n      min_k_list_max_value = v\n      for j, w in ipairs(min_k_list) do\n        if w > min_k_list_max_value then\n          min_k_list_max_value = w\n          min_k_list_max_value_index = j\n        end\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4my4c1v4.lua:12: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp4my4c1v4.lua:12: in local 'candidate'\n\t/tmp/tmp4my4c1v4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_list_len = #min_list\n    local min_list_max = min_list_len > 0 and min_list[1] or nil\n    local min_list_min = min_list_len > 0 and min_list[min_list_len] or nil\n    local test_list_head = test_list[1]\n    local test_list_tail = test_list[#test_list]\n    if min_list_len < K then\n      if min_list_len == 0 then\n        min_list[1] = test_list_head\n      elseif test_list_head < min_list_min then\n        min_list[min_list_len + 1] = test_list_head\n      elseif test_list_head > min_list_max then\n        min_list[1] = test_list_head\n      else\n        for i = min_list_len, 1, -1 do\n          if test_list_head > min_list[i] then\n            min_list[i + 1] = test_list_head\n            break\n          elseif i == 1 then\n            min_list[1] = test_list_head\n          end\n        end\n      end\n    elseif test_list_tail < min_list_max then\n      min_list[1] = test_list_tail\n    end\n    return min_k_rec(test_list:sub(2), K, min_list)\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5k76pg7f.lua:31: attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmp5k76pg7f.lua:31: in function </tmp/tmp5k76pg7f.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp5k76pg7f.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k_list = {}\n    for i = 1, K do\n        min_k_list[i] = test_list[i]\n    end\n    table.sort(min_k_list)\n    for i = K + 1, #test_list do\n        if test_list[i] < min_k_list[K] then\n            min_k_list[K] = test_list[i]\n            table.sort(min_k_list)\n        end\n    end\n    return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min = test_list[1]\n    local min_index = 1\n    for i, v in ipairs(test_list) do\n      if v < min then\n        min = v\n        min_index = i\n      end\n    end\n    table.remove(test_list, min_index)\n    table.insert(min_list, min)\n    if #min_list == K then return min_list end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp289407oi.lua:8: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp289407oi.lua:8: in function </tmp/tmp289407oi.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp289407oi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K, min_list)\n    if K == 0 then return min_list end\n    local min_val = math.huge\n    local min_index = 0\n    for i, v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_index = i\n      end\n    end\n    table.remove(test_list, min_index)\n    table.insert(min_list, min_val)\n    return min_k_rec(test_list, K - 1, min_list)\n  end\n  return min_k_rec(test_list, K, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaorpnmbi.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpaorpnmbi.lua:8: in function </tmp/tmpaorpnmbi.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpaorpnmbi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  local min_k_list_max_size = K\n  local min_k_list_max_value = nil\n  local min_k_list_max_value_index = nil\n  local min_k_list_max_value_index_in_test_list = nil\n  local test_list_size = #test_list\n  for i = 1, test_list_size do\n    local test_value = test_list[i]\n    if min_k_list_size < min_k_list_max_size then\n      min_k_list_size = min_k_list_size + 1\n      min_k_list[min_k_list_size] = test_value\n      if min_k_list_max_value == nil or test_value > min_k_list_max_value then\n        min_k_list_max_value = test_value\n        min_k_list_max_value_index = min_k_list_size\n        min_k_list_max_value_index_in_test_list = i\n      end\n    else\n      if test_value < min_k_list_max_value then\n        min_k_list[min_k_list_max_value_index] = test_value\n        min_k_list_max_value = test_value\n        min_k_list_max_value_index = min_k_list_max_value_index_in_test_list\n        min_k_list_max_value_index_in_test_list = i\n        for j = 1, min_k_list_size do\n          local min_k_list_value = min_k_list[j]\n          if min_k_list_value > min_k_list_max_value then\n            min_k_list_max_value = min_k_list_value\n            min_k_list_max_value_index = j\n            min_k_list_max_value_index_in_test_list = i\n          end\n        end\n      end\n    end\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj9g56arc.lua:46: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_k = {}\n    for i = 1, K do\n        min_k[i] = test_list[i]\n    end\n    table.sort(min_k, function(a, b) return a[2] < b[2] end)\n    for i = K + 1, #test_list do\n        if test_list[i][2] < min_k[K][2] then\n            min_k[K] = test_list[i]\n            table.sort(min_k, function(a, b) return a[2] < b[2] end)\n        end\n    end\n    return min_k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_k_list = {}\n  local min_k_list_size = 0\n  for i = 1, #test_list do\n    local test_value = test_list[i]\n    if min_k_list_size < K then\n      min_k_list[min_k_list_size + 1] = test_value\n      min_k_list_size = min_k_list_size + 1\n    else\n      local max_value = min_k_list[1]\n      local max_index = 1\n      for j = 2, K do\n        if min_k_list[j] > max_value then\n          max_value = min_k_list[j]\n          max_index = j\n        end\n      end\n      if test_value < max_value then\n        min_k_list[max_index] = test_value\n      end\n    end\n  end\n  return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyyc0ora1.lua:14: attempt to compare two table values\nstack traceback:\n\t/tmp/tmpyyc0ora1.lua:14: in local 'candidate'\n\t/tmp/tmpyyc0ora1.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n   local min_k_list = {}\n   local min_k_list_size = 0\n   for i = 1, #test_list do\n      local test = test_list[i]\n      if min_k_list_size < K then\n         min_k_list[min_k_list_size + 1] = test\n         min_k_list_size = min_k_list_size + 1\n      else\n         local max_test = min_k_list[1]\n         local max_test_index = 1\n         for j = 2, min_k_list_size do\n            if min_k_list[j].time > max_test.time then\n               max_test = min_k_list[j]\n               max_test_index = j\n            end\n         end\n         if test.time < max_test.time then\n            min_k_list[max_test_index] = test\n         end\n      end\n   end\n   return min_k_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprs1zya9y.lua:14: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmprs1zya9y.lua:14: in local 'candidate'\n\t/tmp/tmprs1zya9y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_val = min_list[1]\n    local max_index = 1\n    for j = 2, K do\n      if min_list[j] > max_val then\n        max_val = min_list[j]\n        max_index = j\n      end\n    end\n    if test_list[i] < max_val then\n      min_list[max_index] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp581qnzpy.lua:11: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp581qnzpy.lua:11: in local 'candidate'\n\t/tmp/tmp581qnzpy.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n    local min_list = {}\n    local min_list_size = 0\n    for i = 1, #test_list do\n        local test = test_list[i]\n        if min_list_size < K then\n            min_list[min_list_size + 1] = test\n            min_list_size = min_list_size + 1\n        else\n            local max_index = 1\n            for j = 2, #min_list do\n                if min_list[j].time > min_list[max_index].time then\n                    max_index = j\n                end\n            end\n            if min_list[max_index].time > test.time then\n                min_list[max_index] = test\n            end\n        end\n    end\n    return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp264mtyci.lua:13: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp264mtyci.lua:13: in local 'candidate'\n\t/tmp/tmp264mtyci.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  local min_list_len = 0\n  local min_list_max = K\n  local test_list_len = #test_list\n  for i = 1, test_list_len do\n    local test_value = test_list[i]\n    if min_list_len < min_list_max then\n      min_list_len = min_list_len + 1\n      min_list[min_list_len] = test_value\n    else\n      local min_value = min_list[1]\n      local min_value_index = 1\n      for j = 2, min_list_len do\n        if min_list[j] < min_value then\n          min_value = min_list[j]\n          min_value_index = j\n        end\n      end\n      if test_value < min_value then\n        min_list[min_value_index] = test_value\n      end\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppds96o4e.lua:16: attempt to compare two table values\nstack traceback:\n\t/tmp/tmppds96o4e.lua:16: in local 'candidate'\n\t/tmp/tmppds96o4e.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_helper(test_list, K, min_list)\n    if #test_list == 0 then return min_list end\n    local min_list = min_list or {}\n    local min_val = test_list[1]\n    local min_idx = 1\n    for i = 2, #test_list do\n      if test_list[i] < min_val then\n        min_val = test_list[i]\n        min_idx = i\n      end\n    end\n    table.insert(min_list, min_val)\n    table.remove(test_list, min_idx)\n    if #min_list == K then return min_list end\n    return min_k_helper(test_list, K, min_list)\n  end\n  return min_k_helper(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mra7e1o.lua:9: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp7mra7e1o.lua:9: in function </tmp/tmp7mra7e1o.lua:3>\n\t(...tail calls...)\n\t/tmp/tmp7mra7e1o.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local min_list = {}\n  for i = 1, K do\n    min_list[i] = test_list[i]\n  end\n  for i = K + 1, #test_list do\n    local max_index = 1\n    for j = 2, K do\n      if min_list[j] > min_list[max_index] then\n        max_index = j\n      end\n    end\n    if test_list[i] < min_list[max_index] then\n      min_list[max_index] = test_list[i]\n    end\n  end\n  return min_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ecafswl.lua:10: attempt to compare two table values\nstack traceback:\n\t/tmp/tmp0ecafswl.lua:10: in local 'candidate'\n\t/tmp/tmp0ecafswl.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find minimum k records from table table. https://www.geeksforgeeks.org/luathon-find-minimum-k-records-from-table-table/ - in this case a verbatim colua of test cases\nlocal function min_k(test_list, K)\n  local function min_k_rec(test_list, K)\n    if K == 0 then return {} end\n    local min_val = math.huge\n    local min_val_idx = nil\n    for i,v in ipairs(test_list) do\n      if v < min_val then\n        min_val = v\n        min_val_idx = i\n      end\n    end\n    local res = {min_val}\n    table.remove(test_list, min_val_idx)\n    return table.merge(res, min_k_rec(test_list, K-1))\n  end\n  return min_k_rec(test_list, K)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = min_k\n    lu.assertEquals(candidate({{'Manjeet', 10}, {'Akshat', 4}, {'Akash', 2}, {'Nikhil', 8}}, 2), {{'Akash', 2}, {'Akshat', 4}})\n    lu.assertEquals(candidate({{'Sanjeev', 11}, {'Angat', 5}, {'Akash', 3}, {'Nepin', 9}}, 3), {{'Akash', 3}, {'Angat', 5}, {'Nepin', 9}})\n    lu.assertEquals(candidate({{'tanmay', 14}, {'Amer', 11}, {'Ayesha', 9}, {'SKD', 16}}, 1), {{'Ayesha', 9}})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123851,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5j0c32q.lua:8: attempt to compare table with number\nstack traceback:\n\t/tmp/tmpe5j0c32q.lua:8: in function </tmp/tmpe5j0c32q.lua:3>\n\t(...tail calls...)\n\t/tmp/tmpe5j0c32q.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}