{
  "name": "mbpp_745_divisible_by_digits",
  "language": "lua",
  "prompt": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = num_to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphi2z4j2b.lua:10: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmphi2z4j2b.lua:10: in function 'candidate'\n\t/tmp/tmphi2z4j2b.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local res = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(res, i)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local digits = {}\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 then\n                return false\n            end\n            digits[#digits + 1] = digit\n            num = math.floor(num / 10)\n        end\n        for i = 1, #digits do\n            if num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsvckl2o.lua:32: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 20 items, list B (expected) has 13 items\n* lists A and B start differing at index 12\n* lists A and B are equal again from index 20 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n  = A[10], B[10]: 11\n  = A[11], B[11]: 12\n* Differing parts:\n  - A[12]: 13\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 14\n  - A[14]: 15\n  - A[15]: 16\n  - A[16]: 17\n  - A[17]: 18\n  - A[18]: 19\n  - A[19]: 21\n* Common parts at the end of the lists\n  = A[20], B[13]: 22\nstack traceback:\n\t/tmp/tmpqsvckl2o.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for i = 1, #digits do\n      if num % digits[i] ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local nums = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for _, digit in ipairs(num:split(\"\")) do\n      if tonumber(digit) == 0 then\n        divisible = false\n        break\n      end\n      if i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(nums, i)\n    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslw4kkrm.lua:7: attempt to call method 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpslw4kkrm.lua:7: in function 'candidate'\n\t/tmp/tmpslw4kkrm.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local function is_divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(digits, is_divisible_by_digit)\n    end\n    return filter(range(startnum, endnum), is_divisible)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmpt5qv4.lua:10: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmprmpt5qv4.lua:10: in function 'candidate'\n\t/tmp/tmprmpt5qv4.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch('%d') do\n\t\t\tdigits[#digits+1] = tonumber(digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor num = startnum, endnum do\n\t\tif divisible(num) then\n\t\t\tresult[#result+1] = num\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible_by_digits(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible_by_digits(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function is_divisible(num)\n\t\tlocal function is_divisible_by_digit(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\tif not is_divisible_by_digit(num, tonumber(digit)) then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyclh8hl.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpkyclh8hl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_uah7yw.lua:9: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmps_uah7yw.lua:9: in function 'candidate'\n\t/tmp/tmps_uah7yw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8uxd8yr.lua:13: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmpe8uxd8yr.lua:13: in function 'candidate'\n\t/tmp/tmpe8uxd8yr.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digits_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % divisor ~= 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\treturn divisible_by_digits_helper_helper(num / 10, divisor)\n\t\t\tend\n\t\tend\n\t\tlocal function divisible_by_digits_helper_helper_helper(num, divisor)\n\t\t\tif num == 0 then\n\t\t\t\treturn true\n\t\t\telseif divisible_by_digits_helper_helper(num, divisor) then\n\t\t\t\treturn divisible_by_digits_helper_helper_helper(num, divisor + 1)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_helper_helper_helper(num, 2)\n\tend\n\tlocal function divisible_by_digits_helper_helper(startnum, endnum, acc)\n\t\tif startnum > endnum then\n\t\t\treturn acc\n\t\telseif divisible_by_digits_helper(startnum) then\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n\t\telse\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n\t\tend\n\tend\n\treturn divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpghx3sifk.lua:39: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpghx3sifk.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers+1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswqfpj5w.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpswqfpj5w.lua:10: in local 'candidate'\n\t/tmp/tmpswqfpj5w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yr2729s.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp8yr2729s.lua:9: in local 'candidate'\n\t/tmp/tmp8yr2729s.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj99habvr.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpj99habvr.lua:8: in local 'divisible'\n\t/tmp/tmpj99habvr.lua:17: in local 'candidate'\n\t/tmp/tmpj99habvr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = get_digits(i)\n        local is_divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpznwymuuo.lua:5: attempt to call a nil value (global 'get_digits')\nstack traceback:\n\t/tmp/tmpznwymuuo.lua:5: in local 'candidate'\n\t/tmp/tmpznwymuuo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local function divisible_by(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        return all(divisible_by, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyr46arc5.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpyr46arc5.lua:13: in local 'candidate'\n\t/tmp/tmpyr46arc5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr46_i27b.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpr46_i27b.lua:9: in local 'candidate'\n\t/tmp/tmpr46_i27b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 then\n        table.insert(digits, digit)\n      end\n      num = math.floor(num / 10)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible_by_digits_helper(num) then\n      table.insert(result, num)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x0mb83u.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 22 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 22 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 13\n  - A[14]: 14\n  - A[15]: 15\n  - A[16]: 16\n  - A[17]: 17\n  - A[18]: 18\n  - A[19]: 19\n  - A[20]: 20\n  - A[21]: 21\n* Common parts at the end of the lists\n  = A[22], B[13]: 22\nstack traceback:\n\t/tmp/tmp3x0mb83u.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.020 second",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn num:to_digits():all(divisible_by_digits_inner_inner, num)\n\tend\n\treturn startnum:range(endnum):filter(divisible_by_digits_inner)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppaa883ea.lua:9: attempt to index a number value (local 'startnum')\nstack traceback:\n\t/tmp/tmppaa883ea.lua:9: in local 'candidate'\n\t/tmp/tmppaa883ea.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj99habvr.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpj99habvr.lua:8: in local 'divisible'\n\t/tmp/tmpj99habvr.lua:17: in local 'candidate'\n\t/tmp/tmpj99habvr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmvn17igr.lua:17: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local is_divisible = true\n    for digit in tostring(i):gmatch(\"%d\") do\n      if i % tonumber(digit) ~= 0 then\n        is_divisible = false\n        break\n      end\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfa9i84s.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpwfa9i84s.lua:7: in local 'candidate'\n\t/tmp/tmpwfa9i84s.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6mga6j7.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpm6mga6j7.lua:10: in local 'candidate'\n\t/tmp/tmpm6mga6j7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe55_4j0.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpfe55_4j0.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmpfe55_4j0.lua:17: in local 'candidate'\n\t/tmp/tmpfe55_4j0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for j = 1, #tostring(i) do\n      digits[#digits + 1] = tonumber(tostring(i):sub(j, j))\n    end\n    local divisible_by_all = true\n    for j = 1, #digits do\n      if i % digits[j] ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      divisible[#divisible + 1] = i\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvt6c1q_.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpnvt6c1q_.lua:10: in local 'candidate'\n\t/tmp/tmpnvt6c1q_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_inner(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxrzni4x4.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpxrzni4x4.lua:8: in local 'divisible_by_digits_inner'\n\t/tmp/tmpxrzni4x4.lua:17: in local 'candidate'\n\t/tmp/tmpxrzni4x4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hb79_fa.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp4hb79_fa.lua:10: in local 'candidate'\n\t/tmp/tmp4hb79_fa.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    local num = i\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 then\n        break\n      end\n      digits[#digits + 1] = digit\n      num = math.floor(num / 10)\n    end\n    if num == 0 then\n      local divisible = true\n      for _, digit in ipairs(digits) do\n        if i % digit ~= 0 then\n          divisible = false\n          break\n        end\n      end\n      if divisible then\n        result[#result + 1] = i\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return num > 9 and num < 100 and all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzdf3p1x.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmplzdf3p1x.lua:9: in local 'candidate'\n\t/tmp/tmplzdf3p1x.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqayw6nhv.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpqayw6nhv.lua:13: in local 'candidate'\n\t/tmp/tmpqayw6nhv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local is_divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if is_divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_uah7yw.lua:9: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmps_uah7yw.lua:9: in function 'candidate'\n\t/tmp/tmps_uah7yw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if not is_divisible_by_digit(num, digit) then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6r2v8_j.lua:7: attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmps6r2v8_j.lua:7: in local 'is_divisible'\n\t/tmp/tmps6r2v8_j.lua:17: in local 'candidate'\n\t/tmp/tmps6r2v8_j.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8y9njn.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsc8y9njn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe55_4j0.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpfe55_4j0.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmpfe55_4j0.lua:17: in local 'candidate'\n\t/tmp/tmpfe55_4j0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz4meoh3.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpsz4meoh3.lua:10: in local 'candidate'\n\t/tmp/tmpsz4meoh3.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_by_digits = {}\n    for i = startnum, endnum do\n        local digits = {}\n        for digit in tostring(i):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            divisible_by_digits[#divisible_by_digits + 1] = i\n        end\n    end\n    return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrtnf6pq.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpsrtnf6pq.lua:10: in local 'candidate'\n\t/tmp/tmpsrtnf6pq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp76svjn7j.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp76svjn7j.lua:13: in local 'candidate'\n\t/tmp/tmp76svjn7j.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8y9njn.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsc8y9njn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_all_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch(\"%d\") do\n        digits[#digits + 1] = tonumber(digit)\n      end\n      for _, digit in ipairs(digits) do\n        if not divisible_by_digit(num, digit) then\n          return false\n        end\n      end\n      return true\n    end\n    return divisible_by_all_digits(num)\n  end\n  local function in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  local function filter(num)\n    return divisible(num) and in_range(num)\n  end\n  local function map(num)\n    return num\n  end\n  local function reduce(acc, num)\n    return acc + num\n  end\n  local function range(startnum, endnum)\n    local range = {}\n    for i = startnum, endnum do\n      range[#range + 1] = i\n    end\n    return range\n  end\n  return reduce(0, map(filter(range(startnum, endnum))))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpngqdf4_3.lua:5: attempt to perform arithmetic on a table value (local 'num')\nstack traceback:\n\t/tmp/tmpngqdf4_3.lua:5: in upvalue 'divisible_by_digit'\n\t/tmp/tmpngqdf4_3.lua:13: in function </tmp/tmpngqdf4_3.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpngqdf4_3.lua:25: in local 'filter'\n\t/tmp/tmpngqdf4_3.lua:40: in local 'candidate'\n\t/tmp/tmpngqdf4_3.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "lua: /tmp/tmp73gj3znx.lua:16: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62svb3lh.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp62svb3lh.lua:8: in local 'is_divisible'\n\t/tmp/tmp62svb3lh.lua:17: in local 'candidate'\n\t/tmp/tmp62svb3lh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = tostring(i)\n\t\tlocal divisible_by_all = true\n\t\tfor j = 1, #num do\n\t\t\tlocal digit = tonumber(num:sub(j, j))\n\t\t\tif digit ~= 0 and i % digit ~= 0 then\n\t\t\t\tdivisible_by_all = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible_by_all then\n\t\t\ttable.insert(divisible, i)\n\t\tend\n\tend\n\treturn divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w_ht4pi.lua:24: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp4w_ht4pi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzjphsrc.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpqzjphsrc.lua:13: in local 'candidate'\n\t/tmp/tmpqzjphsrc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local num_str = tostring(num)\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      if digit ~= 0 and num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe_hatz4.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpfe_hatz4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible_by_digits(num)\n    local function is_divisible_by(divisor)\n      return num % divisor == 0\n    end\n    local function is_divisible_by_digit(digit)\n      return is_divisible_by(tonumber(digit))\n    end\n    return all(is_divisible_by_digit, tostring(num))\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  return filter(is_in_range, filter(is_divisible_by_digits, range(startnum, endnum)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdouik7a3.lua:15: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpdouik7a3.lua:15: in local 'candidate'\n\t/tmp/tmpdouik7a3.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digit(num)\n        local function divisible_by_digit_helper(num, digit)\n            if digit == 0 then\n                return true\n            else\n                return num % digit == 0 and divisible_by_digit_helper(num, digit // 10)\n            end\n        end\n        return divisible_by_digit_helper(num, num)\n    end\n    local function divisible_by_digits_helper(startnum, endnum, acc)\n        if startnum == endnum then\n            if divisible_by_digit(startnum) then\n                return {startnum}\n            else\n                return {}\n            end\n        else\n            if divisible_by_digit(startnum) then\n                return divisible_by_digits_helper(startnum + 1, endnum, {startnum})\n            else\n                return divisible_by_digits_helper(startnum + 1, endnum, {})\n            end\n        end\n    end\n    return divisible_by_digits_helper(startnum, endnum, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwudkbqu2.lua:34: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {22}\nstack traceback:\n\t/tmp/tmpwudkbqu2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn num:to_digits():all(divisible_by_digits_inner_inner, num)\n\tend\n\treturn range(startnum, endnum):filter(divisible_by_digits_inner)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwot6peap.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpwot6peap.lua:9: in local 'candidate'\n\t/tmp/tmpwot6peap.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yr2729s.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp8yr2729s.lua:9: in local 'candidate'\n\t/tmp/tmp8yr2729s.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible(num)\n\t\tlocal digits = tostring(num):gmatch(\"%d\")\n\t\tfor digit in digits do\n\t\t\tif num % tonumber(digit) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5cuvux5.lua:6: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp_5cuvux5.lua:6: in local 'divisible'\n\t/tmp/tmp_5cuvux5.lua:14: in local 'candidate'\n\t/tmp/tmp_5cuvux5.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8y9njn.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsc8y9njn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfmob34f.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzfmob34f.lua:13: in local 'candidate'\n\t/tmp/tmpzfmob34f.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    local divisible_by_all = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppdc2be3f.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmppdc2be3f.lua:10: in local 'candidate'\n\t/tmp/tmppdc2be3f.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % tonumber(digit) == 0\n    end\n    return num >= startnum and num <= endnum and all(divisible_by_digit, tostring(num))\n  end\n  return divisible_by_digits_helper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnqn246b.lua:15: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: function: 0x55d627bd7500\nstack traceback:\n\t/tmp/tmpcnqn246b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjyujbk8.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmprjyujbk8.lua:9: in local 'candidate'\n\t/tmp/tmprjyujbk8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function is_divisible(num)\n\t\tlocal function is_divisible_by(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\treturn string.gsub(num, \"%d\", function(digit)\n\t\t\treturn is_divisible_by(tonumber(digit)) and \"\" or nil\n\t\tend) == \"\"\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif is_divisible(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pxmpsq6.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp0pxmpsq6.lua:4: in upvalue 'is_divisible_by'\n\t/tmp/tmp0pxmpsq6.lua:8: in function </tmp/tmp0pxmpsq6.lua:7>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmp0pxmpsq6.lua:7: in local 'is_divisible'\n\t/tmp/tmp0pxmpsq6.lua:13: in local 'candidate'\n\t/tmp/tmp0pxmpsq6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digits_inner_inner(num, digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = {}\n\t\tfor digit in tostring(num):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\treturn all(digits, curry(divisible_by_digits_inner_inner, num))\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74srxbqv.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp74srxbqv.lua:13: in local 'candidate'\n\t/tmp/tmp74srxbqv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = i\n        local is_divisible = true\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            number = math.floor(number / 10)\n        end\n        if is_divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local n = num\n        while n > 0 do\n            local digit = n % 10\n            if digit == 0 or num % digit ~= 0 then\n                return false\n            end\n            n = math.floor(n / 10)\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = num_to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgzue54ew.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpgzue54ew.lua:10: in local 'candidate'\n\t/tmp/tmpgzue54ew.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local res = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      if i % tonumber(num:sub(j, j)) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(res, i)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsh5n3e7.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpfsh5n3e7.lua:8: in local 'candidate'\n\t/tmp/tmpfsh5n3e7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible_by_digits(num)\n        local digits = tostring(num)\n        for i = 1, #digits do\n            if num % tonumber(digits:sub(i, i)) ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if is_divisible_by_digits(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvb0dxscd.lua:6: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpvb0dxscd.lua:6: in local 'is_divisible_by_digits'\n\t/tmp/tmpvb0dxscd.lua:14: in local 'candidate'\n\t/tmp/tmpvb0dxscd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, digit)\n            return num % digit == 0\n        end\n        return num % 10 == 0 and num % 2 == 0 and num % 3 == 0 and num % 4 == 0 and num % 5 == 0 and num % 6 == 0 and num % 7 == 0 and num % 8 == 0 and num % 9 == 0 and num % 10 == 0\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_inner(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6or0pa4j.lua:21: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {}\nstack traceback:\n\t/tmp/tmp6or0pa4j.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = string.gmatch(tostring(num), \"%d\")\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpim047op0.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpim047op0.lua:10: in local 'candidate'\n\t/tmp/tmpim047op0.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcuwskk2j.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpcuwskk2j.lua:10: in local 'candidate'\n\t/tmp/tmpcuwskk2j.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit_helper(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_digits_helper(num, digits)\n      if digits == 0 then\n        return true\n      else\n        return divisible_by_digit_helper(num, digits % 10) and divisible_by_digits_helper(num, math.floor(digits / 10))\n      end\n    end\n    return divisible_by_digits_helper(num, num)\n  end\n  local function divisible_by_digits_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    else\n      if divisible_by_digits_helper(startnum) then\n        return divisible_by_digits_helper(startnum + 1, endnum, acc .. startnum .. ' ')\n      else\n        return divisible_by_digits_helper(startnum + 1, endnum, acc)\n      end\n    end\n  end\n  return divisible_by_digits_helper(startnum, endnum, '')\nend\nprint(divisible_by_digits(1, 100))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj47ahz04.lua:17: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpj47ahz04.lua:17: in upvalue 'divisible_by_digits_helper'\n\t/tmp/tmpj47ahz04.lua:20: in function </tmp/tmpj47ahz04.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpj47ahz04.lua:29: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr46_i27b.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpr46_i27b.lua:9: in local 'candidate'\n\t/tmp/tmpr46_i27b.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_by_digits = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_by_digits, i)\n\t\tend\n\tend\n\treturn divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yr2729s.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp8yr2729s.lua:9: in local 'candidate'\n\t/tmp/tmp8yr2729s.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = tostring(i)\n    local divisible = true\n    for j = 1, #num do\n      local digit = tonumber(num:sub(j, j))\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      table.insert(digits, tonumber(digit))\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5ot9bdx.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpf5ot9bdx.lua:8: in local 'divisible'\n\t/tmp/tmpf5ot9bdx.lua:17: in local 'candidate'\n\t/tmp/tmpf5ot9bdx.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqayw6nhv.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpqayw6nhv.lua:13: in local 'candidate'\n\t/tmp/tmpqayw6nhv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5gwe44fd.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp5gwe44fd.lua:8: in local 'is_divisible'\n\t/tmp/tmp5gwe44fd.lua:17: in local 'candidate'\n\t/tmp/tmp5gwe44fd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8y9njn.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsc8y9njn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(n)\n        local function divisible_by_digit(d)\n            return n % d == 0\n        end\n        local digits = to_digits(n)\n        for _, d in ipairs(digits) do\n            if not divisible_by_digit(d) then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for n = startnum, endnum do\n        if divisible(n) then\n            table.insert(result, n)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa5v8ax1l.lua:7: attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpa5v8ax1l.lua:7: in local 'divisible'\n\t/tmp/tmpa5v8ax1l.lua:17: in local 'candidate'\n\t/tmp/tmpa5v8ax1l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for i = 1, #num do\n            digits[i] = tonumber(num:sub(i, i))\n        end\n        for i = 1, #digits do\n            if digits[i] ~= 0 and num % digits[i] ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(tostring(i)) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn82s90v.lua:27: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpxn82s90v.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdtsw0r_1.lua:16: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in string.gmatch(tostring(i), '%d') do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_w4kwy63.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp_w4kwy63.lua:7: in local 'candidate'\n\t/tmp/tmp_w4kwy63.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by(num, divisor)\n      return num % divisor == 0\n    end\n    local function divisible_by_digits_inner_inner(num, divisor)\n      if num == 0 then\n        return true\n      elseif divisible_by(num, divisor) then\n        return divisible_by_digits_inner_inner(math.floor(num / 10), divisor)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num % 10)\n  end\n  local function divisible_by_digits_inner_inner(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_inner(startnum) then\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, acc .. startnum .. \" \")\n    else\n      return divisible_by_digits_inner_inner(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_inner_inner(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpag5mgfw_.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpag5mgfw_.lua:4: in upvalue 'divisible_by'\n\t/tmp/tmpag5mgfw_.lua:10: in function </tmp/tmpag5mgfw_.lua:7>\n\t(...tail calls...)\n\t/tmp/tmpag5mgfw_.lua:21: in function </tmp/tmpag5mgfw_.lua:18>\n\t(...tail calls...)\n\t/tmp/tmpag5mgfw_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal num_str = tostring(num)\n\t\tfor i = 1, #num_str do\n\t\t\tif num % tonumber(num_str:sub(i, i)) ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible_by_digits_inner(i) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93fffn4k.lua:6: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp93fffn4k.lua:6: in local 'divisible_by_digits_inner'\n\t/tmp/tmp93fffn4k.lua:14: in local 'candidate'\n\t/tmp/tmp93fffn4k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local function digits(num)\n      local digits = {}\n      while num > 0 do\n        digits[#digits + 1] = num % 10\n        num = math.floor(num / 10)\n      end\n      return digits\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6p5r938l.lua:17: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp6p5r938l.lua:17: in local 'candidate'\n\t/tmp/tmp6p5r938l.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local digits = {}\n    for digit in tostring(i):gmatch('%d') do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    local divisible = true\n    for _, digit in ipairs(digits) do\n      if i % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      divisible_numbers[#divisible_numbers + 1] = i\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpciu7dq3a.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpciu7dq3a.lua:10: in local 'candidate'\n\t/tmp/tmpciu7dq3a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ykyo76j.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp9ykyo76j.lua:8: in local 'divisible'\n\t/tmp/tmp9ykyo76j.lua:17: in local 'candidate'\n\t/tmp/tmp9ykyo76j.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local divisible = true\n    for digit in tostring(i):gmatch(\"%d\") do\n      if tonumber(digit) ~= 0 and i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyf0cpwaf.lua:22: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpyf0cpwaf.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = to_digits(num)\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4hb79_fa.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp4hb79_fa.lua:10: in local 'candidate'\n\t/tmp/tmp4hb79_fa.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible(i) then\n            result[#result + 1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_2l9_5r.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp2_2l9_5r.lua:8: in local 'divisible'\n\t/tmp/tmp2_2l9_5r.lua:17: in local 'candidate'\n\t/tmp/tmp2_2l9_5r.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    return all(divisible_by, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbt5r8hhr.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpbt5r8hhr.lua:13: in local 'candidate'\n\t/tmp/tmpbt5r8hhr.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local divisible = true\n    for digit in (tostring(i)):gmatch(\"%d\") do\n      if i % tonumber(digit) ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3qsxns7h.lua:7: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp3qsxns7h.lua:7: in local 'candidate'\n\t/tmp/tmp3qsxns7h.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local digits = {}\n        local number = i\n        while number > 0 do\n            local digit = number % 10\n            if digit == 0 then\n                break\n            end\n            table.insert(digits, digit)\n            number = math.floor(number / 10)\n        end\n        local divisible = true\n        for _, digit in ipairs(digits) do\n            if i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9u7yj0k.lua:32: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpg9u7yj0k.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible(num)\n\t\tlocal digits = {}\n\t\tfor i = 1, #num do\n\t\t\tlocal digit = tonumber(num:sub(i, i))\n\t\t\tif digit == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\ttable.insert(digits, digit)\n\t\tend\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif num % digit ~= 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tif divisible(tostring(i)) then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local digits = {}\n    for digit in tostring(num):gmatch('%d') do\n      digits[#digits+1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible(i) then\n      result[#result+1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1m34qmp.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp_1m34qmp.lua:8: in local 'divisible'\n\t/tmp/tmp_1m34qmp.lua:17: in local 'candidate'\n\t/tmp/tmp_1m34qmp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local num_str = tostring(num)\n    local divisible = true\n    for i = 1, #num_str do\n      local digit = tonumber(num_str:sub(i, i))\n      if digit ~= 0 and num % digit ~= 0 then\n        divisible = false\n        break\n      end\n    end\n    return divisible\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_73wkwh.lua:27: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpq_73wkwh.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "lua: /tmp/tmphv7c1da_.lua:16: 'end' expected (to close 'function' at line 3) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if divisible(num) then\n            result[#result + 1] = num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ndsdic0.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp8ndsdic0.lua:8: in local 'divisible'\n\t/tmp/tmp8ndsdic0.lua:17: in local 'candidate'\n\t/tmp/tmp8ndsdic0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf7h29zf.lua:21: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: function: 0x55a916bde410\nstack traceback:\n\t/tmp/tmpaf7h29zf.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(n)\n        local function divisible_by(d)\n            return n % d == 0\n        end\n        return all(divisible_by, digits(n))\n    end\n    return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5tfkpdkm.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp5tfkpdkm.lua:9: in local 'candidate'\n\t/tmp/tmp5tfkpdkm.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = to_digits(num)\n\t\treturn all(digits, divisible_by_digit)\n\tend\n\treturn filter(range(startnum, endnum), divisible_by_digits_inner)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw543oerq.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpw543oerq.lua:10: in local 'candidate'\n\t/tmp/tmpw543oerq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible(n)\n\t\tlocal function divisible_by_digit(d)\n\t\t\treturn n % d == 0\n\t\tend\n\t\treturn all(divisible_by_digit, digits(n))\n\tend\n\treturn filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzacnl1nk.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzacnl1nk.lua:9: in local 'candidate'\n\t/tmp/tmpzacnl1nk.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local num_str = tostring(num)\n        for i = 1, #num_str do\n            local digit = tonumber(num_str:sub(i, i))\n            if digit == 0 then\n                return false\n            end\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for i = startnum, endnum do\n        if divisible_by_digits_helper(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit / 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum, acc)\n    if startnum > endnum then\n      return acc\n    elseif divisible_by_digits_helper(startnum) then\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc .. startnum .. \" \")\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum, acc)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinc2_i4m.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpinc2_i4m.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function is_divisible_by_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch(\"%d\") do\n        digits[#digits + 1] = tonumber(digit)\n      end\n      for _, digit in ipairs(digits) do\n        if not is_divisible_by_digit(num, digit) then\n          return false\n        end\n      end\n      return true\n    end\n    return is_divisible_by_digits(num)\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  local function is_divisible_in_range(num)\n    return is_in_range(num) and is_divisible(num)\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if is_divisible_in_range(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2uz7z7jw.lua:4: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp2uz7z7jw.lua:4: in upvalue 'is_divisible_by_digit'\n\t/tmp/tmp2uz7z7jw.lua:13: in function </tmp/tmp2uz7z7jw.lua:7>\n\t(...tail calls...)\n\t/tmp/tmp2uz7z7jw.lua:25: in local 'is_divisible_in_range'\n\t/tmp/tmp2uz7z7jw.lua:29: in local 'candidate'\n\t/tmp/tmp2uz7z7jw.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppg46_ckf.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmppg46_ckf.lua:10: in local 'candidate'\n\t/tmp/tmppg46_ckf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local function is_divisible_by(divisor)\n      return num % divisor == 0\n    end\n    local function is_divisible_by_all_digits(num)\n      local digits = {}\n      for digit in tostring(num):gmatch('%d') do\n        table.insert(digits, tonumber(digit))\n      end\n      return all(digits, is_divisible_by)\n    end\n    return is_divisible_by_all_digits(num)\n  end\n  local function is_in_range(num)\n    return num >= startnum and num <= endnum\n  end\n  return filter(is_in_range, filter(is_divisible, range(startnum, endnum)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinyjpsk5.lua:19: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpinyjpsk5.lua:19: in local 'candidate'\n\t/tmp/tmpinyjpsk5.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6mga6j7.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpm6mga6j7.lua:10: in local 'candidate'\n\t/tmp/tmpm6mga6j7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(n)\n        local function divisible_by_digit(d)\n            return n % d == 0\n        end\n        return all(divisible_by_digit, digits(n))\n    end\n    return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4ggbvnu.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpn4ggbvnu.lua:9: in local 'candidate'\n\t/tmp/tmpn4ggbvnu.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsc8y9njn.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsc8y9njn.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digits_inner_inner(num, digit)\n      return num % digit == 0\n    end\n    return num % 10 == 0 and num % 100 == 0 and num % 1000 == 0 and num % 10000 == 0 and num % 100000 == 0 and num % 1000000 == 0 and num % 10000000 == 0 and num % 100000000 == 0 and num % 1000000000 == 0 and num % 10000000000 == 0 and num % 100000000000 == 0 and num % 1000000000000 == 0 and num % 10000000000000 == 0 and num % 100000000000000 == 0 and num % 1000000000000000 == 0 and num % 10000000000000000 == 0 and num % 100000000000000000 == 0 and num % 1000000000000000000 == 0 and num % 10000000000000000000 == 0 and num % 100000000000000000000 == 0 and num % 1000000000000000000000 == 0 and num % 10000000000000000000000 == 0 and num % 100000000000000000000000 == 0 and num % 1000000000000000000000000 == 0 and num % 10000000000000000000000000 == 0 and num % 100000000000000000000000000 == 0 and num % 1000000000000000000000000000 == 0 and num % 10000000000000000000000000000 == 0 and num % 100000000000000000000000000000 == 0 and num % 1000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000 == 0 and num % 10000000000000000000000000000000000000000000000000000 == 0 and num % 100000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000000000000000000000000000000000000000 == 0 and num % 1000000000000000000\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "lua: /tmp/tmprtqy3e0u.lua:8: 'end' expected (to close 'function' at line 3) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsosqz2j_.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpsosqz2j_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6mga6j7.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpm6mga6j7.lua:10: in local 'candidate'\n\t/tmp/tmpm6mga6j7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yr2729s.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmp8yr2729s.lua:9: in local 'candidate'\n\t/tmp/tmp8yr2729s.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return all(divisible_by_digit, digits(num))\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqoqs_bx.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpvqoqs_bx.lua:9: in local 'candidate'\n\t/tmp/tmpvqoqs_bx.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function divisible_by_digits_inner_inner(num, digit)\n      if digit == 0 then\n        return true\n      else\n        return divisible_by_digit(num, digit) and divisible_by_digits_inner_inner(num, digit // 10)\n      end\n    end\n    return divisible_by_digits_inner_inner(num, num)\n  end\n  local function divisible_by_digits_outer(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    else\n      return divisible_by_digits_inner(startnum) and {startnum} or {} + divisible_by_digits_outer(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_outer(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2uizvfp.lua:29: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1}\nstack traceback:\n\t/tmp/tmph2uizvfp.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprjyujbk8.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmprjyujbk8.lua:9: in local 'candidate'\n\t/tmp/tmprjyujbk8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppoofv4aq.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmppoofv4aq.lua:13: in local 'candidate'\n\t/tmp/tmppoofv4aq.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6mga6j7.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpm6mga6j7.lua:10: in local 'candidate'\n\t/tmp/tmpm6mga6j7.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local numbers = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            numbers[#numbers + 1] = num\n        end\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99qo04i5.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp99qo04i5.lua:8: in local 'is_divisible'\n\t/tmp/tmp99qo04i5.lua:17: in local 'candidate'\n\t/tmp/tmp99qo04i5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = to_digits(num)\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcuwskk2j.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpcuwskk2j.lua:10: in local 'candidate'\n\t/tmp/tmpcuwskk2j.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal result = {}\n\tfor i = startnum, endnum do\n\t\tlocal num = i\n\t\tlocal divisible = true\n\t\twhile num > 0 do\n\t\t\tlocal digit = num % 10\n\t\t\tif digit == 0 or i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local divisible_numbers = {}\n    for i = startnum, endnum do\n        local number = tostring(i)\n        local divisible = true\n        for j = 1, #number do\n            local digit = tonumber(number:sub(j, j))\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(divisible_numbers, i)\n        end\n    end\n    return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dgd65v.lua:24: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpm9dgd65v.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible_by_digits(num)\n    local digits = to_digits(num)\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if is_divisible_by_digits(i) then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiu122af_.lua:4: attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpiu122af_.lua:4: in local 'is_divisible_by_digits'\n\t/tmp/tmpiu122af_.lua:14: in local 'candidate'\n\t/tmp/tmpiu122af_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local results = {}\n    for num = startnum, endnum do\n        if divisible_by_digits_helper(num) then\n            results[#results + 1] = num\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41vf6czu.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp41vf6czu.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmp41vf6czu.lua:17: in local 'candidate'\n\t/tmp/tmp41vf6czu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in string.gmatch(num, \"%d\") do\n      digits[#digits + 1] = digit\n    end\n    for _, digit in ipairs(digits) do\n      if num % tonumber(digit) ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for num = startnum, endnum do\n    if divisible_by_digits_helper(num) then\n      result[#result + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0h4v2h_l.lua:9: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp0h4v2h_l.lua:9: in local 'divisible_by_digits_helper'\n\t/tmp/tmp0h4v2h_l.lua:17: in local 'candidate'\n\t/tmp/tmp0h4v2h_l.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch('%d') do\n            digits[#digits + 1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbgzyh3qm.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpbgzyh3qm.lua:13: in local 'candidate'\n\t/tmp/tmpbgzyh3qm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, acc)\n            if num == 0 then\n                return acc\n            else\n                local digit = num % 10\n                if digit == 0 then\n                    return false\n                else\n                    return divisible_by_digits_inner_inner(math.floor(num / 10), acc and (num % digit == 0))\n                end\n            end\n        end\n        return divisible_by_digits_inner_inner(num, true)\n    end\n    local function divisible_by_digits_inner_outer(startnum, endnum, acc)\n        if startnum > endnum then\n            return acc\n        else\n            return divisible_by_digits_inner_outer(startnum + 1, endnum, divisible_by_digits_inner(startnum) and table.insert(acc, startnum) or acc)\n        end\n    end\n    return divisible_by_digits_inner_outer(startnum, endnum, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqd2d70ts.lua:31: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 21, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 14 items, list B (expected) has 13 items\n* lists A and B start differing at index 13\n* lists A and B are equal again from index 14 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n  = A[10], B[10]: 11\n  = A[11], B[11]: 12\n  = A[12], B[12]: 15\n* Present only in one list:\n  - A[13]: 21\n* Common parts at the end of the lists\n  = A[14], B[13]: 22\nstack traceback:\n\t/tmp/tmpqd2d70ts.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit ~= 0 and i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = (num - digit) / 10\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbfb8h_d.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmprbfb8h_d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_helper(num)\n\t\tlocal function divisible_by_digits_helper_helper(num, digit)\n\t\t\tif digit == 0 then\n\t\t\t\treturn true\n\t\t\telseif num % digit == 0 then\n\t\t\t\treturn divisible_by_digits_helper_helper(num, digit / 10)\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn divisible_by_digits_helper_helper(num, num)\n\tend\n\tlocal function divisible_by_digits_helper_helper(startnum, endnum)\n\t\tif startnum > endnum then\n\t\t\treturn {}\n\t\telseif divisible_by_digits_helper(startnum) then\n\t\t\treturn {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n\t\telse\n\t\t\treturn divisible_by_digits_helper_helper(startnum + 1, endnum)\n\t\tend\n\tend\n\treturn divisible_by_digits_helper_helper(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89nm_6d4.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {}\nstack traceback:\n\t/tmp/tmp89nm_6d4.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_by_digits = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_by_digits, i)\n    end\n  end\n  return divisible_by_digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal divisible_numbers = {}\n\tfor i = startnum, endnum do\n\t\tlocal digits = {}\n\t\tfor digit in tostring(i):gmatch(\"%d\") do\n\t\t\ttable.insert(digits, tonumber(digit))\n\t\tend\n\t\tlocal divisible = true\n\t\tfor _, digit in ipairs(digits) do\n\t\t\tif i % digit ~= 0 then\n\t\t\t\tdivisible = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif divisible then\n\t\t\ttable.insert(divisible_numbers, i)\n\t\tend\n\tend\n\treturn divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjmkxgle.lua:10: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpcjmkxgle.lua:10: in local 'candidate'\n\t/tmp/tmpcjmkxgle.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local res = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(res, i)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_inner(num)\n        local function divisible_by_digits_inner_inner(num, digit)\n            return num % digit == 0\n        end\n        local function divisible_by_digits_inner_inner_inner(num, digit)\n            return divisible_by_digits_inner_inner(num, digit) and divisible_by_digits_inner_inner(num, digit)\n        end\n        return divisible_by_digits_inner_inner_inner(num, num % 10)\n    end\n    local function divisible_by_digits_inner_inner(startnum, endnum)\n        if startnum > endnum then\n            return {}\n        elseif divisible_by_digits_inner(startnum) then\n            return {startnum}\n        else\n            return {}\n        end\n    end\n    local function divisible_by_digits_inner_inner_inner(startnum, endnum)\n        return table.concat(divisible_by_digits_inner_inner(startnum, endnum), \" \")\n    end\n    return divisible_by_digits_inner_inner_inner(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplb5el92w.lua:30: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: \"1\"\nstack traceback:\n\t/tmp/tmplb5el92w.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n\tlocal function divisible_by_digits_inner(num)\n\t\tlocal function divisible_by_digit(digit)\n\t\t\treturn num % digit == 0\n\t\tend\n\t\tlocal digits = to_digits(num)\n\t\treturn all(divisible_by_digit, digits)\n\tend\n\treturn filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvo4lz99.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpzvo4lz99.lua:10: in local 'candidate'\n\t/tmp/tmpzvo4lz99.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = tostring(i)\n        local divisible = true\n        for j = 1, #num do\n            local digit = tonumber(num:sub(j, j))\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local is_divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                is_divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if is_divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local digits = {}\n    for digit in tostring(num):gmatch(\"%d\") do\n      digits[#digits + 1] = tonumber(digit)\n    end\n    for _, digit in ipairs(digits) do\n      if num % digit ~= 0 then\n        return false\n      end\n    end\n    return true\n  end\n  local result = {}\n  for i = startnum, endnum do\n    if divisible_by_digits_helper(i) then\n      result[#result + 1] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe55_4j0.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpfe55_4j0.lua:8: in local 'divisible_by_digits_helper'\n\t/tmp/tmpfe55_4j0.lua:17: in local 'candidate'\n\t/tmp/tmpfe55_4j0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local divisible = true\n        for digit in tostring(i):gmatch(\"%d\") do\n            if i % tonumber(digit) ~= 0 then\n                divisible = false\n                break\n            end\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            digits[#digits+1] = tonumber(digit)\n        end\n        return all(divisible_by_digit, digits)\n    end\n    return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc2m2260.lua:13: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmppc2m2260.lua:13: in local 'candidate'\n\t/tmp/tmppc2m2260.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by(digit)\n      return num % digit == 0\n    end\n    return all(divisible_by, digits(num))\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_uah7yw.lua:9: attempt to call global 'range' (a nil value)\nstack traceback:\n\t/tmp/tmps_uah7yw.lua:9: in function 'candidate'\n\t/tmp/tmps_uah7yw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local result = {}\n    for i = startnum, endnum do\n        local num = i\n        local divisible = true\n        while num > 0 do\n            local digit = num % 10\n            if digit == 0 or i % digit ~= 0 then\n                divisible = false\n                break\n            end\n            num = math.floor(num / 10)\n        end\n        if divisible then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function is_divisible(num)\n    local function is_divisible_by_digit(num, digit)\n      return num % digit == 0\n    end\n    local function is_divisible_by_digits(num, digits)\n      if #digits == 0 then\n        return true\n      else\n        return is_divisible_by_digit(num, digits[1]) and is_divisible_by_digits(num, {select(2, unpack(digits))})\n      end\n    end\n    return is_divisible_by_digits(num, digits(num))\n  end\n  local function divisible_numbers(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    else\n      if is_divisible(startnum) then\n        return {startnum} .. divisible_numbers(startnum + 1, endnum)\n      else\n        return divisible_numbers(startnum + 1, endnum)\n      end\n    end\n  end\n  return divisible_numbers(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprfiktozu.lua:14: attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmprfiktozu.lua:14: in upvalue 'is_divisible'\n\t/tmp/tmprfiktozu.lua:20: in function </tmp/tmprfiktozu.lua:16>\n\t(...tail calls...)\n\t/tmp/tmprfiktozu.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local is_divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        is_divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digits_helper_helper(num, digit)\n      if digit == 0 then\n        return true\n      elseif num % digit == 0 then\n        return divisible_by_digits_helper_helper(num, digit // 10)\n      else\n        return false\n      end\n    end\n    return divisible_by_digits_helper_helper(num, num)\n  end\n  local function divisible_by_digits_helper_helper(startnum, endnum)\n    if startnum > endnum then\n      return {}\n    elseif divisible_by_digits_helper(startnum) then\n      return {startnum} + divisible_by_digits_helper_helper(startnum + 1, endnum)\n    else\n      return divisible_by_digits_helper_helper(startnum + 1, endnum)\n    end\n  end\n  return divisible_by_digits_helper_helper(startnum, endnum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeeobds6g.lua:19: attempt to perform arithmetic on a table value\nstack traceback:\n\t/tmp/tmpeeobds6g.lua:19: in function </tmp/tmpeeobds6g.lua:15>\n\t(...tail calls...)\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t/tmp/tmpeeobds6g.lua:19: in upvalue 'divisible_by_digits_helper_helper'\n\t...\t(skipping 10 levels)\n\t/tmp/tmpeeobds6g.lua:19: in function </tmp/tmpeeobds6g.lua:15>\n\t(...tail calls...)\n\t/tmp/tmpeeobds6g.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i = startnum, endnum do\n    local number = i\n    local divisible = true\n    while number > 0 do\n      local digit = number % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      number = math.floor(number / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifswpua4.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmpifswpua4.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.020 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function is_divisible(num)\n        local digits = {}\n        for digit in tostring(num):gmatch(\"%d\") do\n            table.insert(digits, tonumber(digit))\n        end\n        for _, digit in ipairs(digits) do\n            if num % digit ~= 0 then\n                return false\n            end\n        end\n        return true\n    end\n    local result = {}\n    for num = startnum, endnum do\n        if is_divisible(num) then\n            table.insert(result, num)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3z_mfab_.lua:8: attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmp3z_mfab_.lua:8: in local 'is_divisible'\n\t/tmp/tmp3z_mfab_.lua:17: in local 'candidate'\n\t/tmp/tmp3z_mfab_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible_by_all = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible_by_all = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible_by_all then\n      table.insert(divisible, i)\n    end\n  end\n  return divisible\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122608,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local divisible_numbers = {}\n  for i=startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit ~= 0 and i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(divisible_numbers, i)\n    end\n  end\n  return divisible_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bu8dn77.lua:25: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22}\nList difference analysis:\n* list sizes differ: list A (actual) has 15 items, list B (expected) has 13 items\n* lists A and B start differing at index 10\n* lists A and B are equal again from index 15 for A, 13 for B\n* Common parts:\n  = A[1], B[1]: 1\n  = A[2], B[2]: 2\n  = A[3], B[3]: 3\n  = A[4], B[4]: 4\n  = A[5], B[5]: 5\n  = A[6], B[6]: 6\n  = A[7], B[7]: 7\n  = A[8], B[8]: 8\n  = A[9], B[9]: 9\n* Differing parts:\n  - A[10]: 10\n  + B[10]: 11\n  - A[11]: 11\n  + B[11]: 12\n  - A[12]: 12\n  + B[12]: 15\n* Present only in one list:\n  - A[13]: 15\n  - A[14]: 20\n* Common parts at the end of the lists\n  = A[15], B[13]: 22\nstack traceback:\n\t/tmp/tmp3bu8dn77.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(num, '%d')\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc76y6t5.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpkc76y6t5.lua:10: in local 'candidate'\n\t/tmp/tmpkc76y6t5.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_inner(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    return num > 9 and all(divisible_by_digit, digits(num))\n  end\n  return filter(divisible_by_digits_inner, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqebpc40f.lua:9: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpqebpc40f.lua:9: in local 'candidate'\n\t/tmp/tmpqebpc40f.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local function divisible_by_digits_helper(num)\n    local function divisible_by_digit(digit)\n      return num % digit == 0\n    end\n    local digits = string.gmatch(tostring(num), \"%d\")\n    return all(divisible_by_digit, digits)\n  end\n  return filter(divisible_by_digits_helper, range(startnum, endnum))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvo8tyeh.lua:10: attempt to call a nil value (global 'range')\nstack traceback:\n\t/tmp/tmpjvo8tyeh.lua:10: in local 'candidate'\n\t/tmp/tmpjvo8tyeh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n  local result = {}\n  for i = startnum, endnum do\n    local num = i\n    local divisible = true\n    while num > 0 do\n      local digit = num % 10\n      if digit == 0 or i % digit ~= 0 then\n        divisible = false\n        break\n      end\n      num = math.floor(num / 10)\n    end\n    if divisible then\n      table.insert(result, i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027715,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/luathon-exercises/lambda/luathon-lambda-exercise-24.php\nlocal function divisible_by_digits(startnum, endnum)\n    local function divisible_by_digits_helper(num)\n        local function divisible_by_digit(digit)\n            return num % digit == 0\n        end\n        return num % 10 == 0 and divisible_by_digits_helper(num / 10) or divisible_by_digit(num % 10) and divisible_by_digits_helper(num / 10)\n    end\n    return function(num)\n        return num >= startnum and num <= endnum and divisible_by_digits_helper(num)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = divisible_by_digits\n    lu.assertEquals(candidate(1, 22), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22})\n    lu.assertEquals(candidate(1, 15), {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15})\n    lu.assertEquals(candidate(20, 25), {22, 24})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122609,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a9p1lbh.lua:17: expected: {1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22}\nactual: function: 0x56275d5fc690\nstack traceback:\n\t/tmp/tmp5a9p1lbh.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}