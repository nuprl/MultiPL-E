{
  "name": "mbpp_99_decimal_to_binary",
  "language": "lua",
  "prompt": "-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local b = ''\n    while n > 0 do\n        b = tostring(n % 2) .. b\n        n = math.floor(n / 2)\n    end\n    return b\nend",
    "  local result = \"\"\n  while n > 0 do\n    local r = n % 2\n    result = tostring(r) .. result\n    n = (n - r) / 2\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local t = {}\n    while n > 0 do\n        local r = n % 2\n        table.insert(t, r)\n        n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\nend",
    "    local function _decimal_to_binary(n, acc)\n        if n == 0 then\n            return acc\n        else\n            return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. acc)\n        end\n    end\n    return _decimal_to_binary(n, \"\")\nend",
    "\tlocal b = ''\n\twhile n > 0 do\n\t\tb = tostring(n % 2) .. b\n\t\tn = math.floor(n / 2)\n\tend\n\treturn b\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function _decimal_to_binary(n, s)\n    if n == 0 then return s end\n    return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return _decimal_to_binary(n, \"\")\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "\tlocal s = \"\"\n\tlocal d = n\n\twhile d > 0 do\n\t\ts = tostring(d % 2) .. s\n\t\td = math.floor(d / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t):reverse()\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend"
  ]
}