{
  "name": "mbpp_99_decimal_to_binary",
  "language": "lua",
  "prompt": "-- Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nlocal function decimal_to_binary(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(8), '1000')\n    lu.assertEquals(candidate(18), '10010')\n    lu.assertEquals(candidate(7), '111')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local b = ''\n    while n > 0 do\n        b = tostring(n % 2) .. b\n        n = math.floor(n / 2)\n    end\n    return b\nend",
    "  local result = \"\"\n  while n > 0 do\n    local r = n % 2\n    result = tostring(r) .. result\n    n = (n - r) / 2\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local t = {}\n    while n > 0 do\n        local r = n % 2\n        table.insert(t, r)\n        n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\nend",
    "    local function _decimal_to_binary(n, acc)\n        if n == 0 then\n            return acc\n        else\n            return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. acc)\n        end\n    end\n    return _decimal_to_binary(n, \"\")\nend",
    "\tlocal b = ''\n\twhile n > 0 do\n\t\tb = tostring(n % 2) .. b\n\t\tn = math.floor(n / 2)\n\tend\n\treturn b\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function _decimal_to_binary(n, s)\n    if n == 0 then return s end\n    return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return _decimal_to_binary(n, \"\")\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "\tlocal s = \"\"\n\tlocal d = n\n\twhile d > 0 do\n\t\ts = tostring(d % 2) .. s\n\t\td = math.floor(d / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t):reverse()\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = (n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = math.floor(n / 2)\n    table.insert(t, r)\n  end\n  return table.concat(t):reverse()\nend",
    "    local binary = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        binary = remainder .. binary\n        n = (n - remainder) / 2\n    end\n    return binary\nend",
    "  local function recurse(n)\n    if n == 0 then return \"\" end\n    return recurse(math.floor(n / 2)) .. tostring(n % 2)\n  end\n  return recurse(n)\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local bin = ''\n  while n > 0 do\n    bin = (n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local function recurse(n, s)\n    if n == 0 then return s end\n    return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return recurse(n, \"\")\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = (n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local function helper(n, acc)\n    if n == 0 then return acc end\n    return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n  end\n  return helper(n, \"\")\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = tostring(r) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        local r = n % 2\n        result = tostring(r) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), n % 2 .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        local r = n % 2\n        result = r .. result\n        n = (n - r) / 2\n    end\n    return result\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    n = math.floor(n / 2)\n    result = remainder .. result\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function recurse(n, acc)\n    if n == 0 then\n      return acc\n    else\n      local q, r = math.modf(n / 2)\n      return recurse(q, tostring(r) .. acc)\n    end\n  end\n  return recurse(n, '')\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = ''\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "    local function _decimal_to_binary(n, s)\n        if n == 0 then\n            return s\n        else\n            return _decimal_to_binary(math.floor(n / 2), tostring(n % 2) .. s)\n        end\n    end\n    return _decimal_to_binary(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local function recurse(n, s)\n        if n == 0 then\n            return s\n        else\n            return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n        end\n    end\n    return recurse(n, \"\")\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local t = {}\n  repeat\n    local d = n % 2\n    n = (n - d) / 2\n    table.insert(t, 1, d)\n  until n == 0\n  return table.concat(t)\nend",
    "    local function binary_rec(n, s)\n        if n == 0 then\n            return s\n        else\n            return binary_rec(math.floor(n / 2), tostring(n % 2) .. s)\n        end\n    end\n    return binary_rec(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = tostring(remainder) .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local function inner(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return inner(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return inner(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = s .. tostring(n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s:reverse()\nend",
    "  local r = ''\n  while n > 0 do\n    r = tostring(n % 2) .. r\n    n = math.floor(n / 2)\n  end\n  return r\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = math.floor(n / 2)\n    table.insert(t, r)\n  end\n  return table.concat(t):reverse()\nend",
    "    local t = {}\n    while n > 0 do\n        t[#t+1] = n % 2\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\tt[#t+1] = n % 2\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t):reverse()\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local s = ''\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local function recurse(n)\n    if n == 0 then return \"\" end\n    return recurse(math.floor(n / 2)) .. tostring(n % 2)\n  end\n  return recurse(n)\nend",
    "\tlocal s = ''\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = tostring(remainder) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, 1, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local b = \"\"\n  while n > 0 do\n    b = tostring(n % 2) .. b\n    n = math.floor(n / 2)\n  end\n  return b\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = (n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local bin = ''\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local bin = ''\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = result .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(result)\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = result .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(result)\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local function recurse(n, s)\n    if n == 0 then return s end\n    return recurse(math.floor(n / 2), tostring(n % 2) .. s)\n  end\n  return recurse(n, \"\")\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = (n - r) / 2\n    table.insert(t, r)\n  end\n  return table.concat(t):reverse()\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = r .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal bin = \"\"\n\twhile n > 0 do\n\t\tbin = tostring(n % 2) .. bin\n\t\tn = math.floor(n / 2)\n\tend\n\treturn bin\nend",
    "    local bin = ''\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\tlocal r = n % 2\n\t\tn = (n - r) / 2\n\t\tt[#t + 1] = r\n\tend\n\treturn table.concat(t):reverse()\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local s = ''\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local t = {}\n  while n > 0 do\n    table.insert(t, n % 2)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local s = \"\"\n  while n > 0 do\n    local d = n % 2\n    s = d .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = s .. tostring(n % 2)\n    n = math.floor(n / 2)\n  end\n  return string.reverse(s)\nend",
    "    local s = ''\n    while n > 0 do\n        local r = n % 2\n        s = tostring(r) .. s\n        n = (n - r) / 2\n    end\n    return s\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        local r = n % 2\n        s = tostring(r) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local t = {}\n    while n > 0 do\n        local r = n % 2\n        table.insert(t, r)\n        n = (n - r) / 2\n    end\n    return table.concat(t):reverse()\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local r = \"\"\n    while n > 0 do\n        r = tostring(n % 2) .. r\n        n = math.floor(n / 2)\n    end\n    return r\nend",
    "  local t = {}\n  local i = 0\n  while n > 0 do\n    i = i + 1\n    t[i] = n % 2\n    n = math.floor(n / 2)\n  end\n  return table.concat(t, \"\")\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t):reverse()\nend",
    "\tlocal b = \"\"\n\twhile n > 0 do\n\t\tb = tostring(n % 2) .. b\n\t\tn = math.floor(n / 2)\n\tend\n\treturn b\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, 1, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    table.insert(t, r)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t)\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    n = math.floor(n / 2)\n    result = remainder .. result\n  end\n  return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tresult = tostring(n % 2) .. result\n\t\tn = math.floor(n / 2)\n\tend\n\treturn result\nend",
    "    local result = ''\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    table.insert(t, r)\n    n = math.floor(n / 2)\n  end\n  return table.concat(t):reverse()\nend",
    "    local t = {}\n    while n > 0 do\n        table.insert(t, n % 2)\n        n = math.floor(n / 2)\n    end\n    return table.concat(t)\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    local remainder = n % 2\n    result = tostring(remainder) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal function helper(n, s)\n\t\tif n == 0 then\n\t\t\treturn s\n\t\telse\n\t\t\treturn helper(math.floor(n / 2), tostring(n % 2) .. s)\n\t\tend\n\tend\n\treturn helper(n, \"\")\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal result = \"\"\n\twhile n > 0 do\n\t\tlocal remainder = n % 2\n\t\tresult = remainder .. result\n\t\tn = (n - remainder) / 2\n\tend\n\treturn result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    local r = n % 2\n    s = tostring(r) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local binary = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    binary = remainder .. binary\n    n = math.floor(n / 2)\n  end\n  return binary\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        result = tostring(n % 2) .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = math.floor(n / 2)\n    end\n    return result\nend",
    "    local result = \"\"\n    while n > 0 do\n        local remainder = n % 2\n        result = remainder .. result\n        n = (n - remainder) / 2\n    end\n    return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "    local bin = \"\"\n    while n > 0 do\n        bin = tostring(n % 2) .. bin\n        n = math.floor(n / 2)\n    end\n    return bin\nend",
    "\tlocal s = \"\"\n\twhile n > 0 do\n\t\ts = tostring(n % 2) .. s\n\t\tn = math.floor(n / 2)\n\tend\n\treturn s\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "\tlocal b = \"\"\n\twhile n > 0 do\n\t\tb = tostring(n % 2) .. b\n\t\tn = math.floor(n / 2)\n\tend\n\treturn b\nend",
    "  local function helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return helper(n, \"\")\nend",
    "  local function decimal_to_binary_helper(n, acc)\n    if n == 0 then\n      return acc\n    else\n      return decimal_to_binary_helper(math.floor(n / 2), tostring(n % 2) .. acc)\n    end\n  end\n  return decimal_to_binary_helper(n, \"\")\nend",
    "  local s = \"\"\n  while n > 0 do\n    s = tostring(n % 2) .. s\n    n = math.floor(n / 2)\n  end\n  return s\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    table.insert(t, r)\n    n = (n - r) / 2\n  end\n  return table.concat(t):reverse()\nend",
    "    local result = \"\"\n    local remainder = 0\n    while n > 0 do\n        remainder = n % 2\n        n = math.floor(n / 2)\n        result = remainder .. result\n    end\n    return result\nend",
    "  local result = ''\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local t = {}\n  while n > 0 do\n    local r = n % 2\n    n = (n - r) / 2\n    table.insert(t, r)\n  end\n  return string.reverse(table.concat(t))\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, 1, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "  local result = \"\"\n  while n > 0 do\n    local remainder = n % 2\n    result = remainder .. result\n    n = (n - remainder) / 2\n  end\n  return result\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "    local s = \"\"\n    while n > 0 do\n        local r = n % 2\n        s = r .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local bin = \"\"\n  while n > 0 do\n    bin = tostring(n % 2) .. bin\n    n = math.floor(n / 2)\n  end\n  return bin\nend",
    "  local result = \"\"\n  while n > 0 do\n    result = tostring(n % 2) .. result\n    n = math.floor(n / 2)\n  end\n  return result\nend",
    "\tlocal t = {}\n\twhile n > 0 do\n\t\ttable.insert(t, 1, n % 2)\n\t\tn = math.floor(n / 2)\n\tend\n\treturn table.concat(t)\nend",
    "    local s = \"\"\n    while n > 0 do\n        s = tostring(n % 2) .. s\n        n = math.floor(n / 2)\n    end\n    return s\nend",
    "  local function recurse(n)\n    if n == 0 then return \"\" end\n    return recurse(math.floor(n/2)) .. tostring(n%2)\n  end\n  return recurse(n)\nend"
  ]
}