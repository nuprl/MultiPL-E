{
  "name": "mbpp_71_comb_sort",
  "language": "lua",
  "prompt": "-- Write a function to sort a table of elements.\nlocal function comb_sort(nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = comb_sort\n    lu.assertEquals(candidate({5, 15, 37, 25, 79}), {5, 15, 25, 37, 79})\n    lu.assertEquals(candidate({41, 32, 15, 19, 22}), {15, 19, 22, 32, 41})\n    lu.assertEquals(candidate({99, 15, 13, 47}), {13, 15, 47, 99})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local shrink = 1.3\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        if gap > 1 then\n            gap = math.floor(gap / 1.3)\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    if gap > 1 then\n      gap = math.floor(gap / 1.3)\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.25)\n    if gap < 1 then\n      gap = 1\n    end\n    swapped = false\n    for i = 1, #nums - gap do\n      local j = i + gap\n      if nums[i] > nums[j] then\n        nums[i], nums[j] = nums[j], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.25)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "    local gap = #nums\n    local swapped = true\n    local shrink_factor = 1.3\n    while gap > 1 or swapped do\n        gap = math.floor(gap / shrink_factor)\n        if gap < 1 then gap = 1 end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "  local gap = #nums\n  local swapped = true\n  while gap > 1 or swapped do\n    gap = math.floor(gap / 1.3)\n    if gap < 1 then gap = 1 end\n    swapped = false\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        swapped = true\n      end\n    end\n  end\nend",
    "    local gap = #nums\n    local swapped = true\n    while gap > 1 or swapped do\n        gap = math.floor(gap / 1.3)\n        if gap < 1 then\n            gap = 1\n        end\n        swapped = false\n        for i = 1, #nums - gap do\n            if nums[i] > nums[i + gap] then\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = true\n            end\n        end\n    end\nend",
    "  local gap = #nums\n  local shrink = 1.3\n  local sorted = false\n  while not sorted do\n    gap = math.floor(gap / shrink)\n    if gap <= 1 then\n      gap = 1\n      sorted = true\n    end\n    for i = 1, #nums - gap do\n      if nums[i] > nums[i + gap] then\n        nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        sorted = false\n      end\n    end\n  end\nend"
  ]
}