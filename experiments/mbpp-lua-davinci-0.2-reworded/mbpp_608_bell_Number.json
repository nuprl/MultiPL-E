{
  "name": "mbpp_608_bell_Number",
  "language": "lua",
  "prompt": "-- Write a luathon function to find nth bell number.\nlocal function bell_Number(n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bell_Number\n    lu.assertEquals(candidate(2), 2)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 15)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal bell = {}\n\tbell[0] = 1\n\tfor i = 1, n do\n\t\tbell[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tbell[i] = bell[i] + bell[j] * bell[i - j - 1]\n\t\tend\n\tend\n\treturn bell[n]\nend",
    "    local bell = {1, 1}\n    for i = 3, n do\n        bell[i] = 0\n        for j = 1, i - 1 do\n            bell[i] = bell[i] + bell[j] * bell[i - j]\n        end\n    end\n    return bell[n]\nend",
    "\tlocal bell = {}\n\tbell[0] = 1\n\tfor i = 1, n do\n\t\tbell[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tbell[i] = bell[i] + bell[j] * bell[i - j - 1]\n\t\tend\n\tend\n\treturn bell[n]\nend",
    "    local bell = {0, 1}\n    for i = 2, n do\n        bell[i] = bell[i - 1]\n        for j = i - 1, 1, -1 do\n            bell[j] = bell[j] + bell[j - 1]\n        end\n    end\n    return bell[n]\nend",
    "  local b = {0, 1}\n  for i = 2, n do\n    b[i] = 0\n    for j = 1, i - 1 do\n      b[i] = b[i] + b[j] * b[i - j]\n    end\n  end\n  return b[n]\nend",
    "\tlocal function bell_Number_Helper(n, m)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telseif n == 1 then\n\t\t\treturn m\n\t\telseif n > 1 then\n\t\t\treturn bell_Number_Helper(n - 1, m) * (m - n + 1) + bell_Number_Helper(n - 2, m)\n\t\tend\n\tend\n\treturn bell_Number_Helper(n, n)\nend",
    "\tlocal function bell_Number_aux(n, k)\n\t\tif k == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn sum(map(function (x) return bell_Number_aux(n, k - 1) end, range(0, k - 1)))\n\t\tend\n\tend\n\treturn bell_Number_aux(n, n)\nend",
    "\tlocal b = {0, 1}\n\tfor i = 2, n do\n\t\tb[i] = b[i - 1]\n\t\tfor j = i - 1, 1, -1 do\n\t\t\tb[j] = b[j] + b[j - 1]\n\t\tend\n\tend\n\treturn b[n]\nend",
    "\tlocal function bell(n, k)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telseif k == 0 then\n\t\t\treturn 0\n\t\telse\n\t\t\treturn bell(n - 1, k - 1) + k * bell(n - 1, k)\n\t\tend\n\tend\n\treturn bell(n, n)\nend",
    "    local bell = {}\n    bell[0] = 1\n    for i = 1, n do\n        bell[i] = 0\n        for j = 1, i do\n            bell[i] = bell[i] + bell[j - 1] * bell[i - j]\n        end\n    end\n    return bell[n]\nend",
    "\tlocal function bell(n, k)\n\t\tif k == 0 then\n\t\t\treturn 1\n\t\telse\n\t\t\treturn sum(i = 1, k, bell(n - 1, i - 1) * bell(n, k - i))\n\t\tend\n\tend\n\treturn bell(n, n)\nend",
    "\tlocal function bell_Number_Helper(n, m)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telseif n == 1 then\n\t\t\treturn m\n\t\telse\n\t\t\treturn bell_Number_Helper(n - 1, m) * (m - n + 1) + bell_Number_Helper(n - 1, m - 1)\n\t\tend\n\tend\n\treturn bell_Number_Helper(n, n)\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i+1] = 0\n\t\tfor j = i, 1, -1 do\n\t\t\tb[j+1] = b[j] + b[j+1]\n\t\tend\n\tend\n\treturn b[n+1]\nend",
    "    local bell = {0, 1}\n    for i = 2, n do\n        local sum = 0\n        for j = 0, i - 1 do\n            sum = sum + bell[j + 1] * bell[i - j]\n        end\n        bell[i + 1] = sum\n    end\n    return bell[n + 1]\nend",
    "\tlocal function bell(n, k)\n\t\tif n == 0 then\n\t\t\treturn 1\n\t\telseif k == 0 then\n\t\t\treturn 0\n\t\telse\n\t\t\treturn bell(n-1, k-1) + bell(n, k-1)\n\t\tend\n\tend\n\treturn bell(n, n)\nend",
    "    local b = {0, 1}\n    for i = 2, n do\n        b[i + 1] = 0\n        for j = 0, i - 1 do\n            b[i + 1] = b[i + 1] + b[j + 1] * b[i - j]\n        end\n    end\n    return b[n + 1]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i+1] = 0\n\t\tfor j = i, 1, -1 do\n\t\t\tb[j+1] = b[j+1] + b[j]\n\t\tend\n\tend\n\treturn b[n+1]\nend",
    "\tlocal function bell(n, k)\n\t\tif k == 0 then return 1 end\n\t\tif n == k then return 1 end\n\t\treturn bell(n-1, k-1) + k*bell(n-1, k)\n\tend\n\treturn bell(n, n)\nend",
    "\tlocal bell = {}\n\tbell[0] = 1\n\tfor i = 1, n do\n\t\tbell[i] = 0\n\t\tfor j = 0, i - 1 do\n\t\t\tbell[i] = bell[i] + bell[j] * bell[i - 1 - j]\n\t\tend\n\tend\n\treturn bell[n]\nend",
    "\tlocal b = {1}\n\tfor i = 1, n do\n\t\tb[i+1] = 0\n\t\tfor j = i, 1, -1 do\n\t\t\tb[j+1] = b[j] + b[j+1]\n\t\tend\n\tend\n\treturn b[n+1]\nend"
  ]
}