{
  "name": "mbpp_598_armstrong_number",
  "language": "lua",
  "prompt": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number.\")\n\telse\n\t\tprint(number .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzijk0tmn.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpzijk0tmn.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal rem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local temp = number\n  local sum = 0\n  local rem = 0\n  while temp > 0 do\n    rem = temp % 10\n    sum = sum + (rem * rem * rem)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile number > 0 do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\tlocal remainder = 0\n\twhile temp > 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp, sum = number, 0\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while (number ~= 0) do\n        rem = number % 10\n        sum = sum + (rem * rem * rem)\n        number = math.floor(number / 10)\n    end\n    if (temp == sum) then\n        print(temp .. \" is an Armstrong number\")\n    else\n        print(temp .. \" is not an Armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": "153 is an Armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1y8s41h.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpd1y8s41h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_of_digits = #tostring(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ number_of_digits\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while (number ~= 0) do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if (sum == temp) then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile (temp ~= 0) do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (sum == number) then\n\t\tprint(number .. \" is an armstrong number.\")\n\telse\n\t\tprint(number .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2187upse.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2187upse.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif temp == sum then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local num = number\n  local sum = 0\n  local digit = 0\n  while num > 0 do\n    digit = num % 10\n    sum = sum + digit ^ 3\n    num = math.floor(num / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"Armstrong number\")\n\telse\n\t\tprint(\"Not an Armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "Armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_c_yo6e5.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_c_yo6e5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while number > 0 do\n    local remainder = number % 10\n    sum = sum + (remainder * remainder * remainder)\n    number = math.floor(number / 10)\n  end\n  if temp == sum then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number ~= 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp .. \" is armstrong number\")\n\telse\n\t\tprint(temp .. \" is not armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is armstrong number\n153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug292bs_.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpug292bs_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_of_digits = #tostring(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ number_of_digits\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is armstrong number\")\n\telse\n\t\tprint(temp .. \" is not armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll37s3b8.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpll37s3b8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"The given number is armstrong number\")\n\telse\n\t\tprint(\"The given number is not armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong number\nThe given number is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplve5o3bg.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmplve5o3bg.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local remainder = 0\n    while temp ~= 0 do\n        remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70f5tdny.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp70f5tdny.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + remainder * remainder * remainder\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_string = tostring(number)\n    local number_length = string.len(number_string)\n    local sum = 0\n    for i = 1, number_length do\n        local digit = tonumber(string.sub(number_string, i, i))\n        sum = sum + digit ^ number_length\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number.\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqrf4gtv.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcqrf4gtv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + remainder ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"Given number is armstrong number\")\n\telse\n\t\tprint(\"Given number is not armstrong number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "Given number is armstrong number\nGiven number is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pepmwnd.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8pepmwnd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_string = tostring(number)\n    local length = string.len(number_string)\n    local sum = 0\n    for i = 1, length do\n        local digit = tonumber(string.sub(number_string, i, i))\n        sum = sum + digit ^ length\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp ~= 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    print(number .. \" is an armstrong number\")\n  else\n    print(number .. \" is not an armstrong number\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4q_55de.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpt4q_55de.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local digit = number % 10\n        sum = sum + digit ^ 3\n        number = math.floor(number / 10)\n    end\n    if temp == sum then\n        print(\"It is an armstrong number\")\n    else\n        print(\"It is not an armstrong number\")\n    end\nend\narmstrong_number(371)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "It is an armstrong number\nIt is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0inj1edw.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp0inj1edw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit * digit * digit\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\narmstrong_number(153)\narmstrong_number(371)\narmstrong_number(407)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\n371 is an armstrong number\n407 is an armstrong number\n153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9eoc6h0.lua:24: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_9eoc6h0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local num = number\n  local sum = 0\n  while num > 0 do\n    local rem = num % 10\n    sum = sum + (rem * rem * rem)\n    num = math.floor(num / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(number > 0) do\n\t\tlocal rem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    print(number .. \" is an armstrong number.\")\n  else\n    print(number .. \" is not an armstrong number.\")\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpis_w2b4q.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpis_w2b4q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile temp ~= 0 do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs4esoty.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgs4esoty.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j4o12bv.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4j4o12bv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(\"Armstrong Number\")\n\telse\n\t\tprint(\"Not Armstrong Number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "Armstrong Number\nArmstrong Number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsben7klu.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsben7klu.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local num = number\n    local sum = 0\n    local remainder = 0\n    while num > 0 do\n        remainder = num % 10\n        sum = sum + remainder * remainder * remainder\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number.\")\n    else\n        print(number .. \" is not an armstrong number.\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e4etlif.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp4e4etlif.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number.\")\n    else\n        print(number .. \" is not an armstrong number.\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm01e_zzn.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpm01e_zzn.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local num = number\n  local sum = 0\n  local rem = 0\n  while num > 0 do\n    rem = num % 10\n    sum = sum + (rem * rem * rem)\n    num = math.floor(num / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0)\n\tdo\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum)\n\tthen\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp ~= 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\narmstrong_number(153)\narmstrong_number(123)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\n123 is not an armstrong number\n153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod7lslmk.lua:23: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpod7lslmk.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local num = number\n    local sum = 0\n    local rem = 0\n    while num > 0 do\n        rem = num % 10\n        sum = sum + (rem * rem * rem)\n        num = math.floor(num / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, sum = number, 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local digit = 0\n    while temp ~= 0 do\n        digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile(number > 0) do\n\t\trem = number % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong\nThe given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpph0ssa5v.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpph0ssa5v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(\"The given number is armstrong number\")\n    else\n        print(\"The given number is not armstrong number\")\n    end\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong number\nThe given number is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq54v0_0d.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpq54v0_0d.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile(temp ~= 0) do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif(sum == number) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaamhulcm.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpaamhulcm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoye3x6ov.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpoye3x6ov.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp > 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while number > 0 do\n        rem = number % 10\n        sum = sum + (rem * rem * rem)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\treturn sum == temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"Armstrong Number\")\n\telse\n\t\tprint(\"Not Armstrong Number\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "Armstrong Number\nArmstrong Number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge49lkn1.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpge49lkn1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local num = number\n  local sum = 0\n  local rem = 0\n  while num > 0 do\n    rem = num % 10\n    sum = sum + (rem * rem * rem)\n    num = math.floor(num / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_length = #tostring(number)\n\tlocal sum = 0\n\tfor i = 1, number_length do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ number_length\n\t\tnumber = math.floor(number / 10)\n\tend\n\treturn sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5wks94s.lua:16: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr5wks94s.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp ~= 0 do\n    local remainder = temp % 10\n    sum = sum + remainder ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_copy = number\n    local sum = 0\n    local remainder = 0\n    while number_copy ~= 0 do\n        remainder = number_copy % 10\n        sum = sum + remainder ^ 3\n        number_copy = math.floor(number_copy / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number.\")\n    else\n        print(number .. \" is not an armstrong number.\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph62kyk83.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmph62kyk83.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + remainder * remainder * remainder\n        number = math.floor(number / 10)\n    end\n    if temp == sum then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while number > 0 do\n    local remainder = number % 10\n    sum = sum + (remainder * remainder * remainder)\n    number = math.floor(number / 10)\n  end\n  if sum == temp then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local rem = number % 10\n        sum = sum + (rem * rem * rem)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp, sum = number, 0\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal digit = number % 10\n\t\tsum = sum + digit ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit * digit * digit\n\t\ttemp = math.floor(temp / 10)\n\tend\n\treturn sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile (number ~= 0) do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif (temp == sum) then\n\t\tprint(temp .. \" is an armstrong number.\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3qu57w8.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb3qu57w8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal num = number\n\tlocal remainder\n\twhile num > 0 do\n\t\tremainder = num % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnum = math.floor(num / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + remainder * remainder * remainder\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp ~= 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1avyauw.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_1avyauw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz54mb4_9.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpz54mb4_9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile temp ~= 0 do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local digit = number % 10\n        sum = sum + digit ^ 3\n        number = math.floor(number / 10)\n    end\n    if temp == sum then\n        print(temp .. \" is an armstrong number\")\n    else\n        print(temp .. \" is not an armstrong number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jcaaknv.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8jcaaknv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile temp > 0 do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local digit = temp % 10\n        sum = sum + digit ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile (number > 0) do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif (temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local digit = number % 10\n        sum = sum + digit ^ 3\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number > 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(sum == temp) then\n\t\tprint(temp..\" is armstrong number\")\n\telse\n\t\tprint(temp..\" is not armstrong number\")\n\tend\nend\narmstrong_number(371)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "371 is armstrong number\n153 is armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5guwzh6j.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp5guwzh6j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    local rem = 0\n    while temp ~= 0 do\n        rem = temp % 10\n        sum = sum + (rem * rem * rem)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        print(number .. \" is an armstrong number\")\n    else\n        print(number .. \" is not an armstrong number\")\n    end\nend\narmstrong_number(153)\narmstrong_number(371)\narmstrong_number(407)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\n371 is an armstrong number\n407 is an armstrong number\n153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9eoc6h0.lua:24: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp_9eoc6h0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal number_string = tostring(number)\n\tlocal number_length = string.len(number_string)\n\tlocal sum = 0\n\tfor i = 1, number_length do\n\t\tlocal digit = tonumber(string.sub(number_string, i, i))\n\t\tsum = sum + (digit ^ number_length)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder * remainder * remainder\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal rem = 0\n\twhile temp ~= 0 do\n\t\trem = temp % 10\n\t\tsum = sum + (rem * rem * rem)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\tprint(number .. \" is an armstrong number\")\n\telse\n\t\tprint(number .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs4esoty.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgs4esoty.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + remainder ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaamhulcm.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpaamhulcm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile (temp ~= 0) do\n\t\tremainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif (number == sum) then\n\t\tprint(\"The number is armstrong\")\n\telse\n\t\tprint(\"The number is not armstrong\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpushv_qkz.lua:21: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpushv_qkz.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + remainder ^ 3\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\tprint(temp .. \" is an armstrong number.\")\n\telse\n\t\tprint(temp .. \" is not an armstrong number.\")\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "153 is an armstrong number.\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg_qfv2t.lua:20: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprg_qfv2t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local temp = number\n    local sum = 0\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + remainder ^ 3\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local number_of_digits = string.len(number)\n    local sum = 0\n    for i = 1, number_of_digits do\n        local digit = string.sub(number, i, i)\n        sum = sum + digit ^ number_of_digits\n    end\n    return sum == number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local digit = temp % 10\n    sum = sum + digit ^ 3\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n  local sum = 0\n  local temp = number\n  while temp > 0 do\n    local remainder = temp % 10\n    sum = sum + (remainder * remainder * remainder)\n    temp = math.floor(temp / 10)\n  end\n  if sum == number then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local rem = number % 10\n        sum = sum + (rem * rem * rem)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal temp = number\n\tlocal sum = 0\n\tlocal remainder = 0\n\twhile(number ~= 0) do\n\t\tremainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif(temp == sum) then\n\t\tprint(\"The given number is armstrong\")\n\telse\n\t\tprint(\"The given number is not armstrong\")\n\tend\nend\narmstrong_number(153)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "The given number is armstrong\nThe given number is armstrong\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuwby1wd.lua:22: expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvuwby1wd.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile temp > 0 do\n\t\tlocal digit = temp % 10\n\t\tsum = sum + digit ^ 3\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif sum == number then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile number > 0 do\n\t\tlocal remainder = number % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\tnumber = math.floor(number / 10)\n\tend\n\tif sum == temp then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n\tlocal sum = 0\n\tlocal temp = number\n\twhile(temp ~= 0) do\n\t\tlocal remainder = temp % 10\n\t\tsum = sum + (remainder * remainder * remainder)\n\t\ttemp = math.floor(temp / 10)\n\tend\n\tif(sum == number) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nprint(\"Armstrong Number: \", armstrong_number(153))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": "Armstrong Number: \ttrue\n.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp > 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while temp ~= 0 do\n        local remainder = temp % 10\n        sum = sum + (remainder * remainder * remainder)\n        temp = math.floor(temp / 10)\n    end\n    if sum == number then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027771,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check whether the given number is armstrong or not.\nlocal function armstrong_number(number)\n    local sum = 0\n    local temp = number\n    while number > 0 do\n        local remainder = number % 10\n        sum = sum + (remainder * remainder * remainder)\n        number = math.floor(number / 10)\n    end\n    if sum == temp then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = armstrong_number\n    lu.assertEquals(candidate(153), true)\n    lu.assertEquals(candidate(259), false)\n    lu.assertEquals(candidate(4458), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123115,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}