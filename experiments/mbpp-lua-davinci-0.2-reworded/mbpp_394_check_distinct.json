{
  "name": "mbpp_394_check_distinct",
  "language": "lua",
  "prompt": "-- Write a function to check if given table contains no duplicates.\nlocal function check_distinct(test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_distinct\n    lu.assertEquals(candidate({1, 4, 5, 6, 1, 4}), false)\n    lu.assertEquals(candidate({1, 4, 5, 6}), true)\n    lu.assertEquals(candidate({2, 3, 4, 5, 6}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local seen = {}\n    for _, v in ipairs(test_tup) do\n        if seen[v] then\n            return false\n        end\n        seen[v] = true\n    end\n    return true\nend",
    "\tlocal seen = {}\n\tfor _, v in ipairs(test_tup) do\n\t\tif seen[v] then\n\t\t\treturn false\n\t\tend\n\t\tseen[v] = true\n\tend\n\treturn true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local seen = {}\n    for _, v in ipairs(test_tup) do\n        if seen[v] then\n            return false\n        end\n        seen[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in pairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend",
    "    local t = {}\n    for _, v in ipairs(test_tup) do\n        if t[v] then\n            return false\n        end\n        t[v] = true\n    end\n    return true\nend"
  ]
}