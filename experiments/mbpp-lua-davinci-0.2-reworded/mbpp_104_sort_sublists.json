{
  "name": "mbpp_104_sort_sublists",
  "language": "lua",
  "prompt": "-- Write a function to sort each subtable of strings in a given table of tables.\nlocal function sort_sublists(input_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_sublists\n    lu.assertEquals(candidate({{'green', 'orange'}, {'black', 'white'}, {'white', 'black', 'orange'}}), {{'green', 'orange'}, {'black', 'white'}, {'black', 'orange', 'white'}})\n    lu.assertEquals(candidate({{' red ', 'green'}, {'blue ', ' black'}, {' orange', 'brown'}}), {{' red ', 'green'}, {' black', 'blue '}, {' orange', 'brown'}})\n    lu.assertEquals(candidate({{'zilver', 'gold'}, {'magnesium', 'aluminium'}, {'steel', 'bronze'}}), {{'gold', 'zilver'}, {'aluminium', 'magnesium'}, {'bronze', 'steel'}})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "  local output_list = {}\n  for _, sublist in pairs(input_list) do\n    table.sort(sublist)\n    table.insert(output_list, sublist)\n  end\n  return output_list\nend",
    "    local output_list = {}\n    for k, v in pairs(input_list) do\n        table.sort(v)\n        output_list[k] = v\n    end\n    return output_list\nend",
    "  for _, sublist in ipairs(input_list) do\n    table.sort(sublist)\n  end\nend",
    "  local output_list = {}\n  for i, sublist in ipairs(input_list) do\n    table.sort(sublist)\n    output_list[i] = sublist\n  end\n  return output_list\nend",
    "    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n    end\nend",
    "  local output_list = {}\n  for i, v in ipairs(input_list) do\n    table.insert(output_list, sort_list(v))\n  end\n  return output_list\nend",
    "    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n    end\nend",
    "    local output_list = {}\n    for i, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        output_list[i] = sublist\n    end\n    return output_list\nend",
    "    for i = 1, #input_list do\n        table.sort(input_list[i])\n    end\nend",
    "  local output_list = {}\n  for _, sublist in ipairs(input_list) do\n    table.insert(output_list, sort_list(sublist))\n  end\n  return output_list\nend",
    "    local output_list = {}\n    for i, v in ipairs(input_list) do\n        table.insert(output_list, table.sort(v))\n    end\n    return output_list\nend",
    "    local output_list = {}\n    for i, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        output_list[i] = sublist\n    end\n    return output_list\nend",
    "  for i = 1, #input_list do\n    table.sort(input_list[i])\n  end\n  return input_list\nend",
    "    for i, sublist in ipairs(input_list) do\n        table.sort(sublist)\n    end\nend",
    "    for i = 1, #input_list do\n        table.sort(input_list[i])\n    end\nend",
    "    local output_list = {}\n    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        table.insert(output_list, sublist)\n    end\n    return output_list\nend",
    "    local output_list = {}\n    for i, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        output_list[i] = sublist\n    end\n    return output_list\nend",
    "    local output_list = {}\n    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        table.insert(output_list, sublist)\n    end\n    return output_list\nend",
    "    local output_list = {}\n    for _, subtable in ipairs(input_list) do\n        table.sort(subtable)\n        table.insert(output_list, subtable)\n    end\n    return output_list\nend",
    "    local output_list = {}\n    for _, sublist in ipairs(input_list) do\n        table.sort(sublist)\n        table.insert(output_list, sublist)\n    end\n    return output_list\nend"
  ]
}