{
  "name": "mbpp_589_perfect_squares",
  "language": "lua",
  "prompt": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if i == i ^ 0.5 ^ 2 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqawkgwua.lua:15: expected: {1, 4, 9, 16, 25}\nactual: {1}\nstack traceback:\n\t/tmp/tmpqawkgwua.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) do\n        squares[#squares + 1] = i * i\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tif math.sqrt(i) % 1 == 0 then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tlocal sqrt = math.sqrt(i)\n\t\tif math.floor(sqrt) == sqrt then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local root = math.sqrt(i)\n        if root == math.floor(root) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local t = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            t[#t + 1] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tif math.sqrt(i) % 1 == 0 then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if math.floor(sqrt) == sqrt then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local result = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local result = {}\n    for i = a, b do\n        if is_perfect_square(i) then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwoqfkd3.lua:5: attempt to call a nil value (global 'is_perfect_square')\nstack traceback:\n\t/tmp/tmpgwoqfkd3.lua:5: in local 'candidate'\n\t/tmp/tmpgwoqfkd3.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local t = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            t[#t + 1] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local t = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            t[#t+1] = i\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if i == i^0.5^2 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ezfjirw.lua:15: expected: {1, 4, 9, 16, 25}\nactual: {1}\nstack traceback:\n\t/tmp/tmp7ezfjirw.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local root = math.sqrt(i)\n    if root == math.floor(root) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) == math.floor(math.sqrt(i)) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local root = math.sqrt(i)\n        if root == math.floor(root) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tif math.sqrt(i) % 1 == 0 then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if i == i ^ 0.5 ^ 2 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqawkgwua.lua:15: expected: {1, 4, 9, 16, 25}\nactual: {1}\nstack traceback:\n\t/tmp/tmpqawkgwua.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i=a,b do\n    local sqrt = math.sqrt(i)\n    if math.floor(sqrt) == sqrt then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local root = math.sqrt(i)\n    if root == math.floor(root) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tlocal sqrt = math.sqrt(i)\n\t\tif sqrt == math.floor(sqrt) then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local root = math.sqrt(i)\n        if root == math.floor(root) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) == math.floor(math.sqrt(i)) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tlocal i = 1\n\twhile a < b do\n\t\tif a == i * i then\n\t\t\ttable.insert(squares, a)\n\t\t\ti = i + 1\n\t\tend\n\t\ta = a + 1\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7z4_mlj5.lua:19: expected: {64, 81, 100}\nactual: {}\nstack traceback:\n\t/tmp/tmp7z4_mlj5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local root = math.sqrt(i)\n    if root == math.floor(root) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if sqrt == math.floor(sqrt) then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tif math.sqrt(i) % 1 == 0 then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if math.floor(sqrt) == sqrt then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  if a < 0 or b < 0 then\n    return nil\n  end\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if i == i ^ 0.5 ^ 2 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeuiv8i6q.lua:15: expected: {1, 4, 9, 16, 25}\nactual: {1}\nstack traceback:\n\t/tmp/tmpeuiv8i6q.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        local sqrt = math.sqrt(i)\n        if math.floor(sqrt) == sqrt then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local t = {}\n  for i = a, b do\n    if i == math.floor(math.sqrt(i)) ^ 2 then\n      t[#t + 1] = i\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    local sqrt = math.sqrt(i)\n    if sqrt == math.floor(sqrt) then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n\tlocal squares = {}\n\tfor i = a, b do\n\t\tif math.sqrt(i) % 1 == 0 then\n\t\t\ttable.insert(squares, i)\n\t\tend\n\tend\n\treturn squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123684,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n  local squares = {}\n  for i = a, b do\n    if math.sqrt(i) % 1 == 0 then\n      table.insert(squares, i)\n    end\n  end\n  return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to find perfect squares between two given numbers.\nlocal function perfect_squares(a, b)\n    local squares = {}\n    for i = a, b do\n        if math.sqrt(i) % 1 == 0 then\n            table.insert(squares, i)\n        end\n    end\n    return squares\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = perfect_squares\n    lu.assertEquals(candidate(1, 30), {1, 4, 9, 16, 25})\n    lu.assertEquals(candidate(50, 100), {64, 81, 100})\n    lu.assertEquals(candidate(100, 200), {100, 121, 144, 169, 196})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027835,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}