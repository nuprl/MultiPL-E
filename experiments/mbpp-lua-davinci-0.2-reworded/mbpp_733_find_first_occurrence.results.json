{
  "name": "mbpp_733_find_first_occurrence",
  "language": "lua",
  "prompt": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ykee6me.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8ykee6me.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6dmah0i.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpf6dmah0i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left = 1\n  local right = #A\n  local result = -1\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      result = mid\n      right = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6d09kge.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk6d09kge.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu291p97z.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpu291p97z.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      local i = m\n      while i > 1 and A[i - 1] == x do\n        i = i - 1\n      end\n      return i\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4z_8tzf.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx4z_8tzf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5j08v2w.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk5j08v2w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclne2js6.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpclne2js6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local lo = 1\n  local hi = #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] < x then\n      lo = mid + 1\n    elseif A[mid] > x then\n      hi = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv4k4tf6.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprv4k4tf6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then return mid end\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug_v0i5h.lua:21: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpug_v0i5h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexexjauj.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpexexjauj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnoh24tdc.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnoh24tdc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local lo, hi = 1, #A\n  while lo <= hi do\n    local mid = math.floor((lo + hi) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        hi = mid - 1\n      end\n    elseif A[mid] < x then\n      lo = mid + 1\n    else\n      hi = mid - 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzazqei6k.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzazqei6k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iuqt15l.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3iuqt15l.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkbr_lvp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjkbr_lvp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnoh24tdc.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnoh24tdc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5j08v2w.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk5j08v2w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0z_ig5l.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb0z_ig5l.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8d2v7yoe.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8d2v7yoe.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if x == A[mid] then\n            result = mid\n            high = mid - 1\n        elseif x < A[mid] then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_edrz52.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5_edrz52.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2fg3mnh.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv2fg3mnh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                right = mid - 1\n            end\n        elseif A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hvayora.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1hvayora.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgn8eguu.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpqgn8eguu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l < r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjtbwdmg.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgjtbwdmg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return low\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw6gjhzw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprw6gjhzw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_o7g1ii.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv_o7g1ii.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce45d1r1.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpce45d1r1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9unmr1e.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpd9unmr1e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n   local l, r = 1, #A\n   while l <= r do\n      local m = math.floor((l + r) / 2)\n      if A[m] < x then\n         l = m + 1\n      else\n         r = m - 1\n      end\n   end\n   if A[l] == x then\n      return l\n   else\n      return nil\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqk3hz0m.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpzqk3hz0m.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu46ojbp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgu46ojbp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l = 1\n    local r = #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuvp6sh6.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpkuvp6sh6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        elseif A[m] > x then\n            r = m - 1\n        else\n            if m == 1 or A[m - 1] < x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe2ahpe0m.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpe2ahpe0m.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x1muj2t.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3x1muj2t.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kc7eit3.lua:20: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3kc7eit3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if x < A[m] then\n            r = m - 1\n        elseif x > A[m] then\n            l = m + 1\n        else\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79hxpufz.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp79hxpufz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9dxz15b.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpq9dxz15b.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local i = 1\n  local j = #A\n  while i <= j do\n    local m = math.floor((i + j) / 2)\n    if A[m] < x then\n      i = m + 1\n    elseif A[m] > x then\n      j = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        j = m - 1\n      end\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7i5ewt5_.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7i5ewt5_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] < x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyoi300r.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpoyoi300r.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = low + math.floor((high - low) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8g7k1ao.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy8g7k1ao.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      right = mid - 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8n2yf8l.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp8n2yf8l.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9szmog8.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm9szmog8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp362s0i0p.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp362s0i0p.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputvp1q0e.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmputvp1q0e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal low = 1\n\tlocal high = #A\n\tlocal result = -1\n\twhile low <= high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif x == A[mid] then\n\t\t\tresult = mid\n\t\t\thigh = mid - 1\n\t\telseif x < A[mid] then\n\t\t\thigh = mid - 1\n\t\telse\n\t\t\tlow = mid + 1\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc44_ve2g.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpc44_ve2g.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6dmah0i.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpf6dmah0i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9szmog8.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpm9szmog8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptggqxjcq.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptggqxjcq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2fg3mnh.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpv2fg3mnh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      end\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevbcnx4f.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpevbcnx4f.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce45d1r1.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpce45d1r1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpseqmio37.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpseqmio37.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexexjauj.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpexexjauj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgusc5sfb.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgusc5sfb.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  if A[left] == x then\n    return left\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wrjfib6.lua:20: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3wrjfib6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  if A[left] == x then\n    return left\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4zs0wqp.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpy4zs0wqp.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vc7a4s8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4vc7a4s8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        else\n            high = mid - 1\n        end\n    end\n    return low\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw6gjhzw.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmprw6gjhzw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                right = mid - 1\n            end\n        elseif A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hvayora.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp1hvayora.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukq19thq.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpukq19thq.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu46ojbp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgu46ojbp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      -- A[mid] == x\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrt88qtg.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpnrt88qtg.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if x < A[mid] then\n      right = mid - 1\n    elseif x > A[mid] then\n      left = mid + 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6nrz2eo.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz6nrz2eo.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] < x then\n            l = m + 1\n        else\n            r = m - 1\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vc7a4s8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4vc7a4s8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kc7eit3.lua:20: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3kc7eit3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telseif A[m] > x then\n\t\t\tr = m - 1\n\t\telse\n\t\t\tif m == 1 or A[m - 1] < x then\n\t\t\t\treturn m\n\t\t\telse\n\t\t\t\tr = m - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ykee6me.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8ykee6me.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal low = 1\n\tlocal high = #A\n\tlocal result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "lua: /tmp/tmpeey0_bp6.lua:15: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      result = mid\n      high = mid - 1\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5j08v2w.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk5j08v2w.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpce45d1r1.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpce45d1r1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    elseif A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uxql6xk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3uxql6xk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local l, r = 1, #A\n    while l <= r do\n        local m = math.floor((l + r) / 2)\n        if A[m] == x then\n            if m == 1 or A[m - 1] ~= x then\n                return m\n            else\n                r = m - 1\n            end\n        elseif A[m] > x then\n            r = m - 1\n        else\n            l = m + 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3z5o49d0.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3z5o49d0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcy7754oz.lua:15: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      left = mid + 1\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_kzqn40.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpu_kzqn40.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpee7ore8_.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpee7ore8_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return -1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjovrzxa8.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjovrzxa8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0xwf_6x.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz0xwf_6x.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79c6fyaa.lua:25: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp79c6fyaa.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] < x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyuka9a1.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpiyuka9a1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal l, r = 1, #A\n\twhile l <= r do\n\t\tlocal m = math.floor((l + r) / 2)\n\t\tif A[m] < x then\n\t\t\tl = m + 1\n\t\telse\n\t\t\tr = m - 1\n\t\tend\n\tend\n\tif A[l] == x then\n\t\treturn l\n\telse\n\t\treturn -1\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvc6bb17f.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvc6bb17f.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9im2qkk.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk9im2qkk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low = 1\n    local high = #A\n    local result = -1\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            result = mid\n            high = mid - 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpueb4zrom.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpueb4zrom.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbo1ztunt.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbo1ztunt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0z_ig5l.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb0z_ig5l.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n\tlocal low, high = 1, #A\n\twhile low <= high do\n\t\tlocal mid = math.floor((low + high) / 2)\n\t\tif A[mid] < x then\n\t\t\tlow = mid + 1\n\t\telseif A[mid] > x then\n\t\t\thigh = mid - 1\n\t\telse\n\t\t\tif mid == 1 or A[mid - 1] < x then\n\t\t\t\treturn mid\n\t\t\telse\n\t\t\t\thigh = mid - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxfmmcvu.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppxfmmcvu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    elseif A[m] > x then\n      r = m - 1\n    else\n      if m == 1 or A[m - 1] < x then\n        return m\n      else\n        r = m - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47np6jso.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp47np6jso.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    else\n      high = mid - 1\n    end\n  end\n  return low\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0z_ig5l.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb0z_ig5l.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6dmah0i.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpf6dmah0i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  local m = 0\n  while l <= r do\n    m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokuoikox.lua:26: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpokuoikox.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] == x then\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            end\n            high = mid - 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            low = mid + 1\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pcoo5jn.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp8pcoo5jn.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    elseif A[mid] > x then\n      right = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        right = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshqan0u4.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpshqan0u4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0glj1bz9.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp0glj1bz9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local left, right = 1, #A\n    while left <= right do\n        local mid = math.floor((left + right) / 2)\n        if A[mid] < x then\n            left = mid + 1\n        else\n            right = mid - 1\n        end\n    end\n    return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptggqxjcq.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmptggqxjcq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l = 1\n  local r = #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2azghq2.lua:19: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr2azghq2.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = left + math.floor((right - left) / 2)\n    if A[mid] == x then\n      if mid == 1 or A[mid - 1] < x then\n        return mid\n      else\n        right = mid - 1\n      end\n    elseif A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx80oj578.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpx80oj578.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low, high = 1, #A\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if A[mid] < x then\n      low = mid + 1\n    elseif A[mid] > x then\n      high = mid - 1\n    else\n      if mid == 1 or A[mid - 1] ~= x then\n        return mid\n      else\n        high = mid - 1\n      end\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdouxdhp.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjdouxdhp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] == x then\n      if m == 1 or A[m - 1] ~= x then\n        return m\n      else\n        r = m - 1\n      end\n    elseif A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljb4gahb.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpljb4gahb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  if A[l] == x then\n    return l\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122558,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukq19thq.lua:22: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpukq19thq.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local left, right = 1, #A\n  while left <= right do\n    local mid = math.floor((left + right) / 2)\n    if A[mid] < x then\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  return left\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027836,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6dmah0i.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpf6dmah0i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local low = 1\n  local high = #A\n  local result = -1\n  while low <= high do\n    local mid = math.floor((low + high) / 2)\n    if x == A[mid] then\n      result = mid\n      high = mid - 1\n    elseif x < A[mid] then\n      high = mid - 1\n    else\n      low = mid + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3t703z0.lua:23: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpz3t703z0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n    local low, high = 1, #A\n    while low <= high do\n        local mid = math.floor((low + high) / 2)\n        if A[mid] < x then\n            low = mid + 1\n        elseif A[mid] > x then\n            high = mid - 1\n        else\n            if mid == 1 or A[mid - 1] ~= x then\n                return mid\n            else\n                high = mid - 1\n            end\n        end\n    end\n    return -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbhpdi1u.lua:24: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpjbhpdi1u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to find the index of the first occurrence of a given number in a sorted table.\nlocal function find_first_occurrence(A, x)\n  local l, r = 1, #A\n  while l <= r do\n    local m = math.floor((l + r) / 2)\n    if A[m] < x then\n      l = m + 1\n    else\n      r = m - 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_first_occurrence\n    lu.assertEquals(candidate({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 1)\n    lu.assertEquals(candidate({2, 3, 5, 5, 6, 6, 8, 9, 9, 9}, 5), 2)\n    lu.assertEquals(candidate({2, 4, 1, 5, 6, 6, 8, 9, 9, 9}, 6), 4)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122557,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpterstdm8.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpterstdm8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}