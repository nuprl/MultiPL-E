{
  "name": "mbpp_787_text_match_three",
  "language": "lua",
  "prompt": "-- Write a function that matches a string that has an a followed by three 'b'.\nlocal function text_match_three(text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = text_match_three\n    lu.assertEquals(candidate('ac'), false)\n    lu.assertEquals(candidate('dc'), false)\n    lu.assertEquals(candidate('abbbba'), true)\n    lu.assertEquals(candidate('caacabbbba'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local pattern = \"a%s*b%s*b%s*b\"\n    return string.match(text, pattern)\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "  if string.match(text, \"a...b\") then\n    print(\"We have a match!\")\n  else\n    print(\"No match here.\")\n  end\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return text:match(\"a%s*b%s*b%s*b\")\nend",
    "    if string.match(text, \"a...b\") then\n        print(\"We have a match!\")\n    else\n        print(\"No match here.\")\n    end\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "  local match = string.match(text, \"a%s*bbb\")\n  if match then\n    return true\n  else\n    return false\n  end\nend",
    "    local pattern = \"a%s*b%s*b%s*b\"\n    local match = string.match(text, pattern)\n    if match then\n        return true\n    else\n        return false\n    end\nend",
    "  return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend",
    "    return string.match(text, \"a%s*b%s*b%s*b\")\nend"
  ]
}