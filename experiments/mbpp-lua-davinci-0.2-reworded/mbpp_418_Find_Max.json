{
  "name": "mbpp_418_Find_Max",
  "language": "lua",
  "prompt": "-- Write a luathon function to find the element of a table having maximum length.\nlocal function Find_Max(lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Find_Max\n    lu.assertEquals(candidate({{'A'}, {'A', 'B'}, {'A', 'B', 'C'}}), {'A', 'B', 'C'})\n    lu.assertEquals(candidate({{1}, {1, 2}, {1, 2, 3}}), {1, 2, 3})\n    lu.assertEquals(candidate({{1, 1}, {1, 2, 3}, {1, 5, 6, 1}}), {1, 5, 6, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local max = 0\n    local max_elem = nil\n    for k, v in pairs(lst) do\n        if type(v) == 'table' then\n            local len = #v\n            if len > max then\n                max = len\n                max_elem = v\n            end\n        end\n    end\n    return max_elem\nend",
    "  local max = 0\n  local max_el = nil\n  for k,v in pairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len > max then\n        max = len\n        max_el = v\n      end\n    end\n  end\n  return max_el\nend",
    "    local max = 0\n    local max_elem = nil\n    for k,v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len > max then\n                max = len\n                max_elem = v\n            end\n        end\n    end\n    return max_elem\nend",
    "  local max = 0\n  local max_elem = nil\n  for k, v in pairs(lst) do\n    if type(v) == 'table' then\n      local len = #v\n      if len > max then\n        max = len\n        max_elem = v\n      end\n    end\n  end\n  return max_elem\nend",
    "\tlocal max = 0\n\tlocal max_elem = nil\n\tfor k, v in pairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len > max then\n\t\t\t\tmax = len\n\t\t\t\tmax_elem = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max_elem\nend",
    "    local max = 0\n    local max_elem = nil\n    for k, v in pairs(lst) do\n        if #v > max then\n            max = #v\n            max_elem = v\n        end\n    end\n    return max_elem\nend",
    "  local max = 0\n  local max_elem = nil\n  for k, v in pairs(lst) do\n    if #v > max then\n      max = #v\n      max_elem = v\n    end\n  end\n  return max_elem\nend",
    "    local max = 0\n    local max_element = nil\n    for k, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len > max then\n                max = len\n                max_element = v\n            end\n        end\n    end\n    return max_element\nend",
    "    local max = 0\n    local max_elem = nil\n    for k, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len > max then\n                max = len\n                max_elem = v\n            end\n        end\n    end\n    return max_elem\nend",
    "\tlocal max = 0\n\tlocal max_elem = nil\n\tfor k,v in pairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len > max then\n\t\t\t\tmax = len\n\t\t\t\tmax_elem = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max_elem\nend",
    "\tlocal max = 0\n\tlocal max_el = nil\n\tfor k, v in pairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len > max then\n\t\t\t\tmax = len\n\t\t\t\tmax_el = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max_el\nend",
    "    local max = 0\n    for k, v in pairs(lst) do\n        if #v > max then\n            max = #v\n        end\n    end\n    return max\nend",
    "    local max = 0\n    local max_elem = nil\n    for k,v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len > max then\n                max = len\n                max_elem = v\n            end\n        end\n    end\n    return max_elem\nend",
    "  local max = 0\n  local max_element = nil\n  for k,v in pairs(lst) do\n    if type(v) == \"table\" then\n      local len = #v\n      if len > max then\n        max = len\n        max_element = v\n      end\n    end\n  end\n  return max_element\nend",
    "\tlocal max = 0\n\tlocal max_element = nil\n\tfor i,v in ipairs(lst) do\n\t\tif type(v) == \"table\" then\n\t\t\tlocal len = #v\n\t\t\tif len > max then\n\t\t\t\tmax = len\n\t\t\t\tmax_element = v\n\t\t\tend\n\t\tend\n\tend\n\treturn max_element\nend",
    "    local max = 0\n    local max_elem = nil\n    for k, v in pairs(lst) do\n        if #v > max then\n            max = #v\n            max_elem = v\n        end\n    end\n    return max_elem\nend",
    "    local max_len = 0\n    local max_el = nil\n    for k, v in pairs(lst) do\n        if #v > max_len then\n            max_len = #v\n            max_el = v\n        end\n    end\n    return max_el\nend",
    "    local max = 0\n    local max_el = nil\n    for _, el in ipairs(lst) do\n        if type(el) == \"table\" then\n            local len = #el\n            if len > max then\n                max = len\n                max_el = el\n            end\n        end\n    end\n    return max_el\nend",
    "    local max = 0\n    for k,v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = Find_Max(v)\n            if len > max then\n                max = len\n            end\n        elseif type(v) == \"string\" then\n            if #v > max then\n                max = #v\n            end\n        end\n    end\n    return max\nend",
    "    local max_len = 0\n    local max_elem\n    for k, v in pairs(lst) do\n        if type(v) == \"table\" then\n            local len = #v\n            if len > max_len then\n                max_len = len\n                max_elem = v\n            end\n        end\n    end\n    return max_elem\nend"
  ]
}