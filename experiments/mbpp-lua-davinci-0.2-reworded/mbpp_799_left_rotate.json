{
  "name": "mbpp_799_left_rotate",
  "language": "lua",
  "prompt": "-- Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nlocal function left_rotate(n, d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = left_rotate\n    lu.assertEquals(candidate(16, 2), 64)\n    lu.assertEquals(candidate(10, 2), 40)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(99, 3), 792)\n    lu.assertEquals(candidate(1, 3), 8)\n    lu.assertEquals(candidate(5, 3), 40)\n    lu.assertEquals(candidate(29, 3), 232)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "    local r = n\n    for i = 1, d do\n        r = bit.lshift(r, 1) + bit.rshift(r, 31)\n    end\n    return r\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "    local d = d % 32\n    local low = bit.lshift(n, d)\n    local high = bit.rshift(n, 32 - d)\n    return bit.bor(low, high)\nend",
    "    local mask = math.pow(2, d) - 1\n    local low = n & mask\n    return (n << d) | (low << (32 - d))\nend",
    "    local low = n % (2^d)\n    local high = math.floor(n / (2^d))\n    return low * (2^(32-d)) + high\nend",
    "  local mask = 0xFFFFFFFF\n  local m = d % 32\n  local l = n << m\n  local r = n >> (32 - m)\n  return (l | r) & mask\nend",
    "  return (n << d) | (n >> (32 - d))\nend",
    "    local left = n << d\n    local right = n >> (32 - d)\n    return left | right\nend",
    "  return bit32.lshift(n, d) + bit32.rshift(n, 32 - d)\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local high = bit.rshift(n, 32 - d)\n    local low = bit.lshift(n, d)\n    return bit.bor(high, low)\nend",
    "  return bit32.lshift(n, d) + bit32.rshift(n, 32 - d)\nend",
    "    local r = n\n    for i = 1, d do\n        local lsb = r % 2\n        r = math.floor(r / 2)\n        r = r + lsb * (2 ^ 31)\n    end\n    return r\nend",
    "  return bit.lshift(n, d) + bit.rshift(n, 32 - d)\nend",
    "    local r = 0\n    for i = 1, d do\n        local lsb = n % 2\n        n = math.floor(n / 2)\n        r = r * 2 + lsb\n    end\n    return r\nend",
    "  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "    return (n << d) | (n >> (32 - d))\nend",
    "  local left = n << d\n  local right = n >> (32 - d)\n  return left | right\nend",
    "  local r = n\n  for i = 1, d do\n    local lsb = r % 2\n    r = math.floor(r / 2)\n    r = r + lsb * (2 ^ 31)\n  end\n  return r\nend"
  ]
}