{
  "name": "mbpp_771_check_expression",
  "language": "lua",
  "prompt": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open[c] then\n\t\t\tstack[#stack + 1] = c\n\t\telseif close[c] then\n\t\t\tlocal last = stack[#stack]\n\t\t\tif pairs[last] == c then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack.pop()\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhsyftvk.lua:7: attempt to call field 'push' (a nil value)\nstack traceback:\n\t/tmp/tmpvhsyftvk.lua:7: in function 'candidate'\n\t/tmp/tmpvhsyftvk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "",
      "stderr": "lua: /tmp/tmpypwvw9la.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local open_bracket = stack[#stack]\n      if bracket_pairs[open_bracket] ~= char then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' or c == ']' or c == '}' then\n      local top = stack:pop()\n      if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyfsou8ti.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpyfsou8ti.lua:3: in function 'candidate'\n\t/tmp/tmpyfsou8ti.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "",
      "stderr": "lua: /tmp/tmpypwvw9la.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if #stack == 0 or stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if #stack == 0 or stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if #stack == 0 or stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open_brackets = {\n\t\t['('] = true,\n\t\t['['] = true,\n\t\t['{'] = true,\n\t}\n\tlocal close_brackets = {\n\t\t[')'] = '(',\n\t\t[']'] = '[',\n\t\t['}'] = '{',\n\t}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack[#stack + 1] = char\n\t\telseif close_brackets[char] then\n\t\t\tif stack[#stack] ~= close_brackets[char] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack.new()\n    for i=1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyw6qm0ye.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpyw6qm0ye.lua:3: in function 'candidate'\n\t/tmp/tmpyw6qm0ye.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxz9vvpwl.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpxz9vvpwl.lua:3: in function 'candidate'\n\t/tmp/tmpxz9vvpwl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack.new()\n  local open_brackets = {['{'] = '}', ['('] = ')', ['['] = ']'}\n  local close_brackets = {['}'] = true, [')'] = true, [']'] = true}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      local top = stack:pop()\n      if open_brackets[top] ~= char then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgcbwuzj.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpmgcbwuzj.lua:3: in function 'candidate'\n\t/tmp/tmpmgcbwuzj.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack[#stack + 1] = char\n\t\telseif close_brackets[char] then\n\t\t\tlocal last_open_bracket = stack[#stack]\n\t\t\tif bracket_pairs[last_open_bracket] == char then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if last == nil or open_to_close[last] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcanrggrr.lua:3: attempt to call global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpcanrggrr.lua:3: in function 'candidate'\n\t/tmp/tmpcanrggrr.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' then\n            if stack.pop(stack) ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop(stack) ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop(stack) ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2za4hl6d.lua:7: attempt to call field 'push' (a nil value)\nstack traceback:\n\t/tmp/tmp2za4hl6d.lua:7: in function 'candidate'\n\t/tmp/tmp2za4hl6d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    local close = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local exp_len = #exp\n  local i = 1\n  while i <= exp_len do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack[#stack + 1] = c\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack[#stack]\n      if top == '(' and c == ')' or top == '{' and c == '}' or top == '[' and c == ']' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open[char] then\n      stack[#stack + 1] = char\n    elseif close[char] then\n      if #stack == 0 then\n        return false\n      else\n        local top = stack[#stack]\n        if pairs[top] == char then\n          stack[#stack] = nil\n        else\n          return false\n        end\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkm6l96m9.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpkm6l96m9.lua:3: in local 'candidate'\n\t/tmp/tmpkm6l96m9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '{' or char == '[' then\n            stack:push(char)\n        elseif char == ')' or char == '}' or char == ']' then\n            local top = stack:pop()\n            if (char == ')' and top ~= '(') or\n               (char == '}' and top ~= '{') or\n               (char == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhwrqe6k.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmplhwrqe6k.lua:3: in local 'candidate'\n\t/tmp/tmplhwrqe6k.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local opening = {['('] = true, ['{'] = true, ['['] = true}\n    local closing = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if opening[char] then\n            stack:push(char)\n        elseif closing[char] then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3wvqsyje.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp3wvqsyje.lua:3: in local 'candidate'\n\t/tmp/tmp3wvqsyje.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal i = 1\n\twhile i <= #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif c == ')' and top == '(' or c == ']' and top == '[' or c == '}' and top == '{' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkm6l96m9.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpkm6l96m9.lua:3: in local 'candidate'\n\t/tmp/tmpkm6l96m9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if top ~= close[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local last = table.remove(stack)\n      if bracket_pairs[last] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open[char] then\n      stack[#stack + 1] = char\n    elseif close[char] then\n      if stack[#stack] == close[char] then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop(stack)\n      if top == nil then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  if stack.size(stack) > 0 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfbzhv5jt.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpfbzhv5jt.lua:7: in local 'candidate'\n\t/tmp/tmpfbzhv5jt.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop(stack)\n      if top == nil then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  if stack.is_empty(stack) then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcpgf3mq.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpkcpgf3mq.lua:7: in local 'candidate'\n\t/tmp/tmpkcpgf3mq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local ch = exp:sub(i, i)\n        if ch == '(' or ch == '[' or ch == '{' then\n            stack:push(ch)\n        elseif ch == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif ch == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif ch == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0pdr4ly.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmpd0pdr4ly.lua:7: in local 'candidate'\n\t/tmp/tmpd0pdr4ly.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if not ((c == ')' and top == '(') or (c == '}' and top == '{') or (c == ']' and top == '[')) then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnyakmte.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpnnyakmte.lua:3: in local 'candidate'\n\t/tmp/tmpnnyakmte.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack:pop()\n      if top == nil then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  if stack:is_empty() then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2n8f856.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpw2n8f856.lua:3: in local 'candidate'\n\t/tmp/tmpw2n8f856.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n    local close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n    local brackets_map = {[')'] = '(', [']'] = '[', ['}'] = '{'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if top ~= brackets_map[char] then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzdy1goz.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmppzdy1goz.lua:3: in local 'candidate'\n\t/tmp/tmppzdy1goz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    if stack:is_empty() then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptyxn_9l7.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmptyxn_9l7.lua:7: in local 'candidate'\n\t/tmp/tmptyxn_9l7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmp0cu7j.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpdmp0cu7j.lua:3: in local 'candidate'\n\t/tmp/tmpdmp0cu7j.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = true,\n    ['}'] = true,\n    [']'] = true\n  }\n  local bracket_pairs = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local last_open_bracket = table.remove(stack)\n      if bracket_pairs[last_open_bracket] ~= char then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if bracket_pairs[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local top = 0\n    for i = 1, #exp do\n        if exp[i] == '(' or exp[i] == '[' or exp[i] == '{' then\n            top = top + 1\n            stack[top] = exp[i]\n        elseif exp[i] == ')' or exp[i] == ']' or exp[i] == '}' then\n            if top == 0 then\n                return false\n            end\n            if exp[i] == ')' and stack[top] ~= '(' then\n                return false\n            elseif exp[i] == ']' and stack[top] ~= '[' then\n                return false\n            elseif exp[i] == '}' and stack[top] ~= '{' then\n                return false\n            end\n            top = top - 1\n        end\n    end\n    if top == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdszft4qh.lua:34: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdszft4qh.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    if stack:is_empty() then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvnot28y0.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpvnot28y0.lua:3: in local 'candidate'\n\t/tmp/tmpvnot28y0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = table.remove(stack)\n      if top ~= close_brackets[c] then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' then\n            if stack.pop(stack) ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop(stack) ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop(stack) ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2za4hl6d.lua:7: attempt to call field 'push' (a nil value)\nstack traceback:\n\t/tmp/tmp2za4hl6d.lua:7: in function 'candidate'\n\t/tmp/tmp2za4hl6d.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack[#stack + 1] = char\n        elseif close_brackets[char] then\n            if pairs[stack[#stack]] == char then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3u3vljw0.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i=1,#exp do\n    local c = exp:sub(i,i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack+1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local top = 0\n  local i = 1\n  local len = string.len(exp)\n  while i <= len do\n    local c = string.sub(exp, i, i)\n    if c == '(' or c == '[' or c == '{' then\n      top = top + 1\n      stack[top] = c\n    elseif c == ')' or c == ']' or c == '}' then\n      if top == 0 then\n        return false\n      end\n      local top_c = stack[top]\n      if (c == ')' and top_c == '(') or (c == ']' and top_c == '[') or (c == '}' and top_c == '{') then\n        top = top - 1\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  if top == 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if stack.is_empty(stack) then\n        return false\n      end\n      local top = stack.pop(stack)\n      if not ((c == ')' and top == '(') or (c == '}' and top == '{') or (c == ']' and top == '[')) then\n        return false\n      end\n    end\n  end\n  return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73qxvfmc.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmp73qxvfmc.lua:7: in local 'candidate'\n\t/tmp/tmp73qxvfmc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack.push(stack, c)\n    elseif c == ')' then\n      if stack.pop(stack) ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack.pop(stack) ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack.pop(stack) ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppuys2c1.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpppuys2c1.lua:7: in local 'candidate'\n\t/tmp/tmpppuys2c1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if bracket_pairs[top] ~= char then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjqp21z9.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpsjqp21z9.lua:3: in local 'candidate'\n\t/tmp/tmpsjqp21z9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local match = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if match[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            local last = stack[#stack]\n            if last and bracket_pairs[last] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if bracket_pairs[last] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open[c] then\n\t\t\tstack[#stack + 1] = c\n\t\telseif close[c] then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif pairs[top] == c then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '[' or char == '{' then\n            table.insert(stack, char)\n        elseif char == ')' or char == ']' or char == '}' then\n            local top = table.remove(stack)\n            if top == nil then\n                return false\n            end\n            if char == ')' and top ~= '(' then\n                return false\n            elseif char == ']' and top ~= '[' then\n                return false\n            elseif char == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    if #stack ~= 0 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if char == ')' and top ~= '(' then\n                return false\n            elseif char == '}' and top ~= '{' then\n                return false\n            elseif char == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqws0vuev.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpqws0vuev.lua:3: in local 'candidate'\n\t/tmp/tmpqws0vuev.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      local top = stack[#stack]\n      if pairs[top] == c then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '{' or char == '[' then\n      stack:push(char)\n    elseif char == ')' or char == '}' or char == ']' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if (top == '(' and char ~= ')') or (top == '{' and char ~= '}') or (top == '[' and char ~= ']') then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjl3elsa.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpxjl3elsa.lua:3: in local 'candidate'\n\t/tmp/tmpxjl3elsa.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_close_brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack:push(c)\n        elseif close_brackets[c] then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if open_close_brackets[top] ~= c then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zw5cj9g.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp4zw5cj9g.lua:3: in local 'candidate'\n\t/tmp/tmp4zw5cj9g.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = Stack:new()\n\tlocal open_brackets = {\n\t\t['('] = true,\n\t\t['{'] = true,\n\t\t['['] = true,\n\t}\n\tlocal close_brackets = {\n\t\t[')'] = '(',\n\t\t['}'] = '{',\n\t\t[']'] = '[',\n\t}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open_brackets[c] then\n\t\t\tstack:push(c)\n\t\telseif close_brackets[c] then\n\t\t\tif stack:pop() ~= close_brackets[c] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7693dfl3.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7693dfl3.lua:3: in local 'candidate'\n\t/tmp/tmp7693dfl3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop()\n      if not top then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7m8wgnw.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmph7m8wgnw.lua:7: in local 'candidate'\n\t/tmp/tmph7m8wgnw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack:push(c)\n    elseif close[c] then\n      local top = stack:pop()\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7wvthxb.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpk7wvthxb.lua:3: in local 'candidate'\n\t/tmp/tmpk7wvthxb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local brackets_map = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack:push(c)\n        elseif close_brackets[c] then\n            local top = stack:pop()\n            if brackets_map[top] ~= c then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0rgpxgz.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpc0rgpxgz.lua:3: in local 'candidate'\n\t/tmp/tmpc0rgpxgz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {[\"(\"] = true, [\"{\"] = true, [\"[\"] = true}\n  local close = {[\"(\"] = \")\", [\"{\"] = \"}\", [\"[\"] = \"]\"}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      table.insert(stack, c)\n    elseif close[stack[#stack]] == c then\n      table.remove(stack)\n    else\n      return false\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local exp_len = #exp\n    local i = 1\n    while i <= exp_len do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack[#stack + 1] = c\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack[#stack]\n            if top == '(' and c == ')' or top == '[' and c == ']' or top == '{' and c == '}' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            stack[#stack] = nil\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(stack, c)\n        elseif c == ')' then\n            if stack.pop(stack) ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop(stack) ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop(stack) ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjvwr1v6.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpsjvwr1v6.lua:7: in local 'candidate'\n\t/tmp/tmpsjvwr1v6.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      local top = stack[#stack]\n      if top and pairs[top] == char then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhjjtglx.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpzhjjtglx.lua:3: in local 'candidate'\n\t/tmp/tmpzhjjtglx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      table.insert(stack, c)\n    elseif close[c] then\n      local top = table.remove(stack)\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            if stack.pop(stack) ~= c then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgd2amugo.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpgd2amugo.lua:7: in local 'candidate'\n\t/tmp/tmpgd2amugo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack:pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyrv1pnm8.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpyrv1pnm8.lua:3: in local 'candidate'\n\t/tmp/tmpyrv1pnm8.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack[#stack + 1] = c\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack[#stack]\n            if (top == '(' and c == ')') or (top == '{' and c == '}') or (top == '[' and c == ']') then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3u3vljw0.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = table.remove(stack)\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmpduffj6dc.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            local top = stack[#stack]\n            if top and open_to_close[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' or c == ']' or c == '}' then\n      if stack:is_empty() then\n        return false\n      end\n      local top = stack:pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi5j9mty5.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpi5j9mty5.lua:3: in local 'candidate'\n\t/tmp/tmpi5j9mty5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      local top = stack:pop()\n      if top ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu79ccecz.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpu79ccecz.lua:3: in local 'candidate'\n\t/tmp/tmpu79ccecz.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      if stack[#stack] ~= close_brackets[c] then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = Stack()\n\tlocal open = {\n\t\t['('] = true,\n\t\t['{'] = true,\n\t\t['['] = true\n\t}\n\tlocal close = {\n\t\t[')'] = true,\n\t\t['}'] = true,\n\t\t[']'] = true\n\t}\n\tlocal pairs = {\n\t\t['('] = ')',\n\t\t['{'] = '}',\n\t\t['['] = ']'\n\t}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open[char] then\n\t\t\tstack:push(char)\n\t\telseif close[char] then\n\t\t\tif stack:is_empty() then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack:pop()\n\t\t\tif pairs[top] ~= char then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nwxwi9n.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp8nwxwi9n.lua:3: in local 'candidate'\n\t/tmp/tmp8nwxwi9n.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      table.insert(stack, c)\n    elseif close_brackets[c] then\n      local last = table.remove(stack)\n      if pairs[last] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo3pqmjsi.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal top = 0\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\ttop = top + 1\n\t\t\tstack[top] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tif top == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal t = stack[top]\n\t\t\ttop = top - 1\n\t\t\tif (c == ')' and t ~= '(') or (c == ']' and t ~= '[') or (c == '}' and t ~= '{') then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn top == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or\n                (c == '}' and top ~= '{') or\n                (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zkvfll7.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmp3zkvfll7.lua:7: in local 'candidate'\n\t/tmp/tmp3zkvfll7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = stack[#stack]\n            if top ~= close[c] then\n                return false\n            end\n            table.remove(stack)\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\ttable.insert(stack, char)\n\t\telseif close_brackets[char] then\n\t\t\tlocal top = table.remove(stack)\n\t\t\tif top ~= close_brackets[char] then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local last = stack[#stack]\n            if open_to_close[last] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(stack, c)\n        elseif c == ')' then\n            if stack.pop(stack) ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop(stack) ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop(stack) ~= '{' then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp96m44c22.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmp96m44c22.lua:7: in local 'candidate'\n\t/tmp/tmp96m44c22.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "",
      "stderr": "lua: /tmp/tmpypwvw9la.lua:16: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      stack[#stack] = nil\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' then\n      if stack.pop() ~= '(' then\n        return false\n      end\n    elseif c == '}' then\n      if stack.pop() ~= '{' then\n        return false\n      end\n    elseif c == ']' then\n      if stack.pop() ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqft3zwso.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpqft3zwso.lua:7: in local 'candidate'\n\t/tmp/tmpqft3zwso.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack.is_empty() then\n                return false\n            end\n            local top = stack.pop()\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiwc98eok.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpiwc98eok.lua:7: in local 'candidate'\n\t/tmp/tmpiwc98eok.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n  local close_brackets = {[')'] = '(', [']'] = '[', ['}'] = '{'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      if stack[#stack] == close_brackets[char] then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5n2vch0.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmpr5n2vch0.lua:7: in local 'candidate'\n\t/tmp/tmpr5n2vch0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(c)\n        elseif c == ')' then\n            if stack.pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkqzswoq.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmplkqzswoq.lua:7: in local 'candidate'\n\t/tmp/tmplkqzswoq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == ']' or c == '}' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif (c == ')' and top == '(') or (c == ']' and top == '[') or (c == '}' and top == '{') then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            table.insert(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = table.remove(stack)\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n        i = i + 1\n    end\n    if #stack == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack.pop(stack)\n            if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsg8j030i.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpsg8j030i.lua:7: in local 'candidate'\n\t/tmp/tmpsg8j030i.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '{' or c == '[' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' or c == '}' or c == ']' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif (c == ')' and top == '(') or (c == '}' and top == '{') or (c == ']' and top == '[') then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true,\n    }\n    local close_brackets = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '[',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if top == close_brackets[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0rb0fui.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpz0rb0fui.lua:3: in local 'candidate'\n\t/tmp/tmpz0rb0fui.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack.push(stack, c)\n    elseif c == ')' then\n      if stack.pop(stack) ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack.pop(stack) ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack.pop(stack) ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppuys2c1.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpppuys2c1.lua:7: in local 'candidate'\n\t/tmp/tmpppuys2c1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack.push(stack, c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack.pop(stack)\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmport9s2ez.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmport9s2ez.lua:7: in local 'candidate'\n\t/tmp/tmport9s2ez.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] ~= c then\n                return false\n            end\n            stack[#stack] = nil\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      table.insert(stack, c)\n    elseif close[c] then\n      local top = table.remove(stack)\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack:pop()\n      if top == '(' and c ~= ')' then\n        return false\n      elseif top == '{' and c ~= '}' then\n        return false\n      elseif top == '[' and c ~= ']' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_mlxzpj.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpi_mlxzpj.lua:3: in local 'candidate'\n\t/tmp/tmpi_mlxzpj.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            table.insert(stack, c)\n        elseif c == ')' then\n            if stack[#stack] == '(' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == '}' then\n            if stack[#stack] == '{' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == ']' then\n            if stack[#stack] == '[' then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmp0cu7j.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpdmp0cu7j.lua:3: in local 'candidate'\n\t/tmp/tmpdmp0cu7j.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == \"(\" or c == \"{\" or c == \"[\" then\n\t\t\ttable.insert(stack, c)\n\t\telseif c == \")\" or c == \"}\" or c == \"]\" then\n\t\t\tlocal top = table.remove(stack)\n\t\t\tif (c == \")\" and top ~= \"(\") or (c == \"}\" and top ~= \"{\") or (c == \"]\" and top ~= \"[\") then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop()\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaoww1r_6.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpaoww1r_6.lua:7: in local 'candidate'\n\t/tmp/tmpaoww1r_6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3u3vljw0.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local match = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            stack[#stack] = nil\n            if match[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local exp_len = #exp\n    local i = 1\n    while i <= exp_len do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack[#stack + 1] = c\n        elseif c == ')' then\n            if #stack == 0 or stack[#stack] ~= '(' then\n                return false\n            end\n            stack[#stack] = nil\n        elseif c == ']' then\n            if #stack == 0 or stack[#stack] ~= '[' then\n                return false\n            end\n            stack[#stack] = nil\n        elseif c == '}' then\n            if #stack == 0 or stack[#stack] ~= '{' then\n                return false\n            end\n            stack[#stack] = nil\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack.new()\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack:push(c)\n    elseif close[c] then\n      local top = stack:pop()\n      if not top or not (open[top] and close[c] and top:byte() + 1 == c:byte()) then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiiuztyhq.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpiiuztyhq.lua:3: in local 'candidate'\n\t/tmp/tmpiiuztyhq.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top == '(' and c == ')' or top == '{' and c == '}' or top == '[' and c == ']' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0drtywmt.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmp0drtywmt.lua:7: in local 'candidate'\n\t/tmp/tmp0drtywmt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '[' or char == '{' then\n            stack.push(stack, char)\n        elseif char == ')' or char == ']' or char == '}' then\n            local top = stack.pop(stack)\n            if top == nil then\n                return false\n            end\n            if (char == ')' and top ~= '(') or (char == ']' and top ~= '[') or (char == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpphqwj2rx.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpphqwj2rx.lua:7: in local 'candidate'\n\t/tmp/tmpphqwj2rx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      stack[#stack] = nil\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      table.insert(stack, c)\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if brackets[top] ~= char then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzx9cz81u.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpzx9cz81u.lua:3: in local 'candidate'\n\t/tmp/tmpzx9cz81u.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local i = 1\n    while i <= #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = table.remove(stack)\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr5n2vch0.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmpr5n2vch0.lua:7: in local 'candidate'\n\t/tmp/tmpr5n2vch0.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif c == '(' or c == '[' or c == '{' then\n\t\t\tstack[#stack + 1] = c\n\t\telseif c == ')' then\n\t\t\tif stack[#stack] == '(' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif c == ']' then\n\t\t\tif stack[#stack] == '[' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif c == '}' then\n\t\t\tif stack[#stack] == '{' then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      table.insert(stack, c)\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = table.remove(stack)\n      if pairs[top] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true,\n  }\n  local close = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '[',\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      table.insert(stack, c)\n    elseif close[c] then\n      local top = table.remove(stack)\n      if top ~= close[c] then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = Stack()\n\tlocal open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n\tlocal close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open_brackets[c] then\n\t\t\tstack:push(c)\n\t\telseif close_brackets[c] then\n\t\t\tlocal top = stack:pop()\n\t\t\tif not top or c ~= ')' and c ~= ']' and c ~= '}' then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0n8ixsa.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpw0n8ixsa.lua:3: in local 'candidate'\n\t/tmp/tmpw0n8ixsa.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local exp_len = #exp\n  local i = 1\n  local top = 0\n  while i <= exp_len do\n    if exp[i] == '(' or exp[i] == '[' or exp[i] == '{' then\n      top = top + 1\n      stack[top] = exp[i]\n    elseif exp[i] == ')' or exp[i] == ']' or exp[i] == '}' then\n      if top == 0 then\n        return false\n      else\n        if exp[i] == ')' and stack[top] == '(' then\n          top = top - 1\n        elseif exp[i] == ']' and stack[top] == '[' then\n          top = top - 1\n        elseif exp[i] == '}' and stack[top] == '{' then\n          top = top - 1\n        else\n          return false\n        end\n      end\n    end\n    i = i + 1\n  end\n  if top == 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpansryo_g.lua:39: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpansryo_g.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local top = 0\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      top = top + 1\n      stack[top] = c\n    elseif c == ')' or c == ']' or c == '}' then\n      if top == 0 then\n        return false\n      end\n      local top_c = stack[top]\n      if (top_c == '(' and c == ')') or (top_c == '[' and c == ']') or (top_c == '{' and c == '}') then\n        top = top - 1\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  if top == 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      table.insert(stack, c)\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        table.remove(stack)\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        table.remove(stack)\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if #stack == 0 or stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if #stack == 0 or stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if #stack == 0 or stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '{' or char == '[' then\n      stack:push(char)\n    elseif char == ')' or char == '}' or char == ']' then\n      local top = stack:pop()\n      if not top then\n        return false\n      end\n      if char == ')' and top ~= '(' then\n        return false\n      elseif char == '}' and top ~= '{' then\n        return false\n      elseif char == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmirsnffh.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpmirsnffh.lua:3: in local 'candidate'\n\t/tmp/tmpmirsnffh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            table.insert(stack, c)\n        elseif close[c] then\n            local top = table.remove(stack)\n            if pairs[top] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true,\n    }\n    local close_brackets = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '[',\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack[#stack + 1] = char\n        elseif close_brackets[char] then\n            if stack[#stack] == close_brackets[char] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyv15m5l.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpgyv15m5l.lua:3: in local 'candidate'\n\t/tmp/tmpgyv15m5l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local top = 0\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      top = top + 1\n      stack[top] = c\n    elseif c == ')' or c == ']' or c == '}' then\n      if top == 0 then\n        return false\n      end\n      if (c == ')' and stack[top] == '(') or\n         (c == ']' and stack[top] == '[') or\n         (c == '}' and stack[top] == '{') then\n        top = top - 1\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return top == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            stack:push(char)\n        elseif close_brackets[char] then\n            local top = stack:pop()\n            if open_to_close[top] ~= char then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v7loah2.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp0v7loah2.lua:3: in local 'candidate'\n\t/tmp/tmp0v7loah2.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then return false end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then return false end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then return false end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpifz0y0i7.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpifz0y0i7.lua:3: in local 'candidate'\n\t/tmp/tmpifz0y0i7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyv15m5l.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpgyv15m5l.lua:3: in local 'candidate'\n\t/tmp/tmpgyv15m5l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        ['{'] = true,\n        ['('] = true,\n        ['['] = true,\n    }\n    local close_brackets = {\n        ['}'] = '{',\n        [')'] = '(',\n        [']'] = '[',\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local top = table.remove(stack)\n            if top ~= close_brackets[c] then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif char == '(' or char == '[' or char == '{' then\n\t\t\tstack[#stack + 1] = char\n\t\telseif char == ')' or char == ']' or char == '}' then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal top = stack[#stack]\n\t\t\tif (top == '(' and char == ')') or (top == '[' and char == ']') or (top == '{' and char == '}') then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvvq23w8z.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmpvvq23w8z.lua:7: in local 'candidate'\n\t/tmp/tmpvvq23w8z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            if stack[#stack] == close_brackets[c] then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n\tlocal stack = {}\n\tlocal open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n\tlocal close_brackets = {[')'] = true, [']'] = true, ['}'] = true}\n\tlocal open_to_close = {['('] = ')', ['['] = ']', ['{'] = '}'}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open_brackets[c] then\n\t\t\tstack[#stack + 1] = c\n\t\telseif close_brackets[c] then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal last = stack[#stack]\n\t\t\tif open_to_close[last] ~= c then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        [\"(\"] = true,\n        [\"{\"] = true,\n        [\"[\"] = true\n    }\n    local close_brackets = {\n        [\")\"] = \"(\",\n        [\"}\"] = \"{\",\n        [\"]\"] = \"[\"\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            if #stack == 0 then\n                return false\n            end\n            local top = table.remove(stack)\n            if top ~= close_brackets[char] then\n                return false\n            end\n        end\n    end\n    if #stack == 0 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9f28wcq.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpt9f28wcq.lua:3: in local 'candidate'\n\t/tmp/tmpt9f28wcq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {\n    ['('] = ')',\n    ['['] = ']',\n    ['{'] = '}',\n  }\n  local close_brackets = {\n    [')'] = true,\n    [']'] = true,\n    ['}'] = true,\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      local open_bracket = table.remove(stack)\n      if open_brackets[open_bracket] ~= c then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i=1,#exp do\n        local c = exp:sub(i,i)\n        if c == \"(\" or c == \"{\" or c == \"[\" then\n            stack.push(stack, c)\n        elseif c == \")\" or c == \"}\" or c == \"]\" then\n            local top = stack.pop(stack)\n            if top == nil then\n                return false\n            end\n            if c == \")\" and top ~= \"(\" then\n                return false\n            elseif c == \"}\" and top ~= \"{\" then\n                return false\n            elseif c == \"]\" and top ~= \"[\" then\n                return false\n            end\n        end\n    end\n    if stack.size(stack) == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nry4uu1.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmp3nry4uu1.lua:7: in local 'candidate'\n\t/tmp/tmp3nry4uu1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i=1,#exp do\n        local c = exp:sub(i,i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqz3efhyg.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpqz3efhyg.lua:3: in local 'candidate'\n\t/tmp/tmpqz3efhyg.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    if stack:is_empty() then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp87b1w03.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpp87b1w03.lua:3: in local 'candidate'\n\t/tmp/tmpp87b1w03.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local exp_len = #exp\n  local i = 1\n  while i <= exp_len do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' or c == ']' or c == '}' then\n      local top = stack[#stack]\n      if top == '(' and c == ')' or top == '[' and c == ']' or top == '{' and c == '}' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n    i = i + 1\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        [\"(\"] = true,\n        [\"[\"] = true,\n        [\"{\"] = true\n    }\n    local close_brackets = {\n        [\")\"] = \"(\",\n        [\"]\"] = \"[\",\n        [\"}\"] = \"{\"\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack[#stack + 1] = c\n        elseif close_brackets[c] then\n            if stack[#stack] == close_brackets[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' then\n            if stack[#stack] == '(' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == ']' then\n            if stack[#stack] == '[' then\n                table.remove(stack)\n            else\n                return false\n            end\n        elseif c == '}' then\n            if stack[#stack] == '{' then\n                table.remove(stack)\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {['('] = true, ['['] = true, ['{'] = true}\n    local close_brackets = {[')'] = '(', [']'] = '[', ['}'] = '{'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            if #stack == 0 or stack[#stack] ~= close_brackets[c] then\n                return false\n            end\n            table.remove(stack)\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      local top = stack[#stack]\n      if top and pairs[top] == c then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local brackets = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local ch = exp:sub(i, i)\n        if open_brackets[ch] then\n            stack:push(ch)\n        elseif close_brackets[ch] then\n            if brackets[stack:peek()] == ch then\n                stack:pop()\n            else\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8xvf6s6.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpd8xvf6s6.lua:3: in local 'candidate'\n\t/tmp/tmpd8xvf6s6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9vu4ghl.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmpo9vu4ghl.lua:7: in local 'candidate'\n\t/tmp/tmpo9vu4ghl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if char == '(' or char == '{' or char == '[' then\n            stack:push(char)\n        elseif char == ')' or char == '}' or char == ']' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if char == ')' and top ~= '(' then\n                return false\n            elseif char == '}' and top ~= '{' then\n                return false\n            elseif char == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfkqsmnle.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpfkqsmnle.lua:3: in local 'candidate'\n\t/tmp/tmpfkqsmnle.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if stack[#stack] == close[c] then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack:pop()\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yyz_jwh.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp3yyz_jwh.lua:3: in local 'candidate'\n\t/tmp/tmp3yyz_jwh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0kgatq3y.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = Stack()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6egd43y.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpt6egd43y.lua:3: in local 'candidate'\n\t/tmp/tmpt6egd43y.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {\n    ['('] = true,\n    ['{'] = true,\n    ['['] = true\n  }\n  local close_brackets = {\n    [')'] = '(',\n    ['}'] = '{',\n    [']'] = '['\n  }\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      table.insert(stack, char)\n    elseif close_brackets[char] then\n      local top = table.remove(stack)\n      if top ~= close_brackets[char] then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] ~= char then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            stack:push(c)\n        elseif close_brackets[c] then\n            if stack:is_empty() then\n                return false\n            end\n            local top = stack:pop()\n            if open_to_close[top] ~= c then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_mcm34f.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpl_mcm34f.lua:3: in local 'candidate'\n\t/tmp/tmpl_mcm34f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        else\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            end\n            if c == ']' and top ~= '[' then\n                return false\n            end\n            if c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9jzml8o.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpy9jzml8o.lua:3: in local 'candidate'\n\t/tmp/tmpy9jzml8o.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(stack, c)\n    elseif c == ')' or c == '}' or c == ']' then\n      local top = stack.pop(stack)\n      if top == nil then\n        return false\n      end\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp66lfx65a.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmp66lfx65a.lua:7: in local 'candidate'\n\t/tmp/tmp66lfx65a.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top and pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local open_brackets = {\n        ['('] = true,\n        ['{'] = true,\n        ['['] = true\n    }\n    local close_brackets = {\n        [')'] = true,\n        ['}'] = true,\n        [']'] = true\n    }\n    local open_to_close = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    for i = 1, #exp do\n        local char = exp:sub(i, i)\n        if open_brackets[char] then\n            table.insert(stack, char)\n        elseif close_brackets[char] then\n            local top = table.remove(stack)\n            if open_to_close[top] ~= char then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local open_close_brackets = {\n    ['('] = ')',\n    ['{'] = '}',\n    ['['] = ']'\n  }\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open_brackets[c] then\n      stack[#stack + 1] = c\n    elseif close_brackets[c] then\n      local last_open_bracket = stack[#stack]\n      if last_open_bracket and open_close_brackets[last_open_bracket] == c then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if top == nil then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnv2qfqep.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpnv2qfqep.lua:3: in local 'candidate'\n\t/tmp/tmpnv2qfqep.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local i = 1\n  while i <= #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      table.insert(stack, c)\n    elseif c == ')' or c == ']' or c == '}' then\n      if #stack == 0 then\n        return false\n      end\n      local top = table.remove(stack)\n      if c == ')' and top ~= '(' then\n        return false\n      elseif c == ']' and top ~= '[' then\n        return false\n      elseif c == '}' and top ~= '{' then\n        return false\n      end\n    end\n    i = i + 1\n  end\n  if #stack == 0 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local exp_len = #exp\n    local i = 1\n    while i <= exp_len do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            table.insert(stack, c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = table.remove(stack)\n            if top == nil then\n                return false\n            end\n            if (top == '(' and c ~= ')') or (top == '[' and c ~= ']') or (top == '{' and c ~= '}') then\n                return false\n            end\n        end\n        i = i + 1\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack.pop(stack)\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8e2hbb7r.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmp8e2hbb7r.lua:7: in local 'candidate'\n\t/tmp/tmp8e2hbb7r.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    local top = 0\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "lua: /tmp/tmpons008vv.lua:16: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if char == '(' or char == '[' or char == '{' then\n      stack.push(stack, char)\n    elseif char == ')' then\n      if stack.pop(stack) ~= '(' then\n        return false\n      end\n    elseif char == ']' then\n      if stack.pop(stack) ~= '[' then\n        return false\n      end\n    elseif char == '}' then\n      if stack.pop(stack) ~= '{' then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdt0q7u5j.lua:7: attempt to call a nil value (field 'push')\nstack traceback:\n\t/tmp/tmpdt0q7u5j.lua:7: in local 'candidate'\n\t/tmp/tmpdt0q7u5j.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n  local stack = {}\n  local open = {['('] = true, ['{'] = true, ['['] = true}\n  local close = {[')'] = true, ['}'] = true, [']'] = true}\n  local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if open[c] then\n      stack[#stack + 1] = c\n    elseif close[c] then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack[#stack]\n      if pairs[top] ~= c then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027864,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxru0s2c.lua:3: attempt to index global 'Stack' (a nil value)\nstack traceback:\n\t/tmp/tmpdxru0s2c.lua:3: in function 'candidate'\n\t/tmp/tmpdxru0s2c.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack:push(c)\n        elseif c == ')' or c == '}' or c == ']' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23i07lvz.lua:3: attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp23i07lvz.lua:3: in local 'candidate'\n\t/tmp/tmp23i07lvz.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0rb0fui.lua:3: attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpz0rb0fui.lua:3: in local 'candidate'\n\t/tmp/tmpz0rb0fui.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack[#stack + 1] = c\n        elseif c == ')' then\n            if stack[#stack] == '(' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        elseif c == ']' then\n            if stack[#stack] == '[' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        elseif c == '}' then\n            if stack[#stack] == '{' then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666122795,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ffob50.lua:7: attempt to call a nil value (method 'push')\nstack traceback:\n\t/tmp/tmps2ffob50.lua:7: in local 'candidate'\n\t/tmp/tmps2ffob50.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}