{
  "name": "mbpp_131_reverse_vowels",
  "language": "lua",
  "prompt": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzje3usq6.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzje3usq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str2 = str2 .. char\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_3iiy9y.lua:8: attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmpq_3iiy9y.lua:8: in function 'candidate'\n\t/tmp/tmpq_3iiy9y.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92bzu2r3.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp92bzu2r3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jil4yyy.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp4jil4yyy.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local count = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2[count] = str1:sub(i, i)\n      count = count + 1\n    end\n  end\n  count = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3[i] = str2[#str2 - count + 1]\n      count = count + 1\n    else\n      str3[i] = str1:sub(i, i)\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8j0nfwe.lua:29: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpr8j0nfwe.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {'a','e','i','o','u'}\n\tlocal str2 = ''\n\tlocal str3 = ''\n\tfor i=1,#str1 do\n\t\tif table.indexof(vowels,str1:sub(i,i)) then\n\t\t\tstr2 = str2..str1:sub(i,i)\n\t\telse\n\t\t\tstr3 = str3..str1:sub(i,i)\n\t\tend\n\tend\n\tstr2 = str2:reverse()\n\tfor i=1,#str1 do\n\t\tif table.indexof(vowels,str1:sub(i,i)) then\n\t\t\tstr3 = str3..str2:sub(1,1)\n\t\t\tstr2 = str2:sub(2)\n\t\tend\n\tend\n\treturn str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprhe_yg9o.lua:7: attempt to call field 'indexof' (a nil value)\nstack traceback:\n\t/tmp/tmprhe_yg9o.lua:7: in function 'candidate'\n\t/tmp/tmprhe_yg9o.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[j] = str1:sub(i, i)\n            j = j + 1\n        end\n    end\n    j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3[i] = str2[#str2 - j + 1]\n            j = j + 1\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4s7b2z8.lua:29: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpl4s7b2z8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local str3 = \"\"\n  local str4 = \"\"\n  local str5 = \"\"\n  local str6 = \"\"\n  local str7 = \"\"\n  local str8 = \"\"\n  local str9 = \"\"\n  local str10 = \"\"\n  local str11 = \"\"\n  local str12 = \"\"\n  local str13 = \"\"\n  local str14 = \"\"\n  local str15 = \"\"\n  local str16 = \"\"\n  local str17 = \"\"\n  local str18 = \"\"\n  local str19 = \"\"\n  local str20 = \"\"\n  local str21 = \"\"\n  local str22 = \"\"\n  local str23 = \"\"\n  local str24 = \"\"\n  local str25 = \"\"\n  local str26 = \"\"\n  local str27 = \"\"\n  local str28 = \"\"\n  local str29 = \"\"\n  local str30 = \"\"\n  local str31 = \"\"\n  local str32 = \"\"\n  local str33 = \"\"\n  local str34 = \"\"\n  local str35 = \"\"\n  local str36 = \"\"\n  local str37 = \"\"\n  local str38 = \"\"\n  local str39 = \"\"\n  local str40 = \"\"\n  local str41 = \"\"\n  local str42 = \"\"\n  local str43 = \"\"\n  local str44 = \"\"\n  local str45 = \"\"\n  local str46 = \"\"\n  local str47 = \"\"\n  local str48 = \"\"\n  local str49 = \"\"\n  local str50 = \"\"\n  local str51 = \"\"\n  local str52 = \"\"\n  local str53 = \"\"\n  local str54 = \"\"\n  local str55 = \"\"\n  local str56 = \"\"\n  local str57 = \"\"\n  local str58 = \"\"\n  local str59 = \"\"\n  local str60 = \"\"\n  local str61 = \"\"\n  local str62 = \"\"\n  local str63 = \"\"\n  local str64 = \"\"\n  local str65 = \"\"\n  local str66 = \"\"\n  local str67 = \"\"\n  local str68 = \"\"\n  local str69 = \"\"\n  local str70 = \"\"\n  local str71 = \"\"\n  local str72 = \"\"\n  local str73 = \"\"\n  local str74 = \"\"\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6ag0ulps.lua:86: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    local str5 = {}\n    local str6 = {}\n    local str7 = {}\n    local str8 = {}\n    local str9 = {}\n    local str10 = {}\n    local str11 = {}\n    local str12 = {}\n    local str13 = {}\n    local str14 = {}\n    local str15 = {}\n    local str16 = {}\n    local str17 = {}\n    local str18 = {}\n    local str19 = {}\n    local str20 = {}\n    local str21 = {}\n    local str22 = {}\n    local str23 = {}\n    local str24 = {}\n    local str25 = {}\n    local str26 = {}\n    local str27 = {}\n    local str28 = {}\n    local str29 = {}\n    local str30 = {}\n    local str31 = {}\n    local str32 = {}\n    local str33 = {}\n    local str34 = {}\n    local str35 = {}\n    local str36 = {}\n    local str37 = {}\n    local str38 = {}\n    local str39 = {}\n    local str40 = {}\n    local str41 = {}\n    local str42 = {}\n    local str43 = {}\n    local str44 = {}\n    local str45 = {}\n    local str46 = {}\n    local str47 = {}\n    local str48 = {}\n    local str49 = {}\n    local str50 = {}\n    local str51 = {}\n    local str52 = {}\n    local str53 = {}\n    local str54 = {}\n    local str55 = {}\n    local str56 = {}\n    local str57 = {}\n    local str58 = {}\n    local str59 = {}\n    local str60 = {}\n    local str61 = {}\n    local str62 = {}\n    local str63 = {}\n    local str64 = {}\n    local str65 = {}\n    local str66 = {}\n    local str67 = {}\n    local str68 = {}\n    local str69 = {}\n    local str70 = {}\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmpusf_xva0.lua:83: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlddalpy.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmptlddalpy.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = {}\n\tfor i = 1, #str1 do\n\t\tstr2[i] = str1:sub(i, i)\n\tend\n\tlocal i = 1\n\tlocal j = #str1\n\twhile i < j do\n\t\twhile not vowels[str2[i]:lower()] and i < j do\n\t\t\ti = i + 1\n\t\tend\n\t\twhile not vowels[str2[j]:lower()] and i < j do\n\t\t\tj = j - 1\n\t\tend\n\t\tstr2[i], str2[j] = str2[j], str2[i]\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn table.concat(str2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if table.indexof(vowels, str1:sub(i, i)) then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if table.indexof(vowels, str1:sub(i, i)) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwapi0_ri.lua:6: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmpwapi0_ri.lua:6: in local 'candidate'\n\t/tmp/tmpwapi0_ri.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2[#str2 + 1] = str1:sub(i, i)\n    else\n      str3[#str3 + 1] = str1:sub(i, i)\n    end\n  end\n  for i = #str2, 1, -1 do\n    str3[j] = str2[i]\n    j = j + 1\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34aimlb1.lua:24: expected: \"Python\"\nactual: \"oythn\"\nstack traceback:\n\t/tmp/tmp34aimlb1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {\n        a = true,\n        e = true,\n        i = true,\n        o = true,\n        u = true\n    }\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh1zcu6e.lua:32: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpsh1zcu6e.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {}\n    local vowels_str = \"\"\n    local str2 = \"\"\n    local i = 1\n    local j = 1\n    for c in str1:gmatch(\".\") do\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n            vowels[i] = c\n            i = i + 1\n        end\n    end\n    for c in str1:gmatch(\".\") do\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n            str2 = str2 .. vowels[i - 1]\n            i = i - 1\n        else\n            str2 = str2 .. c\n        end\n    end\n    return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4ynnaa6.lua:29: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpr4ynnaa6.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(j, j)\n      j = j + 1\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnip7914v.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnip7914v.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = #str1, 1, -1 do\n        local c = str1:sub(i, i)\n        if vowels[c] then\n            str2 = str2 .. c\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf308ojp.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpcf308ojp.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.index_of(vowels, char) then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.index_of(vowels, char) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaihsx4_f.lua:7: attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpaihsx4_f.lua:7: in local 'candidate'\n\t/tmp/tmpaihsx4_f.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg14jmg0z.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpg14jmg0z.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = #str1, 1, -1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40nb0cnt.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp40nb0cnt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i,i)] then\n      table.insert(str2, str1:sub(i,i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i,i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2)\n    else\n      table.insert(str3, str1:sub(i,i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, 1, str1:sub(i, i))\n    else\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  return table.concat(str2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzgvrgfz.lua:18: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmpzzgvrgfz.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  for i = #str2, 1, -1 do\n    str3 = str3 .. str2:sub(i, i)\n  end\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str1 = str1:sub(1, i - 1) .. str3:sub(j, j) .. str1:sub(i + 1)\n      j = j + 1\n    end\n  end\n  return str1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijv0hk98.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpijv0hk98.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppms73us9.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmppms73us9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(j, j)\n      j = j + 1\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnip7914v.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnip7914v.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {'a','e','i','o','u'}\n\tlocal str2 = ''\n\tfor i = 1, #str1 do\n\t\tif not table.contains(vowels, str1:sub(i,i):lower()) then\n\t\t\tstr2 = str2 .. str1:sub(i,i)\n\t\tend\n\tend\n\tfor i = #str1, 1, -1 do\n\t\tif table.contains(vowels, str1:sub(i,i):lower()) then\n\t\t\tstr2 = str2 .. str1:sub(i,i)\n\t\tend\n\tend\n\treturn str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt5g6i0ps.lua:6: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpt5g6i0ps.lua:6: in local 'candidate'\n\t/tmp/tmpt5g6i0ps.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {\n    a = true,\n    e = true,\n    i = true,\n    o = true,\n    u = true,\n  }\n  local str2 = \"\"\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str2 = c .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. c\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6smjok72.lua:34: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp6smjok72.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str2 = char .. str2\n        end\n    end\n    local str3 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0f80hwl5.lua:7: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp0f80hwl5.lua:7: in local 'candidate'\n\t/tmp/tmp0f80hwl5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str2 = str2 .. char\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2iy6o6hy.lua:8: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp2iy6o6hy.lua:8: in local 'candidate'\n\t/tmp/tmp2iy6o6hy.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzje3usq6.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzje3usq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c] then\n            str2 = c .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2v3z305.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpo2v3z305.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    local str5 = {}\n    local str6 = {}\n    local str7 = {}\n    local str8 = {}\n    local str9 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    for i = #str2, 1, -1 do\n        table.insert(str4, str2[i])\n    end\n    for i = 1, #str3 do\n        table.insert(str5, str3[i])\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str6, str4[1])\n            table.remove(str4, 1)\n        else\n            table.insert(str6, str5[1])\n            table.remove(str5, 1)\n        end\n    end\n    for i = 1, #str6 do\n        table.insert(str7, str6[i])\n    end\n    for i = 1, #str7 do\n        table.insert(str8, str7[i])\n    end\n    for i = 1, #str8 do\n        table.insert(str9, str8[i])\n    end\n    return table.concat(str9)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7b0a37f.lua:50: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpm7b0a37f.lua:50: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local str4 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str4, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str4, str3[#str3])\n      table.remove(str3, #str3)\n    end\n  end\n  return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpfcp7at.lua:29: expected: \"Python\"\nactual: \"nhtyoP\"\nstack traceback:\n\t/tmp/tmpmpfcp7at.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = { a = true, e = true, i = true, o = true, u = true }\n    local str2 = {}\n    local str3 = {}\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[j] = str1:sub(i, i)\n            j = j + 1\n        end\n    end\n    j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3[i] = str2[#str2 - j + 1]\n            j = j + 1\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj74__xa.lua:29: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpkj74__xa.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local vowels = {}\n  local i = 1\n  for c in str1:gmatch(\".\") do\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n      vowels[i] = c\n      i = i + 1\n    end\n  end\n  for c in str1:gmatch(\".\") do\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n      str2 = str2 .. vowels[i - 1]\n      i = i - 1\n    else\n      str2 = str2 .. c\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j4m2y60.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp3j4m2y60.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    for i = #str2, 1, -1 do\n        str3 = str3 .. str2:sub(i, i)\n    end\n    local str4 = \"\"\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str4 = str4 .. str3:sub(j, j)\n            j = j + 1\n        else\n            str4 = str4 .. str1:sub(i, i)\n        end\n    end\n    return str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao8b6i_t.lua:31: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpao8b6i_t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.indexof(vowels, char) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcs8fh0q.lua:7: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmplcs8fh0q.lua:7: in local 'candidate'\n\t/tmp/tmplcs8fh0q.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if table.contains(vowels, str1:sub(i, i)) then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if table.contains(vowels, str1:sub(i, i)) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp53yu913y.lua:7: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp53yu913y.lua:7: in local 'candidate'\n\t/tmp/tmp53yu913y.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif vowels[char:lower()] then\n\t\t\tstr2 = char .. str2\n\t\telse\n\t\t\tstr2 = str2 .. char\n\t\tend\n\tend\n\treturn str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1qdk9th.lua:19: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmpk1qdk9th.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local result = {}\n  local vowel_stack = {}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      table.insert(vowel_stack, c)\n    end\n    result[i] = c\n  end\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      result[i] = table.remove(vowel_stack)\n    end\n  end\n  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbgz4oka.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpfbgz4oka.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    for i = #str2, 1, -1 do\n        str3 = str3 .. str2:sub(i, i)\n    end\n    local str4 = \"\"\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str4 = str4 .. str3:sub(j, j)\n            j = j + 1\n        else\n            str4 = str4 .. str1:sub(i, i)\n        end\n    end\n    return str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao8b6i_t.lua:31: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpao8b6i_t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local str3 = \"\"\n    local str4 = \"\"\n    local str5 = \"\"\n    local str6 = \"\"\n    local str7 = \"\"\n    local str8 = \"\"\n    local str9 = \"\"\n    local str10 = \"\"\n    local str11 = \"\"\n    local str12 = \"\"\n    local str13 = \"\"\n    local str14 = \"\"\n    local str15 = \"\"\n    local str16 = \"\"\n    local str17 = \"\"\n    local str18 = \"\"\n    local str19 = \"\"\n    local str20 = \"\"\n    local str21 = \"\"\n    local str22 = \"\"\n    local str23 = \"\"\n    local str24 = \"\"\n    local str25 = \"\"\n    local str26 = \"\"\n    local str27 = \"\"\n    local str28 = \"\"\n    local str29 = \"\"\n    local str30 = \"\"\n    local str31 = \"\"\n    local str32 = \"\"\n    local str33 = \"\"\n    local str34 = \"\"\n    local str35 = \"\"\n    local str36 = \"\"\n    local str37 = \"\"\n    local str38 = \"\"\n    local str39 = \"\"\n    local str40 = \"\"\n    local str41 = \"\"\n    local str42 = \"\"\n    local str43 = \"\"\n    local str44 = \"\"\n    local str45 = \"\"\n    local str46 = \"\"\n    local str47 = \"\"\n    local str48 = \"\"\n    local str49 = \"\"\n    local str50 = \"\"\n    local str51 = \"\"\n    local str52 = \"\"\n    local str53 = \"\"\n    local str54 = \"\"\n    local str55 = \"\"\n    local str56 = \"\"\n    local str57 = \"\"\n    local str58 = \"\"\n    local str59 = \"\"\n    local str60 = \"\"\n    local str61 = \"\"\n    local str62 = \"\"\n    local str63 = \"\"\n    local str64 = \"\"\n    local str65 = \"\"\n    local str66 = \"\"\n    local str67 = \"\"\n    local str68 = \"\"\n    local str69 = \"\"\n    local str70 = \"\"\n    local str71 = \"\"\n    local str72 = \"\"\n    local str73 = \"\"\n    local str74 = \"\"\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "lua: /tmp/tmppq6rodw0.lua:86: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.contains(vowels, char) then\n            str2 = char .. str2\n        end\n    end\n    local str3 = ''\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if table.contains(vowels, char) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphciwjoyf.lua:7: attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmphciwjoyf.lua:7: in local 'candidate'\n\t/tmp/tmphciwjoyf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiewrieu_.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpiewrieu_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local str4 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if not vowels[str1:sub(i, i)] then\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str4, str2[#str2])\n      str2[#str2] = nil\n    else\n      table.insert(str4, str3[#str3])\n      str3[#str3] = nil\n    end\n  end\n  return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhf6idxl.lua:32: expected: \"Python\"\nactual: \"nhtyoP\"\nstack traceback:\n\t/tmp/tmpwhf6idxl.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i)] then\n\t\t\tstr2 = str1:sub(i, i) .. str2\n\t\tend\n\tend\n\tlocal str3 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i)] then\n\t\t\tstr3 = str3 .. str2:sub(1, 1)\n\t\t\tstr2 = str2:sub(2)\n\t\telse\n\t\t\tstr3 = str3 .. str1:sub(i, i)\n\t\tend\n\tend\n\treturn str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpquq6tej9.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpquq6tej9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif vowels[char:lower()] then\n\t\t\tstr2 = char .. str2\n\t\telse\n\t\t\tstr2 = str2 .. char\n\t\tend\n\tend\n\treturn str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1qdk9th.lua:19: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmpk1qdk9th.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzje3usq6.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzje3usq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2[#str2 + 1] = str1:sub(i, i)\n    end\n  end\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3[#str3 + 1] = str2[#str2]\n      str2[#str2] = nil\n    else\n      str3[#str3 + 1] = str1:sub(i, i)\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp355w96s2.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp355w96s2.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = \"aeiouAEIOU\"\n    local i = 1\n    local j = #str1\n    while i <= j do\n        if vowels:find(str1:sub(i, i), 1, true) then\n            while j > i do\n                if vowels:find(str1:sub(j, j), 1, true) then\n                    str2 = str2 .. str1:sub(j, j)\n                    j = j - 1\n                    break\n                end\n                j = j - 1\n            end\n        else\n            str2 = str2 .. str1:sub(i, i)\n        end\n        i = i + 1\n    end\n    return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1h812ye.lua:28: expected: \"Python\"\nactual: \"Pyth\"\nstack traceback:\n\t/tmp/tmpc1h812ye.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local vowels_stack = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            vowels_stack[#vowels_stack + 1] = str1:sub(i, i)\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[i] = vowels_stack[#vowels_stack]\n            vowels_stack[#vowels_stack] = nil\n        else\n            str2[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v82b50u.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp7v82b50u.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local str3 = \"\"\n  local str4 = \"\"\n  for i = 1, #str1 do\n    if string.find(\"aeiou\", string.sub(str1, i, i)) then\n      str2 = str2 .. string.sub(str1, i, i)\n    else\n      str3 = str3 .. string.sub(str1, i, i)\n    end\n  end\n  for i = #str2, 1, -1 do\n    str4 = str4 .. string.sub(str2, i, i)\n  end\n  return str3 .. str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5wog1du.lua:22: expected: \"Python\"\nactual: \"Pythno\"\nstack traceback:\n\t/tmp/tmpj5wog1du.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    local str5 = {}\n    local str6 = {}\n    local str7 = {}\n    local str8 = {}\n    local str9 = {}\n    local str10 = {}\n    local str11 = {}\n    local str12 = {}\n    local str13 = {}\n    local str14 = {}\n    local str15 = {}\n    local str16 = {}\n    local str17 = {}\n    local str18 = {}\n    local str19 = {}\n    local str20 = {}\n    local str21 = {}\n    local str22 = {}\n    local str23 = {}\n    local str24 = {}\n    local str25 = {}\n    local str26 = {}\n    local str27 = {}\n    local str28 = {}\n    local str29 = {}\n    local str30 = {}\n    local str31 = {}\n    local str32 = {}\n    local str33 = {}\n    local str34 = {}\n    local str35 = {}\n    local str36 = {}\n    local str37 = {}\n    local str38 = {}\n    local str39 = {}\n    local str40 = {}\n    local str41 = {}\n    local str42 = {}\n    local str43 = {}\n    local str44 = {}\n    local str45 = {}\n    local str46 = {}\n    local str47 = {}\n    local str48 = {}\n    local str49 = {}\n    local str50 = {}\n    local str51 = {}\n    local str52 = {}\n    local str53 = {}\n    local str54 = {}\n    local str55 = {}\n    local str56 = {}\n    local str57 = {}\n    local str58 = {}\n    local str59 = {}\n    local str60 = {}\n    local str61 = {}\n    local str62 = {}\n    local str63 = {}\n    local str64 = {}\n    local str65 = {}\n    local str66 = {}\n    local str67 = {}\n    local str68 = {}\n    local str69 = {}\n    local str70 = {}\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmpusf_xva0.lua:83: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {\n    ['a'] = true,\n    ['e'] = true,\n    ['i'] = true,\n    ['o'] = true,\n    ['u'] = true,\n  }\n  local str2 = ''\n  local str3 = ''\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str2 = str2 .. c\n    end\n  end\n  for i = #str2, 1, -1 do\n    local c = str2:sub(i, i)\n    str3 = str3 .. c\n  end\n  local str4 = ''\n  local j = 1\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str4 = str4 .. str3:sub(j, j)\n      j = j + 1\n    else\n      str4 = str4 .. c\n    end\n  end\n  return str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm0hirkb.lua:40: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpcm0hirkb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str3 do\n        table.insert(str4, str3[i])\n    end\n    return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ms7js1.lua:30: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpy7ms7js1.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  for i = #str2, 1, -1 do\n    str3 = str3 .. str2:sub(i, i)\n  end\n  local str4 = \"\"\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str4 = str4 .. str3:sub(j, j)\n      j = j + 1\n    else\n      str4 = str4 .. str1:sub(i, i)\n    end\n  end\n  return str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfblyj8zt.lua:31: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpfblyj8zt.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(j, j)\n      j = j + 1\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnip7914v.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnip7914v.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local str2 = ''\n  local str3 = ''\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sog0xm7.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp8sog0xm7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = { a = true, e = true, i = true, o = true, u = true }\n    local str2 = \"\"\n    local str3 = \"\"\n    local str4 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    for i = #str2, 1, -1 do\n        str4 = str4 .. str2:sub(i, i)\n    end\n    return str3 .. str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p5cehc_.lua:23: expected: \"Python\"\nactual: \"Pythno\"\nstack traceback:\n\t/tmp/tmp4p5cehc_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92bzu2r3.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp92bzu2r3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptlddalpy.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmptlddalpy.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local j = 1\n  for i = #str1, 1, -1 do\n    if vowels[str1:sub(i, i)] then\n      str2[j] = str1:sub(i, i)\n      j = j + 1\n    end\n  end\n  local k = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str1 = str1:sub(1, i - 1) .. str2[k] .. str1:sub(i + 1)\n      k = k + 1\n    end\n  end\n  return str1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_293olox.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_293olox.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if str1:sub(i,i) == \"a\" or str1:sub(i,i) == \"e\" or str1:sub(i,i) == \"i\" or str1:sub(i,i) == \"o\" or str1:sub(i,i) == \"u\" then\n      table.insert(vowels, str1:sub(i,i))\n    end\n  end\n  for i = 1, #str1 do\n    if str1:sub(i,i) == \"a\" or str1:sub(i,i) == \"e\" or str1:sub(i,i) == \"i\" or str1:sub(i,i) == \"o\" or str1:sub(i,i) == \"u\" then\n      str2 = str2 .. vowels[#vowels]\n      table.remove(vowels)\n    else\n      str2 = str2 .. str1:sub(i,i)\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w6gfoz5.lua:25: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp5w6gfoz5.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local i = 1\n    local j = 1\n    for k = 1, #str1 do\n        if vowels[str1:sub(k, k)] then\n            str2[i] = str1:sub(k, k)\n            i = i + 1\n        else\n            str3[j] = str1:sub(k, k)\n            j = j + 1\n        end\n    end\n    local str4 = {}\n    for k = 1, #str1 do\n        if vowels[str1:sub(k, k)] then\n            str4[k] = str2[#str2]\n            str2[#str2] = nil\n        else\n            str4[k] = str3[#str3]\n            str3[#str3] = nil\n        end\n    end\n    return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iflu7zk.lua:33: expected: \"Python\"\nactual: \"nhtyoP\"\nstack traceback:\n\t/tmp/tmp5iflu7zk.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2, #str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rs8msjt.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp9rs8msjt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = #str1, 1, -1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnjxqqgg.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpjnjxqqgg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzje3usq6.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzje3usq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local vowels = {}\n  local i = 1\n  for c in str1:gmatch(\".\") do\n    if c:match(\"[aeiouAEIOU]\") then\n      vowels[i] = c\n      i = i + 1\n    end\n  end\n  for c in str1:gmatch(\".\") do\n    if c:match(\"[aeiouAEIOU]\") then\n      str2 = str2 .. vowels[i-1]\n      i = i - 1\n    else\n      str2 = str2 .. c\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(-1, -1)\n      str2 = str2:sub(1, -2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp684l_htu.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp684l_htu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local vowels = \"\"\n  for i = 1, #str1 do\n    if str1:sub(i,i) == \"a\" or str1:sub(i,i) == \"e\" or str1:sub(i,i) == \"i\" or str1:sub(i,i) == \"o\" or str1:sub(i,i) == \"u\" then\n      vowels = vowels .. str1:sub(i,i)\n    end\n  end\n  vowels = vowels:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if str1:sub(i,i) == \"a\" or str1:sub(i,i) == \"e\" or str1:sub(i,i) == \"i\" or str1:sub(i,i) == \"o\" or str1:sub(i,i) == \"u\" then\n      str2 = str2 .. vowels:sub(j,j)\n      j = j + 1\n    else\n      str2 = str2 .. str1:sub(i,i)\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnlbqvbl.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpgnlbqvbl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeovbuiku.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpeovbuiku.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiewrieu_.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpiewrieu_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2, #str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rs8msjt.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp9rs8msjt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i):lower()] then\n            str2[j] = str1:sub(i, i)\n            j = j + 1\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i):lower()] then\n            str3[i] = str2[#str2]\n            str2[#str2] = nil\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal c = str1:sub(i, i)\n\t\tif vowels[c] then\n\t\t\tstr2 = c .. str2\n\t\telse\n\t\t\tstr2 = str2 .. c\n\t\tend\n\tend\n\treturn str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qnk5wpv.lua:19: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmp0qnk5wpv.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    local str5 = {}\n    local str6 = {}\n    local str7 = {}\n    local str8 = {}\n    local str9 = {}\n    local str10 = {}\n    local str11 = {}\n    local str12 = {}\n    local str13 = {}\n    local str14 = {}\n    local str15 = {}\n    local str16 = {}\n    local str17 = {}\n    local str18 = {}\n    local str19 = {}\n    local str20 = {}\n    local str21 = {}\n    local str22 = {}\n    local str23 = {}\n    local str24 = {}\n    local str25 = {}\n    local str26 = {}\n    local str27 = {}\n    local str28 = {}\n    local str29 = {}\n    local str30 = {}\n    local str31 = {}\n    local str32 = {}\n    local str33 = {}\n    local str34 = {}\n    local str35 = {}\n    local str36 = {}\n    local str37 = {}\n    local str38 = {}\n    local str39 = {}\n    local str40 = {}\n    local str41 = {}\n    local str42 = {}\n    local str43 = {}\n    local str44 = {}\n    local str45 = {}\n    local str46 = {}\n    local str47 = {}\n    local str48 = {}\n    local str49 = {}\n    local str50 = {}\n    local str51 = {}\n    local str52 = {}\n    local str53 = {}\n    local str54 = {}\n    local str55 = {}\n    local str56 = {}\n    local str57 = {}\n    local str58 = {}\n    local str59 = {}\n    local str60 = {}\n    local str61 = {}\n    local str62 = {}\n    local str63 = {}\n    local str64 = {}\n    local str65 = {}\n    local str66 = {}\n    local str67 = {}\n    local str68 = {}\n    local str69 = {}\n    local str70 = {}\n   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "",
      "stderr": "lua: /tmp/tmpusf_xva0.lua:83: 'end' expected (to close 'function' at line 2) near '<eof>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = { a = true, e = true, i = true, o = true, u = true }\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbgwjbk3.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmplbgwjbk3.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif vowels[char:lower()] then\n\t\t\tstr2 = char .. str2\n\t\tend\n\tend\n\tlocal str3 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif vowels[char:lower()] then\n\t\t\tstr3 = str3 .. str2:sub(1, 1)\n\t\t\tstr2 = str2:sub(2)\n\t\telse\n\t\t\tstr3 = str3 .. char\n\t\tend\n\tend\n\treturn str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str2 = c .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. c\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhanr03l.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpxhanr03l.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if vowels[char:lower()] then\n      str2 = char .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    local char = str1:sub(i, i)\n    if vowels[char:lower()] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. char\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a','e','i','o','u'}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if table.index_of(vowels, char) then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i,i)\n        if table.index_of(vowels, char) then\n            str3 = str3 .. str2:sub(1,1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwj_jz7u7.lua:7: attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpwj_jz7u7.lua:7: in local 'candidate'\n\t/tmp/tmpwj_jz7u7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a','e','i','o','u'}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i,i)\n        if table.indexof(vowels, c) then\n            str2 = c .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i,i)\n        if table.indexof(vowels, c) then\n            str3 = str3 .. str2:sub(1,1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8mclr1qz.lua:7: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp8mclr1qz.lua:7: in local 'candidate'\n\t/tmp/tmp8mclr1qz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if table.indexof(vowels, str1:sub(i, i)) then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        if table.indexof(vowels, str1:sub(i, i)) then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_m96ip45.lua:7: attempt to call a nil value (field 'indexof')\nstack traceback:\n\t/tmp/tmp_m96ip45.lua:7: in local 'candidate'\n\t/tmp/tmp_m96ip45.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = { a = true, e = true, i = true, o = true, u = true }\n\tlocal str2 = \"\"\n\tlocal str3 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i)] then\n\t\t\tstr2 = str2 .. str1:sub(i, i)\n\t\telse\n\t\t\tstr3 = str3 .. str1:sub(i, i)\n\t\tend\n\tend\n\treturn str3 .. str2:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppl6a4euy.lua:19: expected: \"Python\"\nactual: \"Pythno\"\nstack traceback:\n\t/tmp/tmppl6a4euy.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str2 = c .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if vowels[c] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. c\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmddso2l1.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpmddso2l1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(j, j)\n      j = j + 1\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnip7914v.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnip7914v.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {[\"a\"] = true, [\"e\"] = true, [\"i\"] = true, [\"o\"] = true, [\"u\"] = true}\n\tlocal str2 = \"\"\n\tlocal str3 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i)] then\n\t\t\tstr2 = str2 .. str1:sub(i, i)\n\t\telse\n\t\t\tstr3 = str3 .. str1:sub(i, i)\n\t\tend\n\tend\n\treturn str3 .. str2:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mq60z0e.lua:19: expected: \"Python\"\nactual: \"Pythno\"\nstack traceback:\n\t/tmp/tmp9mq60z0e.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local str4 = {}\n  local str5 = {}\n  local str6 = {}\n  local str7 = {}\n  local str8 = {}\n  local str9 = {}\n  local str10 = {}\n  local str11 = {}\n  local str12 = {}\n  local str13 = {}\n  local str14 = {}\n  local str15 = {}\n  local str16 = {}\n  local str17 = {}\n  local str18 = {}\n  local str19 = {}\n  local str20 = {}\n  local str21 = {}\n  local str22 = {}\n  local str23 = {}\n  local str24 = {}\n  local str25 = {}\n  local str26 = {}\n  local str27 = {}\n  local str28 = {}\n  local str29 = {}\n  local str30 = {}\n  local str31 = {}\n  local str32 = {}\n  local str33 = {}\n  local str34 = {}\n  local str35 = {}\n  local str36 = {}\n  local str37 = {}\n  local str38 = {}\n  local str39 = {}\n  local str40 = {}\n  local str41 = {}\n  local str42 = {}\n  local str43 = {}\n  local str44 = {}\n  local str45 = {}\n  local str46 = {}\n  local str47 = {}\n  local str48 = {}\n  local str49 = {}\n  local str50 = {}\n  local str51 = {}\n  local str52 = {}\n  local str53 = {}\n  local str54 = {}\n  local str55 = {}\n  local str56 = {}\n  local str57 = {}\n  local str58 = {}\n  local str59 = {}\n  local str60 = {}\n  local str61 = {}\n  local str62 = {}\n  local str63 = {}\n  local str64 = {}\n  local str65 = {}\n  local str66 = {}\n  local str67 = {}\n  local str68 = {}\n  local str69 = {}\n  local str70 = {}\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4sh5961o.lua:83: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = str1:gsub(\"[aeiouAEIOU]\", function(c) return c:reverse() end)\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb07duia9.lua:11: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpb07duia9.lua:11: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local str4 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str3 do\n    table.insert(str4, str3[i])\n  end\n  return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvythq_u.lua:30: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwvythq_u.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local str3 = \"\"\n    local str4 = \"\"\n    local str5 = \"\"\n    local str6 = \"\"\n    local str7 = \"\"\n    local str8 = \"\"\n    local str9 = \"\"\n    local str10 = \"\"\n    local str11 = \"\"\n    local str12 = \"\"\n    local str13 = \"\"\n    local str14 = \"\"\n    local str15 = \"\"\n    local str16 = \"\"\n    local str17 = \"\"\n    local str18 = \"\"\n    local str19 = \"\"\n    local str20 = \"\"\n    local str21 = \"\"\n    local str22 = \"\"\n    local str23 = \"\"\n    local str24 = \"\"\n    local str25 = \"\"\n    local str26 = \"\"\n    local str27 = \"\"\n    local str28 = \"\"\n    local str29 = \"\"\n    local str30 = \"\"\n    local str31 = \"\"\n    local str32 = \"\"\n    local str33 = \"\"\n    local str34 = \"\"\n    local str35 = \"\"\n    local str36 = \"\"\n    local str37 = \"\"\n    local str38 = \"\"\n    local str39 = \"\"\n    local str40 = \"\"\n    local str41 = \"\"\n    local str42 = \"\"\n    local str43 = \"\"\n    local str44 = \"\"\n    local str45 = \"\"\n    local str46 = \"\"\n    local str47 = \"\"\n    local str48 = \"\"\n    local str49 = \"\"\n    local str50 = \"\"\n    local str51 = \"\"\n    local str52 = \"\"\n    local str53 = \"\"\n    local str54 = \"\"\n    local str55 = \"\"\n    local str56 = \"\"\n    local str57 = \"\"\n    local str58 = \"\"\n    local str59 = \"\"\n    local str60 = \"\"\n    local str61 = \"\"\n    local str62 = \"\"\n    local str63 = \"\"\n    local str64 = \"\"\n    local str65 = \"\"\n    local str66 = \"\"\n    local str67 = \"\"\n    local str68 = \"\"\n    local str69 = \"\"\n    local str70 = \"\"\n    local str71 = \"\"\n    local str72 = \"\"\n    local str73 = \"\"\n    local str74 = \"\"\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "lua: /tmp/tmppq6rodw0.lua:86: 'end' expected (to close 'function' at line 2) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local str2 = ''\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if table.index_of(vowels, c) then\n      str2 = c .. str2\n    end\n  end\n  local str3 = ''\n  for i = 1, #str1 do\n    local c = str1:sub(i, i)\n    if table.index_of(vowels, c) then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. c\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp73zog89q.lua:7: attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmp73zog89q.lua:7: in local 'candidate'\n\t/tmp/tmp73zog89q.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[#str2 + 1] = str1:sub(i, i)\n        end\n    end\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3[i] = str2[#str2]\n            str2[#str2] = nil\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc6wi2xr.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpyc6wi2xr.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    for i = #str2, 1, -1 do\n        str3 = str3 .. str2:sub(i, i)\n    end\n    local str4 = \"\"\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str4 = str4 .. str3:sub(j, j)\n            j = j + 1\n        else\n            str4 = str4 .. str1:sub(i, i)\n        end\n    end\n    return str4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpao8b6i_t.lua:31: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpao8b6i_t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c:lower()] then\n            str2 = c .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i):lower()] then\n\t\t\tstr2 = str1:sub(i, i) .. str2\n\t\tend\n\tend\n\tlocal str3 = \"\"\n\tfor i = 1, #str1 do\n\t\tif vowels[str1:sub(i, i):lower()] then\n\t\t\tstr3 = str3 .. str2:sub(1, 1)\n\t\t\tstr2 = str2:sub(2)\n\t\telse\n\t\t\tstr3 = str3 .. str1:sub(i, i)\n\t\tend\n\tend\n\treturn str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {\n        a = true,\n        e = true,\n        i = true,\n        o = true,\n        u = true,\n    }\n    local str2 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char] then\n            str2 = char .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local char = str1:sub(i, i)\n        if vowels[char] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. char\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt40u02zd.lua:34: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpt40u02zd.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2, #str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rs8msjt.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp9rs8msjt.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if table.index_of(vowels, c) then\n            str2 = c .. str2\n        end\n    end\n    local str3 = ''\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if table.index_of(vowels, c) then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluqx_mpe.lua:7: attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpluqx_mpe.lua:7: in local 'candidate'\n\t/tmp/tmpluqx_mpe.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3 .. str2:reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hbo_mec.lua:19: expected: \"Python\"\nactual: \"Pythno\"\nstack traceback:\n\t/tmp/tmp5hbo_mec.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzje3usq6.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzje3usq6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  local j = 1\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(j, j)\n      j = j + 1\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnip7914v.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnip7914v.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[#str2 + 1] = str1:sub(i, i)\n        end\n    end\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3[i] = str2[#str2]\n            str2[#str2] = nil\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3p3wa7h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpp3p3wa7h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if str1:sub(i, i):match(\"[aeiouAEIOU]\") then\n      table.insert(vowels, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if str1:sub(i, i):match(\"[aeiouAEIOU]\") then\n      str2 = str2 .. vowels[#vowels]\n      table.remove(vowels)\n    else\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = {}\n\tfor i = 1, #str1 do\n\t\tstr2[i] = str1:sub(i, i)\n\tend\n\tlocal i, j = 1, #str2\n\twhile i < j do\n\t\tif vowels[str2[i]:lower()] and vowels[str2[j]:lower()] then\n\t\t\tstr2[i], str2[j] = str2[j], str2[i]\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\telseif vowels[str2[i]:lower()] then\n\t\t\tj = j - 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn table.concat(str2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  str2 = str2:reverse()\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrlhmbjd.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpnrlhmbjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  local str4 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    table.insert(str4, str3[i])\n  end\n  return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb1152_k.lua:30: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpzb1152_k.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str1_table = {}\n    local str1_vowels = {}\n    local str1_vowels_rev = {}\n    local str1_final = {}\n    for i = 1, #str1 do\n        str1_table[i] = str1:sub(i, i)\n        if vowels[str1_table[i]] then\n            table.insert(str1_vowels, str1_table[i])\n        end\n    end\n    for i = #str1_vowels, 1, -1 do\n        table.insert(str1_vowels_rev, str1_vowels[i])\n    end\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1_table[i]] then\n            str1_final[i] = str1_vowels_rev[j]\n            j = j + 1\n        else\n            str1_final[i] = str1_table[i]\n        end\n    end\n    return table.concat(str1_final)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo_fkz11.lua:33: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdo_fkz11.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str3, str2[#str2])\n            table.remove(str2)\n        else\n            table.insert(str3, str1:sub(i, i))\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppms73us9.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmppms73us9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n\tlocal vowels = {a = true, e = true, i = true, o = true, u = true}\n\tlocal str2 = \"\"\n\tfor i = 1, #str1 do\n\t\tlocal char = str1:sub(i, i)\n\t\tif vowels[char:lower()] then\n\t\t\tstr2 = char .. str2\n\t\telse\n\t\t\tstr2 = str2 .. char\n\t\tend\n\tend\n\treturn str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1qdk9th.lua:19: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmpk1qdk9th.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[j] = str1:sub(i, i)\n            j = j + 1\n        end\n    end\n    j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3[i] = str2[#str2 - j + 1]\n            j = j + 1\n        else\n            str3[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl4s7b2z8.lua:29: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpl4s7b2z8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str2 = str1:sub(i, i) .. str2\n    end\n  end\n  local str3 = \"\"\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str2:sub(1, 1)\n      str2 = str2:sub(2)\n    else\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjal53h.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpwfjal53h.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            table.insert(str2, 1, str1:sub(i, i))\n        else\n            table.insert(str2, str1:sub(i, i))\n        end\n    end\n    return table.concat(str2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3jdjpcu.lua:18: expected: \"Python\"\nactual: \"oPythn\"\nstack traceback:\n\t/tmp/tmpd3jdjpcu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local str2 = ''\n  for i = 1, #str1 do\n    if not vowels[str1:sub(i, i)] then\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  local str3 = ''\n  for i = #str1, 1, -1 do\n    if vowels[str1:sub(i, i)] then\n      str3 = str3 .. str1:sub(i, i)\n    end\n  end\n  return str2 .. str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe5g90y9.lua:23: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmppe5g90y9.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = {}\n    local str3 = {}\n    local str4 = {}\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2[j] = str1:sub(i, i)\n            j = j + 1\n        end\n    end\n    for i = #str2, 1, -1 do\n        str3[#str2 - i + 1] = str2[i]\n    end\n    j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str4[i] = str3[j]\n            j = j + 1\n        else\n            str4[i] = str1:sub(i, i)\n        end\n    end\n    return table.concat(str4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qo_14gh.lua:33: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp7qo_14gh.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = {}\n    local i = 1\n    for c in str1:gmatch(\".\") do\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n            vowels[i] = c\n            i = i + 1\n        end\n    end\n    i = 1\n    for c in str1:gmatch(\".\") do\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n            str2 = str2 .. vowels[#vowels - i + 1]\n            i = i + 1\n        else\n            str2 = str2 .. c\n        end\n    end\n    return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrwfa0pi.lua:28: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpmrwfa0pi.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = ''\n    local str3 = ''\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92bzu2r3.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp92bzu2r3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local str2 = {}\n  local str3 = {}\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str2, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if vowels[str1:sub(i, i)] then\n      table.insert(str3, str2[#str2])\n      table.remove(str2, #str2)\n    else\n      table.insert(str3, str1:sub(i, i))\n    end\n  end\n  return table.concat(str3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlod92ht.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdlod92ht.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnawbpfw.lua:27: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpdnawbpfw.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str1:sub(i, i) .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027697,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mq390nh.lua:26: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmp_mq390nh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local str2 = \"\"\n    local str3 = \"\"\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str2 = str2 .. str1:sub(i, i)\n        end\n    end\n    str2 = str2:reverse()\n    local j = 1\n    for i = 1, #str1 do\n        if vowels[str1:sub(i, i)] then\n            str3 = str3 .. str2:sub(j, j)\n            j = j + 1\n        else\n            str3 = str3 .. str1:sub(i, i)\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local vowels = {}\n  local str2 = \"\"\n  for i = 1, #str1 do\n    if str1:sub(i, i) == \"a\" or str1:sub(i, i) == \"e\" or str1:sub(i, i) == \"i\" or str1:sub(i, i) == \"o\" or str1:sub(i, i) == \"u\" then\n      table.insert(vowels, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if str1:sub(i, i) == \"a\" or str1:sub(i, i) == \"e\" or str1:sub(i, i) == \"i\" or str1:sub(i, i) == \"o\" or str1:sub(i, i) == \"u\" then\n      str2 = str2 .. vowels[#vowels]\n      table.remove(vowels)\n    else\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4343szu.lua:25: expected: \"ASU\"\nactual: \"USA\"\nstack traceback:\n\t/tmp/tmpj4343szu.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n    local str2 = \"\"\n    local vowels = { a = true, e = true, i = true, o = true, u = true }\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c:lower()] then\n            str2 = c .. str2\n        end\n    end\n    local str3 = \"\"\n    for i = 1, #str1 do\n        local c = str1:sub(i, i)\n        if vowels[c:lower()] then\n            str3 = str3 .. str2:sub(1, 1)\n            str2 = str2:sub(2)\n        else\n            str3 = str3 .. c\n        end\n    end\n    return str3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a luathon function to reverse only the vowels of a given string (where y is not a vowel).\nlocal function reverse_vowels(str1)\n  local str2 = \"\"\n  local vowels = {}\n  for i = 1, #str1 do\n    if str1:sub(i, i):match(\"[aeiouAEIOU]\") then\n      table.insert(vowels, str1:sub(i, i))\n    end\n  end\n  for i = 1, #str1 do\n    if str1:sub(i, i):match(\"[aeiouAEIOU]\") then\n      str2 = str2 .. vowels[#vowels]\n      table.remove(vowels, #vowels)\n    else\n      str2 = str2 .. str1:sub(i, i)\n    end\n  end\n  return str2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_vowels\n    lu.assertEquals(candidate('Python'), 'Python')\n    lu.assertEquals(candidate('USA'), 'ASU')\n    lu.assertEquals(candidate('ab'), 'ab')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123539,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}