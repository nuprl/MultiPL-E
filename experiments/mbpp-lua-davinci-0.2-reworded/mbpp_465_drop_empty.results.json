{
  "name": "mbpp_465_drop_empty",
  "language": "lua",
  "prompt": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "results": [
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v and v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        if value ~= \"\" then\n            dict2[key] = value\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= '' then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        if value ~= \"\" then\n            dict2[key] = value\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for key, value in pairs(dict1) do\n        if value ~= \"\" then\n            dict2[key] = value\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= nil then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= nil then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k,v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k,v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= nil and v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= nil and v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k,v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k,v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k,v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n\tlocal dict2 = {}\n\tfor k, v in pairs(dict1) do\n\t\tif v ~= \"\" then\n\t\t\tdict2[k] = v\n\t\tend\n\tend\n\treturn dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= nil then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    for k, v in pairs(dict1) do\n        if v == nil then\n            dict1[k] = nil\n        end\n    end\n    return dict1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1666123241,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n  local dict2 = {}\n  for k, v in pairs(dict1) do\n    if v ~= \"\" then\n      dict2[k] = v\n    end\n  end\n  return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= '' then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Write a function to drop empty items from a given table.\nlocal function drop_empty(dict1)\n    local dict2 = {}\n    for k, v in pairs(dict1) do\n        if v ~= \"\" then\n            dict2[k] = v\n        end\n    end\n    return dict2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = drop_empty\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = 'Green', ['c3'] = None}), {['c1'] = 'Red', ['c2'] = 'Green'})\n    lu.assertEquals(candidate({['c1'] = 'Red', ['c2'] = None, ['c3'] = None}), {['c1'] = 'Red'})\n    lu.assertEquals(candidate({['c1'] = None, ['c2'] = 'Green', ['c3'] = None}), {['c2'] = 'Green'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1665027766,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}