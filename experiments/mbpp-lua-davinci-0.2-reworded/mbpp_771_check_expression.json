{
  "name": "mbpp_771_check_expression",
  "language": "lua",
  "prompt": "-- Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nlocal function check_expression(exp)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_expression\n    lu.assertEquals(candidate('{()}[{}]'), true)\n    lu.assertEquals(candidate('{()}[{]'), false)\n    lu.assertEquals(candidate('{()}[{}][]({})'), true)\nend\n\nos.exit(lu.LuaUnit.run())",
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ],
  "completions": [
    "\tlocal stack = {}\n\tlocal open = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal c = exp:sub(i, i)\n\t\tif open[c] then\n\t\t\tstack[#stack + 1] = c\n\t\telseif close[c] then\n\t\t\tlocal last = stack[#stack]\n\t\t\tif pairs[last] == c then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack.push(c)\n    elseif c == ')' or c == '}' or c == ']' then\n      if #stack == 0 then\n        return false\n      end\n      local top = stack.pop()\n      if (c == ')' and top ~= '(') or (c == '}' and top ~= '{') or (c == ']' and top ~= '[') then\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "  local stack = {}\n  local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n  local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n  local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack[#stack + 1] = char\n    elseif close_brackets[char] then\n      if #stack == 0 then\n        return false\n      end\n      local open_bracket = stack[#stack]\n      if bracket_pairs[open_bracket] ~= char then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack:push(c)\n    elseif c == ')' or c == ']' or c == '}' then\n      local top = stack:pop()\n      if (c == ')' and top ~= '(') or (c == ']' and top ~= '[') or (c == '}' and top ~= '{') then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if #stack == 0 or stack[#stack] ~= '(' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == ']' then\n      if #stack == 0 or stack[#stack] ~= '[' then\n        return false\n      end\n      stack[#stack] = nil\n    elseif c == '}' then\n      if #stack == 0 or stack[#stack] ~= '{' then\n        return false\n      end\n      stack[#stack] = nil\n    end\n  end\n  return #stack == 0\nend",
    "\tlocal stack = {}\n\tlocal open_brackets = {\n\t\t['('] = true,\n\t\t['['] = true,\n\t\t['{'] = true,\n\t}\n\tlocal close_brackets = {\n\t\t[')'] = '(',\n\t\t[']'] = '[',\n\t\t['}'] = '{',\n\t}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack[#stack + 1] = char\n\t\telseif close_brackets[char] then\n\t\t\tif stack[#stack] ~= close_brackets[char] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = Stack.new()\n    for i=1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "  local stack = Stack:new()\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '{' or c == '[' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:pop() ~= '(' then\n        return false\n      end\n    elseif c == '}' then\n      if stack:pop() ~= '{' then\n        return false\n      end\n    elseif c == ']' then\n      if stack:pop() ~= '[' then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = true, ['}'] = true, [']'] = true}\n    local pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if #stack == 0 then\n                return false\n            end\n            local top = stack[#stack]\n            if pairs[top] == c then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = Stack.new()\n  local open_brackets = {['{'] = '}', ['('] = ')', ['['] = ']'}\n  local close_brackets = {['}'] = true, [')'] = true, [']'] = true}\n  for i = 1, #exp do\n    local char = exp:sub(i, i)\n    if open_brackets[char] then\n      stack:push(char)\n    elseif close_brackets[char] then\n      local top = stack:pop()\n      if open_brackets[top] ~= char then\n        return false\n      end\n    end\n  end\n  return stack:is_empty()\nend",
    "    local stack = Stack:new()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' then\n            if stack:pop() ~= '(' then\n                return false\n            end\n        elseif c == ']' then\n            if stack:pop() ~= '[' then\n                return false\n            end\n        elseif c == '}' then\n            if stack:pop() ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    local open = {['('] = true, ['{'] = true, ['['] = true}\n    local close = {[')'] = '(', ['}'] = '{', [']'] = '['}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            local top = stack[#stack]\n            if top == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "\tlocal stack = {}\n\tlocal open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n\tlocal close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n\tlocal bracket_pairs = {['('] = ')', ['{'] = '}', ['['] = ']'}\n\tfor i = 1, #exp do\n\t\tlocal char = exp:sub(i, i)\n\t\tif open_brackets[char] then\n\t\t\tstack[#stack + 1] = char\n\t\telseif close_brackets[char] then\n\t\t\tlocal last_open_bracket = stack[#stack]\n\t\t\tif bracket_pairs[last_open_bracket] == char then\n\t\t\t\tstack[#stack] = nil\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend",
    "    local stack = {}\n    local open_brackets = {['('] = true, ['{'] = true, ['['] = true}\n    local close_brackets = {[')'] = true, ['}'] = true, [']'] = true}\n    local open_to_close = {['('] = ')', ['{'] = '}', ['['] = ']'}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open_brackets[c] then\n            table.insert(stack, c)\n        elseif close_brackets[c] then\n            local last = table.remove(stack)\n            if last == nil or open_to_close[last] ~= c then\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "    local stack = Stack()\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '[' or c == '{' then\n            stack:push(c)\n        elseif c == ')' or c == ']' or c == '}' then\n            local top = stack:pop()\n            if not top then\n                return false\n            end\n            if c == ')' and top ~= '(' then\n                return false\n            elseif c == ']' and top ~= '[' then\n                return false\n            elseif c == '}' and top ~= '{' then\n                return false\n            end\n        end\n    end\n    return stack:is_empty()\nend",
    "    local stack = {}\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if c == '(' or c == '{' or c == '[' then\n            stack.push(stack, c)\n        elseif c == ')' then\n            if stack.pop(stack) ~= '(' then\n                return false\n            end\n        elseif c == '}' then\n            if stack.pop(stack) ~= '{' then\n                return false\n            end\n        elseif c == ']' then\n            if stack.pop(stack) ~= '[' then\n                return false\n            end\n        end\n    end\n    return stack.is_empty(stack)\nend",
    "    local stack = {}\n    local open = {\n        ['('] = ')',\n        ['{'] = '}',\n        ['['] = ']'\n    }\n    local close = {\n        [')'] = '(',\n        ['}'] = '{',\n        [']'] = '['\n    }\n    for i = 1, #exp do\n        local c = exp:sub(i, i)\n        if open[c] then\n            stack[#stack + 1] = c\n        elseif close[c] then\n            if stack[#stack] == close[c] then\n                stack[#stack] = nil\n            else\n                return false\n            end\n        end\n    end\n    return #stack == 0\nend",
    "  local stack = {}\n  for i = 1, #exp do\n    local c = exp:sub(i, i)\n    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n    elseif c == ')' then\n      if stack[#stack] == '(' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == ']' then\n      if stack[#stack] == '[' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    elseif c == '}' then\n      if stack[#stack] == '{' then\n        stack[#stack] = nil\n      else\n        return false\n      end\n    end\n  end\n  return #stack == 0\nend"
  ]
}